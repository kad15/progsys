BASH(1)                     GENERAL COMMANDS MANUAL                    BASH(1)



NAME
       BASH - GNU BOURNE-AGAIN SHELL

SYNOPSIS
       BASH [OPTIONS] [COMMAND_STRING | FILE]

COPYRIGHT
       BASH IS COPYRIGHT (C) 1989-2013 BY THE FREE SOFTWARE FOUNDATION, INC.

DESCRIPTION
       BASH  IS  AN  SH-COMPATIBLE  COMMAND LANGUAGE INTERPRETER THAT EXECUTES
       COMMANDS READ FROM THE STANDARD INPUT OR FROM A FILE.  BASH ALSO INCOR‐
       PORATES USEFUL FEATURES FROM THE KORN AND C SHELLS (KSH AND CSH).

       BASH  IS  INTENDED  TO  BE A CONFORMANT IMPLEMENTATION OF THE SHELL AND
       UTILITIES PORTION  OF  THE  IEEE  POSIX  SPECIFICATION  (IEEE  STANDARD
       1003.1).  BASH CAN BE CONFIGURED TO BE POSIX-CONFORMANT BY DEFAULT.

OPTIONS
       ALL  OF  THE  SINGLE-CHARACTER SHELL OPTIONS DOCUMENTED IN THE DESCRIP‐
       TION OF THE SET BUILTIN COMMAND CAN BE USED AS OPTIONS WHEN  THE  SHELL
       IS INVOKED.  IN ADDITION, BASH INTERPRETS THE FOLLOWING OPTIONS WHEN IT
       IS INVOKED:

       -C        IF THE -C OPTION IS PRESENT, THEN COMMANDS ARE READ FROM  THE
                 FIRST NON-OPTION ARGUMENT COMMAND_STRING.  IF THERE ARE ARGU‐
                 MENTS AFTER THE COMMAND_STRING,  THEY  ARE  ASSIGNED  TO  THE
                 POSITIONAL PARAMETERS, STARTING WITH $0.
       -I        IF THE -I OPTION IS PRESENT, THE SHELL IS INTERACTIVE.
       -L        MAKE BASH ACT AS IF IT HAD BEEN INVOKED AS A LOGIN SHELL (SEE
                 INVOCATION BELOW).
       -R        IF THE -R OPTION IS PRESENT,  THE  SHELL  BECOMES  RESTRICTED
                 (SEE RESTRICTED SHELL BELOW).
       -S        IF  THE -S OPTION IS PRESENT, OR IF NO ARGUMENTS REMAIN AFTER
                 OPTION PROCESSING, THEN COMMANDS ARE READ FROM  THE  STANDARD
                 INPUT.   THIS  OPTION  ALLOWS THE POSITIONAL PARAMETERS TO BE
                 SET WHEN INVOKING AN INTERACTIVE SHELL.
       -D        A LIST OF ALL DOUBLE-QUOTED STRINGS PRECEDED BY $ IS  PRINTED
                 ON  THE STANDARD OUTPUT.  THESE ARE THE STRINGS THAT ARE SUB‐
                 JECT TO LANGUAGE TRANSLATION WHEN THE CURRENT LOCALE IS NOT C
                 OR  POSIX.   THIS  IMPLIES THE -N OPTION; NO COMMANDS WILL BE
                 EXECUTED.
       [-+]O [SHOPT_OPTION]
                 SHOPT_OPTION IS ONE OF THE  SHELL  OPTIONS  ACCEPTED  BY  THE
                 SHOPT   BUILTIN  (SEE  SHELL  BUILTIN  COMMANDS  BELOW).   IF
                 SHOPT_OPTION IS PRESENT, -O SETS THE VALUE OF THAT OPTION; +O
                 UNSETS  IT.   IF  SHOPT_OPTION IS NOT SUPPLIED, THE NAMES AND
                 VALUES OF THE SHELL OPTIONS ACCEPTED BY SHOPT ARE PRINTED  ON
                 THE  STANDARD  OUTPUT.   IF  THE INVOCATION OPTION IS +O, THE
                 OUTPUT IS DISPLAYED IN A FORMAT THAT MAY BE REUSED AS INPUT.
       --        A -- SIGNALS THE END OF OPTIONS AND DISABLES  FURTHER  OPTION
                 PROCESSING.   ANY ARGUMENTS AFTER THE -- ARE TREATED AS FILE‐
                 NAMES AND ARGUMENTS.  AN ARGUMENT OF - IS EQUIVALENT TO --.

       BASH ALSO  INTERPRETS  A  NUMBER  OF  MULTI-CHARACTER  OPTIONS.   THESE
       OPTIONS  MUST  APPEAR  ON  THE COMMAND LINE BEFORE THE SINGLE-CHARACTER
       OPTIONS TO BE RECOGNIZED.

       --DEBUGGER
              ARRANGE FOR THE DEBUGGER PROFILE TO BE EXECUTED BEFORE THE SHELL
              STARTS.   TURNS  ON EXTENDED DEBUGGING MODE (SEE THE DESCRIPTION
              OF THE EXTDEBUG OPTION TO THE SHOPT BUILTIN BELOW).
       --DUMP-PO-STRINGS
              EQUIVALENT TO -D, BUT THE OUTPUT IS IN THE GNU GETTEXT PO  (POR‐
              TABLE OBJECT) FILE FORMAT.
       --DUMP-STRINGS
              EQUIVALENT TO -D.
       --HELP DISPLAY  A  USAGE  MESSAGE  ON STANDARD OUTPUT AND EXIT SUCCESS‐
              FULLY.
       --INIT-FILE FILE
       --RCFILE FILE
              EXECUTE COMMANDS FROM FILE INSTEAD OF THE SYSTEM  WIDE  INITIAL‐
              IZATION FILE /ETC/BASH.BASHRC AND THE STANDARD PERSONAL INITIAL‐
              IZATION FILE ~/.BASHRC IF THE SHELL IS INTERACTIVE (SEE  INVOCA‐
              TION BELOW).

       --LOGIN
              EQUIVALENT TO -L.

       --NOEDITING
              DO  NOT  USE THE GNU READLINE LIBRARY TO READ COMMAND LINES WHEN
              THE SHELL IS INTERACTIVE.

       --NOPROFILE
              DO NOT READ EITHER THE SYSTEM-WIDE STARTUP FILE /ETC/PROFILE  OR
              ANY   OF  THE  PERSONAL  INITIALIZATION  FILES  ~/.BASH_PROFILE,
              ~/.BASH_LOGIN, OR ~/.PROFILE.   BY  DEFAULT,  BASH  READS  THESE
              FILES  WHEN  IT  IS  INVOKED  AS  A  LOGIN SHELL (SEE INVOCATION
              BELOW).

       --NORC DO NOT READ AND EXECUTE  THE  SYSTEM  WIDE  INITIALIZATION  FILE
              /ETC/BASH.BASHRC  AND THE PERSONAL INITIALIZATION FILE ~/.BASHRC
              IF THE SHELL IS INTERACTIVE.  THIS OPTION IS ON  BY  DEFAULT  IF
              THE SHELL IS INVOKED AS SH.

       --POSIX
              CHANGE  THE BEHAVIOR OF BASH WHERE THE DEFAULT OPERATION DIFFERS
              FROM THE POSIX STANDARD TO MATCH THE STANDARD (POSIX MODE).  SEE
              SEE  ALSO  BELOW  FOR A REFERENCE TO A DOCUMENT THAT DETAILS HOW
              POSIX MODE AFFECTS BASH'S BEHAVIOR.

       --RESTRICTED
              THE SHELL BECOMES RESTRICTED (SEE RESTRICTED SHELL BELOW).

       --VERBOSE
              EQUIVALENT TO  -V.

       --VERSION
              SHOW VERSION INFORMATION FOR THIS INSTANCE OF BASH ON THE  STAN‐
              DARD OUTPUT AND EXIT SUCCESSFULLY.

ARGUMENTS
       IF ARGUMENTS REMAIN AFTER OPTION PROCESSING, AND NEITHER THE -C NOR THE
       -S OPTION HAS BEEN SUPPLIED, THE FIRST ARGUMENT IS ASSUMED  TO  BE  THE
       NAME  OF  A FILE CONTAINING SHELL COMMANDS.  IF BASH IS INVOKED IN THIS
       FASHION, $0 IS SET TO THE NAME OF THE FILE, AND THE POSITIONAL  PARAME‐
       TERS  ARE SET TO THE REMAINING ARGUMENTS.  BASH READS AND EXECUTES COM‐
       MANDS FROM THIS FILE, THEN EXITS.  BASH'S EXIT STATUS IS THE EXIT  STA‐
       TUS  OF  THE  LAST  COMMAND EXECUTED IN THE SCRIPT.  IF NO COMMANDS ARE
       EXECUTED, THE EXIT STATUS IS 0.  AN ATTEMPT IS FIRST MADE TO  OPEN  THE
       FILE IN THE CURRENT DIRECTORY, AND, IF NO FILE IS FOUND, THEN THE SHELL
       SEARCHES THE DIRECTORIES IN PATH FOR THE SCRIPT.

INVOCATION
       A LOGIN SHELL IS ONE WHOSE FIRST CHARACTER OF ARGUMENT ZERO IS A -,  OR
       ONE STARTED WITH THE --LOGIN OPTION.

       AN  INTERACTIVE  SHELL  IS ONE STARTED WITHOUT NON-OPTION ARGUMENTS AND
       WITHOUT THE -C OPTION WHOSE STANDARD INPUT AND ERROR ARE BOTH CONNECTED
       TO  TERMINALS  (AS DETERMINED BY ISATTY(3)), OR ONE STARTED WITH THE -I
       OPTION.  PS1 IS SET AND $- INCLUDES I IF BASH IS INTERACTIVE,  ALLOWING
       A SHELL SCRIPT OR A STARTUP FILE TO TEST THIS STATE.

       THE  FOLLOWING PARAGRAPHS DESCRIBE HOW BASH EXECUTES ITS STARTUP FILES.
       IF ANY OF THE FILES EXIST BUT CANNOT BE READ, BASH  REPORTS  AN  ERROR.
       TILDES  ARE EXPANDED IN FILENAMES AS DESCRIBED BELOW UNDER TILDE EXPAN‐
       SION IN THE EXPANSION SECTION.

       WHEN BASH IS INVOKED AS AN INTERACTIVE LOGIN SHELL, OR AS A  NON-INTER‐
       ACTIVE  SHELL WITH THE --LOGIN OPTION, IT FIRST READS AND EXECUTES COM‐
       MANDS FROM THE FILE /ETC/PROFILE, IF THAT FILE EXISTS.   AFTER  READING
       THAT FILE, IT LOOKS FOR ~/.BASH_PROFILE, ~/.BASH_LOGIN, AND ~/.PROFILE,
       IN THAT ORDER, AND READS AND EXECUTES COMMANDS FROM THE FIRST ONE  THAT
       EXISTS  AND  IS  READABLE.  THE --NOPROFILE OPTION MAY BE USED WHEN THE
       SHELL IS STARTED TO INHIBIT THIS BEHAVIOR.

       WHEN A LOGIN SHELL EXITS, BASH READS AND  EXECUTES  COMMANDS  FROM  THE
       FILE ~/.BASH_LOGOUT, IF IT EXISTS.

       WHEN  AN  INTERACTIVE  SHELL THAT IS NOT A LOGIN SHELL IS STARTED, BASH
       READS AND EXECUTES COMMANDS FROM  /ETC/BASH.BASHRC  AND  ~/.BASHRC,  IF
       THESE  FILES  EXIST.  THIS MAY BE INHIBITED BY USING THE --NORC OPTION.
       THE --RCFILE FILE OPTION WILL FORCE BASH TO READ AND  EXECUTE  COMMANDS
       FROM FILE INSTEAD OF /ETC/BASH.BASHRC AND ~/.BASHRC.

       WHEN  BASH  IS  STARTED  NON-INTERACTIVELY,  TO RUN A SHELL SCRIPT, FOR
       EXAMPLE, IT LOOKS FOR THE VARIABLE BASH_ENV IN THE ENVIRONMENT, EXPANDS
       ITS  VALUE IF IT APPEARS THERE, AND USES THE EXPANDED VALUE AS THE NAME
       OF A FILE TO READ AND EXECUTE.  BASH BEHAVES AS IF THE  FOLLOWING  COM‐
       MAND WERE EXECUTED:
              IF [ -N "$BASH_ENV" ]; THEN . "$BASH_ENV"; FI
       BUT  THE VALUE OF THE PATH VARIABLE IS NOT USED TO SEARCH FOR THE FILE‐
       NAME.

       IF BASH IS INVOKED WITH THE NAME SH, IT  TRIES  TO  MIMIC  THE  STARTUP
       BEHAVIOR  OF  HISTORICAL  VERSIONS  OF SH AS CLOSELY AS POSSIBLE, WHILE
       CONFORMING TO THE POSIX STANDARD AS WELL.  WHEN INVOKED AS AN  INTERAC‐
       TIVE  LOGIN  SHELL, OR A NON-INTERACTIVE SHELL WITH THE --LOGIN OPTION,
       IT FIRST ATTEMPTS TO READ AND EXECUTE COMMANDS  FROM  /ETC/PROFILE  AND
       ~/.PROFILE,  IN  THAT  ORDER.   THE  --NOPROFILE  OPTION MAY BE USED TO
       INHIBIT THIS BEHAVIOR.  WHEN INVOKED AS AN INTERACTIVE SHELL  WITH  THE
       NAME  SH,  BASH  LOOKS FOR THE VARIABLE ENV, EXPANDS ITS VALUE IF IT IS
       DEFINED, AND USES THE EXPANDED VALUE AS THE NAME OF A FILE TO READ  AND
       EXECUTE.  SINCE A SHELL INVOKED AS SH DOES NOT ATTEMPT TO READ AND EXE‐
       CUTE COMMANDS FROM ANY OTHER STARTUP FILES, THE --RCFILE OPTION HAS  NO
       EFFECT.   A  NON-INTERACTIVE  SHELL  INVOKED  WITH THE NAME SH DOES NOT
       ATTEMPT TO READ ANY OTHER STARTUP FILES.   WHEN  INVOKED  AS  SH,  BASH
       ENTERS POSIX MODE AFTER THE STARTUP FILES ARE READ.

       WHEN  BASH  IS  STARTED IN POSIX MODE, AS WITH THE --POSIX COMMAND LINE
       OPTION, IT FOLLOWS THE POSIX STANDARD FOR STARTUP FILES.  IN THIS MODE,
       INTERACTIVE  SHELLS  EXPAND  THE ENV VARIABLE AND COMMANDS ARE READ AND
       EXECUTED FROM THE FILE WHOSE NAME IS  THE  EXPANDED  VALUE.   NO  OTHER
       STARTUP FILES ARE READ.

       BASH ATTEMPTS TO DETERMINE WHEN IT IS BEING RUN WITH ITS STANDARD INPUT
       CONNECTED TO A NETWORK CONNECTION, AS WHEN EXECUTED BY THE REMOTE SHELL
       DAEMON,  USUALLY RSHD, OR THE SECURE SHELL DAEMON SSHD.  IF BASH DETER‐
       MINES IT IS BEING RUN IN THIS FASHION, IT READS AND  EXECUTES  COMMANDS
       FROM  ~/.BASHRC  AND  ~/.BASHRC, IF THESE FILES EXIST AND ARE READABLE.
       IT WILL NOT DO THIS IF INVOKED AS SH.  THE --NORC OPTION MAY BE USED TO
       INHIBIT  THIS  BEHAVIOR,  AND  THE --RCFILE OPTION MAY BE USED TO FORCE
       ANOTHER FILE TO BE READ, BUT NEITHER RSHD NOR SSHD GENERALLY INVOKE THE
       SHELL WITH THOSE OPTIONS OR ALLOW THEM TO BE SPECIFIED.

       IF THE SHELL IS STARTED WITH THE EFFECTIVE USER (GROUP) ID NOT EQUAL TO
       THE REAL USER (GROUP) ID, AND THE -P OPTION IS NOT SUPPLIED, NO STARTUP
       FILES ARE READ, SHELL FUNCTIONS ARE NOT INHERITED FROM THE ENVIRONMENT,
       THE SHELLOPTS, BASHOPTS, CDPATH,  AND  GLOBIGNORE  VARIABLES,  IF  THEY
       APPEAR  IN  THE  ENVIRONMENT, ARE IGNORED, AND THE EFFECTIVE USER ID IS
       SET TO THE REAL USER ID.  IF THE -P OPTION IS SUPPLIED  AT  INVOCATION,
       THE  STARTUP  BEHAVIOR  IS  THE  SAME, BUT THE EFFECTIVE USER ID IS NOT
       RESET.

DEFINITIONS
       THE FOLLOWING DEFINITIONS ARE USED THROUGHOUT THE REST  OF  THIS  DOCU‐
       MENT.
       BLANK  A SPACE OR TAB.
       WORD   A  SEQUENCE  OF  CHARACTERS  CONSIDERED  AS A SINGLE UNIT BY THE
              SHELL.  ALSO KNOWN AS A TOKEN.
       NAME   A WORD CONSISTING ONLY OF  ALPHANUMERIC  CHARACTERS  AND  UNDER‐
              SCORES,  AND BEGINNING WITH AN ALPHABETIC CHARACTER OR AN UNDER‐
              SCORE.  ALSO REFERRED TO AS AN IDENTIFIER.
       METACHARACTER
              A CHARACTER THAT, WHEN UNQUOTED, SEPARATES WORDS.   ONE  OF  THE
              FOLLOWING:
              |  & ; ( ) < > SPACE TAB
       CONTROL OPERATOR
              A TOKEN THAT PERFORMS A CONTROL FUNCTION.  IT IS ONE OF THE FOL‐
              LOWING SYMBOLS:
              || & && ; ;; ( ) | |& <NEWLINE>

RESERVED WORDS
       RESERVED WORDS ARE WORDS THAT HAVE A SPECIAL MEANING TO THE SHELL.  THE
       FOLLOWING WORDS ARE RECOGNIZED AS RESERVED WHEN UNQUOTED AND EITHER THE
       FIRST WORD OF A SIMPLE COMMAND (SEE SHELL GRAMMAR BELOW) OR  THE  THIRD
       WORD OF A CASE OR FOR COMMAND:

       !  CASE   COPROC   DO  DONE ELIF ELSE ESAC FI FOR FUNCTION IF IN SELECT
       THEN UNTIL WHILE { } TIME [[ ]]

SHELL GRAMMAR
   SIMPLE COMMANDS
       A SIMPLE COMMAND IS A SEQUENCE OF OPTIONAL  VARIABLE  ASSIGNMENTS  FOL‐
       LOWED  BY  BLANK-SEPARATED  WORDS AND REDIRECTIONS, AND TERMINATED BY A
       CONTROL OPERATOR.  THE FIRST WORD SPECIFIES THE COMMAND TO BE EXECUTED,
       AND  IS  PASSED  AS  ARGUMENT  ZERO.  THE REMAINING WORDS ARE PASSED AS
       ARGUMENTS TO THE INVOKED COMMAND.

       THE RETURN VALUE OF A SIMPLE COMMAND IS ITS EXIT STATUS,  OR  128+N  IF
       THE COMMAND IS TERMINATED BY SIGNAL N.

   PIPELINES
       A  PIPELINE  IS  A SEQUENCE OF ONE OR MORE COMMANDS SEPARATED BY ONE OF
       THE CONTROL OPERATORS | OR |&.  THE FORMAT FOR A PIPELINE IS:

              [TIME [-P]] [ ! ] COMMAND [ [|⎪|&] COMMAND2 ... ]

       THE STANDARD OUTPUT OF COMMAND IS CONNECTED VIA A PIPE TO THE  STANDARD
       INPUT  OF  COMMAND2.   THIS CONNECTION IS PERFORMED BEFORE ANY REDIREC‐
       TIONS SPECIFIED BY THE COMMAND (SEE REDIRECTION BELOW).  IF |& IS USED,
       COMMAND'S  STANDARD  ERROR, IN ADDITION TO ITS STANDARD OUTPUT, IS CON‐
       NECTED TO COMMAND2'S STANDARD INPUT THROUGH THE PIPE; IT  IS  SHORTHAND
       FOR  2>&1  |.   THIS  IMPLICIT REDIRECTION OF THE STANDARD ERROR TO THE
       STANDARD OUTPUT IS PERFORMED AFTER ANY REDIRECTIONS  SPECIFIED  BY  THE
       COMMAND.

       THE RETURN STATUS OF A PIPELINE IS THE EXIT STATUS OF THE LAST COMMAND,
       UNLESS THE PIPEFAIL OPTION IS ENABLED.  IF  PIPEFAIL  IS  ENABLED,  THE
       PIPELINE'S  RETURN  STATUS IS THE VALUE OF THE LAST (RIGHTMOST) COMMAND
       TO EXIT WITH A NON-ZERO STATUS, OR ZERO IF ALL COMMANDS  EXIT  SUCCESS‐
       FULLY.  IF THE RESERVED WORD !  PRECEDES A PIPELINE, THE EXIT STATUS OF
       THAT PIPELINE IS THE LOGICAL NEGATION OF THE EXIT STATUS  AS  DESCRIBED
       ABOVE.   THE  SHELL WAITS FOR ALL COMMANDS IN THE PIPELINE TO TERMINATE
       BEFORE RETURNING A VALUE.

       IF THE TIME RESERVED WORD PRECEDES A PIPELINE, THE ELAPSED AS  WELL  AS
       USER  AND  SYSTEM  TIME CONSUMED BY ITS EXECUTION ARE REPORTED WHEN THE
       PIPELINE TERMINATES.  THE -P OPTION CHANGES THE OUTPUT FORMAT  TO  THAT
       SPECIFIED  BY POSIX.  WHEN THE SHELL IS IN POSIX MODE, IT DOES NOT REC‐
       OGNIZE TIME AS A RESERVED WORD IF THE NEXT TOKEN  BEGINS  WITH  A  `-'.
       THE  TIMEFORMAT  VARIABLE  MAY BE SET TO A FORMAT STRING THAT SPECIFIES
       HOW THE TIMING INFORMATION SHOULD BE DISPLAYED; SEE THE DESCRIPTION  OF
       TIMEFORMAT UNDER SHELL VARIABLES BELOW.

       WHEN THE SHELL IS IN POSIX MODE, TIME MAY BE FOLLOWED BY A NEWLINE.  IN
       THIS CASE, THE SHELL DISPLAYS THE TOTAL USER AND SYSTEM  TIME  CONSUMED
       BY  THE SHELL AND ITS CHILDREN.  THE TIMEFORMAT VARIABLE MAY BE USED TO
       SPECIFY THE FORMAT OF THE TIME INFORMATION.

       EACH COMMAND IN A PIPELINE IS EXECUTED AS A SEPARATE PROCESS (I.E.,  IN
       A SUBSHELL).

   LISTS
       A  LIST  IS A SEQUENCE OF ONE OR MORE PIPELINES SEPARATED BY ONE OF THE
       OPERATORS ;, &, &&, OR ||, AND OPTIONALLY TERMINATED BY ONE OF ;, &, OR
       <NEWLINE>.

       OF THESE LIST OPERATORS, && AND || HAVE EQUAL PRECEDENCE, FOLLOWED BY ;
       AND &, WHICH HAVE EQUAL PRECEDENCE.

       A SEQUENCE OF ONE OR MORE NEWLINES MAY APPEAR IN A LIST  INSTEAD  OF  A
       SEMICOLON TO DELIMIT COMMANDS.

       IF  A  COMMAND  IS TERMINATED BY THE CONTROL OPERATOR &, THE SHELL EXE‐
       CUTES THE COMMAND IN THE BACKGROUND IN A SUBSHELL.  THE SHELL DOES  NOT
       WAIT  FOR  THE COMMAND TO FINISH, AND THE RETURN STATUS IS 0.  COMMANDS
       SEPARATED BY A ; ARE EXECUTED SEQUENTIALLY; THE SHELL  WAITS  FOR  EACH
       COMMAND  TO TERMINATE IN TURN.  THE RETURN STATUS IS THE EXIT STATUS OF
       THE LAST COMMAND EXECUTED.

       AND AND OR LISTS ARE SEQUENCES OF ONE OF MORE  PIPELINES  SEPARATED  BY
       THE  &&  AND  || CONTROL OPERATORS, RESPECTIVELY.  AND AND OR LISTS ARE
       EXECUTED WITH LEFT ASSOCIATIVITY.  AN AND LIST HAS THE FORM

              COMMAND1 && COMMAND2

       COMMAND2 IS EXECUTED IF, AND ONLY IF, COMMAND1 RETURNS AN  EXIT  STATUS
       OF ZERO.

       AN OR LIST HAS THE FORM

              COMMAND1 || COMMAND2

       COMMAND2  IS  EXECUTED  IF AND ONLY IF COMMAND1 RETURNS A NON-ZERO EXIT
       STATUS.  THE RETURN STATUS OF AND AND OR LISTS IS THE  EXIT  STATUS  OF
       THE LAST COMMAND EXECUTED IN THE LIST.

   COMPOUND COMMANDS
       A  COMPOUND COMMAND IS ONE OF THE FOLLOWING.  IN MOST CASES A LIST IN A
       COMMAND'S DESCRIPTION MAY BE SEPARATED FROM THE REST OF THE COMMAND  BY
       ONE  OR  MORE  NEWLINES, AND MAY BE FOLLOWED BY A NEWLINE IN PLACE OF A
       SEMICOLON.

       (LIST) LIST IS EXECUTED IN A SUBSHELL ENVIRONMENT (SEE  COMMAND  EXECU‐
              TION  ENVIRONMENT BELOW).  VARIABLE ASSIGNMENTS AND BUILTIN COM‐
              MANDS THAT AFFECT THE  SHELL'S  ENVIRONMENT  DO  NOT  REMAIN  IN
              EFFECT  AFTER  THE  COMMAND COMPLETES.  THE RETURN STATUS IS THE
              EXIT STATUS OF LIST.

       { LIST; }
              LIST IS SIMPLY EXECUTED IN THE CURRENT SHELL ENVIRONMENT.   LIST
              MUST  BE  TERMINATED WITH A NEWLINE OR SEMICOLON.  THIS IS KNOWN
              AS A GROUP COMMAND.  THE RETURN STATUS IS  THE  EXIT  STATUS  OF
              LIST.   NOTE THAT UNLIKE THE METACHARACTERS ( AND ), { AND } ARE
              RESERVED WORDS AND MUST OCCUR WHERE A RESERVED WORD IS PERMITTED
              TO  BE  RECOGNIZED.   SINCE THEY DO NOT CAUSE A WORD BREAK, THEY
              MUST BE SEPARATED FROM  LIST  BY  WHITESPACE  OR  ANOTHER  SHELL
              METACHARACTER.

       ((EXPRESSION))
              THE  EXPRESSION  IS  EVALUATED  ACCORDING TO THE RULES DESCRIBED
              BELOW UNDER ARITHMETIC EVALUATION.  IF THE VALUE OF THE  EXPRES‐
              SION  IS  NON-ZERO, THE RETURN STATUS IS 0; OTHERWISE THE RETURN
              STATUS IS 1.  THIS IS EXACTLY EQUIVALENT TO LET "EXPRESSION".

       [[ EXPRESSION ]]
              RETURN A STATUS OF 0 OR 1 DEPENDING ON  THE  EVALUATION  OF  THE
              CONDITIONAL  EXPRESSION EXPRESSION.  EXPRESSIONS ARE COMPOSED OF
              THE PRIMARIES DESCRIBED  BELOW  UNDER  CONDITIONAL  EXPRESSIONS.
              WORD  SPLITTING  AND PATHNAME EXPANSION ARE NOT PERFORMED ON THE
              WORDS BETWEEN THE [[ AND  ]];  TILDE  EXPANSION,  PARAMETER  AND
              VARIABLE  EXPANSION, ARITHMETIC EXPANSION, COMMAND SUBSTITUTION,
              PROCESS SUBSTITUTION, AND QUOTE REMOVAL ARE  PERFORMED.   CONDI‐
              TIONAL OPERATORS SUCH AS -F MUST BE UNQUOTED TO BE RECOGNIZED AS
              PRIMARIES.

              WHEN USED WITH [[, THE < AND > OPERATORS SORT  LEXICOGRAPHICALLY
              USING THE CURRENT LOCALE.

       SEE  THE DESCRIPTION OF THE TEST BUILTIN COMMAND (SECTION SHELL BUILTIN
       COMMANDS BELOW) FOR THE HANDLING OF PARAMETERS (I.E.   MISSING  PARAME‐
       TERS).

       WHEN  THE  == AND != OPERATORS ARE USED, THE STRING TO THE RIGHT OF THE
       OPERATOR IS CONSIDERED A PATTERN AND MATCHED  ACCORDING  TO  THE  RULES
       DESCRIBED  BELOW UNDER PATTERN MATCHING, AS IF THE EXTGLOB SHELL OPTION
       WERE ENABLED.  THE = OPERATOR IS EQUIVALENT TO ==.  IF THE SHELL OPTION
       NOCASEMATCH  IS  ENABLED,  THE MATCH IS PERFORMED WITHOUT REGARD TO THE
       CASE OF ALPHABETIC CHARACTERS.  THE RETURN VALUE IS  0  IF  THE  STRING
       MATCHES  (==) OR DOES NOT MATCH (!=) THE PATTERN, AND 1 OTHERWISE.  ANY
       PART OF THE PATTERN MAY BE QUOTED TO FORCE THE  QUOTED  PORTION  TO  BE
       MATCHED AS A STRING.

       AN  ADDITIONAL  BINARY OPERATOR, =~, IS AVAILABLE, WITH THE SAME PRECE‐
       DENCE AS == AND !=.  WHEN IT IS USED, THE STRING TO THE  RIGHT  OF  THE
       OPERATOR  IS  CONSIDERED  AN  EXTENDED  REGULAR  EXPRESSION AND MATCHED
       ACCORDINGLY (AS IN REGEX(3)).  THE RETURN VALUE  IS  0  IF  THE  STRING
       MATCHES  THE  PATTERN,  AND  1 OTHERWISE.  IF THE REGULAR EXPRESSION IS
       SYNTACTICALLY INCORRECT, THE CONDITIONAL EXPRESSION'S RETURN  VALUE  IS
       2.   IF THE SHELL OPTION NOCASEMATCH IS ENABLED, THE MATCH IS PERFORMED
       WITHOUT REGARD TO THE CASE OF ALPHABETIC CHARACTERS.  ANY PART  OF  THE
       PATTERN  MAY  BE  QUOTED TO FORCE THE QUOTED PORTION TO BE MATCHED AS A
       STRING.  BRACKET EXPRESSIONS IN REGULAR  EXPRESSIONS  MUST  BE  TREATED
       CAREFULLY,  SINCE NORMAL QUOTING CHARACTERS LOSE THEIR MEANINGS BETWEEN
       BRACKETS.  IF THE PATTERN IS STORED IN A SHELL  VARIABLE,  QUOTING  THE
       VARIABLE EXPANSION FORCES THE ENTIRE PATTERN TO BE MATCHED AS A STRING.
       SUBSTRINGS MATCHED BY PARENTHESIZED SUBEXPRESSIONS WITHIN  THE  REGULAR
       EXPRESSION  ARE  SAVED IN THE ARRAY VARIABLE BASH_REMATCH.  THE ELEMENT
       OF BASH_REMATCH WITH INDEX 0 IS THE PORTION OF THE STRING MATCHING  THE
       ENTIRE REGULAR EXPRESSION.  THE ELEMENT OF BASH_REMATCH WITH INDEX N IS
       THE PORTION OF THE STRING MATCHING THE NTH PARENTHESIZED SUBEXPRESSION.

       EXPRESSIONS MAY BE COMBINED USING THE FOLLOWING  OPERATORS,  LISTED  IN
       DECREASING ORDER OF PRECEDENCE:

              ( EXPRESSION )
                     RETURNS  THE  VALUE  OF  EXPRESSION.  THIS MAY BE USED TO
                     OVERRIDE THE NORMAL PRECEDENCE OF OPERATORS.
              ! EXPRESSION
                     TRUE IF EXPRESSION IS FALSE.
              EXPRESSION1 && EXPRESSION2
                     TRUE IF BOTH EXPRESSION1 AND EXPRESSION2 ARE TRUE.
              EXPRESSION1 || EXPRESSION2
                     TRUE IF EITHER EXPRESSION1 OR EXPRESSION2 IS TRUE.

              THE && AND || OPERATORS DO NOT EVALUATE EXPRESSION2 IF THE VALUE
              OF  EXPRESSION1  IS  SUFFICIENT TO DETERMINE THE RETURN VALUE OF
              THE ENTIRE CONDITIONAL EXPRESSION.

       FOR NAME [ [ IN [ WORD ... ] ] ; ] DO LIST ; DONE
              THE LIST OF WORDS FOLLOWING IN IS EXPANDED, GENERATING A LIST OF
              ITEMS.  THE VARIABLE NAME IS SET TO EACH ELEMENT OF THIS LIST IN
              TURN, AND LIST IS EXECUTED EACH TIME.  IF THE IN WORD  IS  OMIT‐
              TED,  THE  FOR  COMMAND  EXECUTES  LIST ONCE FOR EACH POSITIONAL
              PARAMETER THAT IS SET (SEE PARAMETERS BELOW).  THE RETURN STATUS
              IS  THE  EXIT  STATUS OF THE LAST COMMAND THAT EXECUTES.  IF THE
              EXPANSION OF THE ITEMS FOLLOWING IN RESULTS IN AN EMPTY LIST, NO
              COMMANDS ARE EXECUTED, AND THE RETURN STATUS IS 0.

       FOR (( EXPR1 ; EXPR2 ; EXPR3 )) ; DO LIST ; DONE
              FIRST, THE ARITHMETIC EXPRESSION EXPR1 IS EVALUATED ACCORDING TO
              THE RULES DESCRIBED  BELOW  UNDER  ARITHMETIC  EVALUATION.   THE
              ARITHMETIC  EXPRESSION  EXPR2 IS THEN EVALUATED REPEATEDLY UNTIL
              IT EVALUATES TO ZERO.  EACH TIME EXPR2 EVALUATES TO  A  NON-ZERO
              VALUE,  LIST  IS EXECUTED AND THE ARITHMETIC EXPRESSION EXPR3 IS
              EVALUATED.  IF ANY EXPRESSION IS OMITTED, IT BEHAVES  AS  IF  IT
              EVALUATES TO 1.  THE RETURN VALUE IS THE EXIT STATUS OF THE LAST
              COMMAND IN LIST THAT IS EXECUTED, OR FALSE IF ANY OF THE EXPRES‐
              SIONS IS INVALID.

       SELECT NAME [ IN WORD ] ; DO LIST ; DONE
              THE LIST OF WORDS FOLLOWING IN IS EXPANDED, GENERATING A LIST OF
              ITEMS.  THE SET OF EXPANDED WORDS IS  PRINTED  ON  THE  STANDARD
              ERROR,  EACH  PRECEDED  BY A NUMBER.  IF THE IN WORD IS OMITTED,
              THE POSITIONAL PARAMETERS ARE PRINTED  (SEE  PARAMETERS  BELOW).
              THE  PS3 PROMPT IS THEN DISPLAYED AND A LINE READ FROM THE STAN‐
              DARD INPUT.  IF THE LINE CONSISTS OF A NUMBER  CORRESPONDING  TO
              ONE  OF  THE  DISPLAYED  WORDS, THEN THE VALUE OF NAME IS SET TO
              THAT WORD.  IF THE LINE IS EMPTY, THE WORDS AND PROMPT ARE  DIS‐
              PLAYED AGAIN.  IF EOF IS READ, THE COMMAND COMPLETES.  ANY OTHER
              VALUE READ CAUSES NAME TO BE SET TO  NULL.   THE  LINE  READ  IS
              SAVED  IN  THE  VARIABLE REPLY.  THE LIST IS EXECUTED AFTER EACH
              SELECTION UNTIL A BREAK COMMAND IS EXECUTED.  THE EXIT STATUS OF
              SELECT  IS THE EXIT STATUS OF THE LAST COMMAND EXECUTED IN LIST,
              OR ZERO IF NO COMMANDS WERE EXECUTED.

       CASE WORD IN [ [(] PATTERN [ | PATTERN ] ... ) LIST ;; ] ... ESAC
              A CASE COMMAND FIRST EXPANDS WORD, AND TRIES TO MATCH IT AGAINST
              EACH PATTERN IN TURN, USING THE SAME MATCHING RULES AS FOR PATH‐
              NAME EXPANSION (SEE PATHNAME  EXPANSION  BELOW).   THE  WORD  IS
              EXPANDED  USING  TILDE  EXPANSION, PARAMETER AND VARIABLE EXPAN‐
              SION, ARITHMETIC  SUBSTITUTION,  COMMAND  SUBSTITUTION,  PROCESS
              SUBSTITUTION  AND  QUOTE  REMOVAL.   EACH  PATTERN  EXAMINED  IS
              EXPANDED USING TILDE EXPANSION, PARAMETER  AND  VARIABLE  EXPAN‐
              SION, ARITHMETIC SUBSTITUTION, COMMAND SUBSTITUTION, AND PROCESS
              SUBSTITUTION.  IF THE SHELL OPTION NOCASEMATCH IS  ENABLED,  THE
              MATCH  IS  PERFORMED  WITHOUT  REGARD  TO THE CASE OF ALPHABETIC
              CHARACTERS.  WHEN A MATCH IS FOUND, THE  CORRESPONDING  LIST  IS
              EXECUTED.  IF THE ;; OPERATOR IS USED, NO SUBSEQUENT MATCHES ARE
              ATTEMPTED AFTER THE FIRST PATTERN MATCH.  USING ;& IN  PLACE  OF
              ;;  CAUSES  EXECUTION  TO CONTINUE WITH THE LIST ASSOCIATED WITH
              THE NEXT SET OF PATTERNS.  USING ;;& IN PLACE OF ;;  CAUSES  THE
              SHELL  TO  TEST  THE NEXT PATTERN LIST IN THE STATEMENT, IF ANY,
              AND EXECUTE ANY ASSOCIATED LIST ON A SUCCESSFUL MATCH.  THE EXIT
              STATUS IS ZERO IF NO PATTERN MATCHES.  OTHERWISE, IT IS THE EXIT
              STATUS OF THE LAST COMMAND EXECUTED IN LIST.

       IF LIST; THEN LIST; [ ELIF LIST; THEN LIST; ] ... [ ELSE LIST; ] FI
              THE IF LIST IS EXECUTED.  IF ITS EXIT STATUS IS ZERO,  THE  THEN
              LIST  IS  EXECUTED.   OTHERWISE,  EACH  ELIF LIST IS EXECUTED IN
              TURN, AND IF ITS EXIT STATUS IS  ZERO,  THE  CORRESPONDING  THEN
              LIST IS EXECUTED AND THE COMMAND COMPLETES.  OTHERWISE, THE ELSE
              LIST IS EXECUTED, IF PRESENT.  THE EXIT STATUS IS THE EXIT  STA‐
              TUS OF THE LAST COMMAND EXECUTED, OR ZERO IF NO CONDITION TESTED
              TRUE.

       WHILE LIST-1; DO LIST-2; DONE
       UNTIL LIST-1; DO LIST-2; DONE
              THE WHILE COMMAND CONTINUOUSLY EXECUTES THE LIST LIST-2 AS  LONG
              AS THE LAST COMMAND IN THE LIST LIST-1 RETURNS AN EXIT STATUS OF
              ZERO.  THE UNTIL COMMAND IS  IDENTICAL  TO  THE  WHILE  COMMAND,
              EXCEPT  THAT  THE TEST IS NEGATED; LIST-2 IS EXECUTED AS LONG AS
              THE LAST COMMAND IN LIST-1 RETURNS A NON-ZERO EXIT STATUS.   THE
              EXIT  STATUS  OF THE WHILE AND UNTIL COMMANDS IS THE EXIT STATUS
              OF THE LAST COMMAND EXECUTED IN LIST-2, OR ZERO IF NONE WAS EXE‐
              CUTED.

   COPROCESSES
       A COPROCESS IS A SHELL COMMAND PRECEDED BY THE COPROC RESERVED WORD.  A
       COPROCESS IS EXECUTED ASYNCHRONOUSLY IN A SUBSHELL, AS IF  THE  COMMAND
       HAD  BEEN  TERMINATED  WITH THE & CONTROL OPERATOR, WITH A TWO-WAY PIPE
       ESTABLISHED BETWEEN THE EXECUTING SHELL AND THE COPROCESS.

       THE FORMAT FOR A COPROCESS IS:

              COPROC [NAME] COMMAND [REDIRECTIONS]

       THIS CREATES A COPROCESS NAMED NAME.  IF  NAME  IS  NOT  SUPPLIED,  THE
       DEFAULT NAME IS COPROC.  NAME MUST NOT BE SUPPLIED IF COMMAND IS A SIM‐
       PLE COMMAND (SEE ABOVE); OTHERWISE, IT IS INTERPRETED AS THE FIRST WORD
       OF  THE SIMPLE COMMAND.  WHEN THE COPROCESS IS EXECUTED, THE SHELL CRE‐
       ATES AN ARRAY VARIABLE (SEE ARRAYS BELOW) NAMED NAME IN THE CONTEXT  OF
       THE EXECUTING SHELL.  THE STANDARD OUTPUT OF COMMAND IS CONNECTED VIA A
       PIPE TO A FILE  DESCRIPTOR  IN  THE  EXECUTING  SHELL,  AND  THAT  FILE
       DESCRIPTOR  IS  ASSIGNED  TO NAME[0].  THE STANDARD INPUT OF COMMAND IS
       CONNECTED VIA A PIPE TO A FILE DESCRIPTOR IN THE EXECUTING  SHELL,  AND
       THAT  FILE DESCRIPTOR IS ASSIGNED TO NAME[1].  THIS PIPE IS ESTABLISHED
       BEFORE ANY REDIRECTIONS  SPECIFIED  BY  THE  COMMAND  (SEE  REDIRECTION
       BELOW).   THE  FILE  DESCRIPTORS  CAN BE UTILIZED AS ARGUMENTS TO SHELL
       COMMANDS AND REDIRECTIONS USING STANDARD  WORD  EXPANSIONS.   THE  FILE
       DESCRIPTORS  ARE  NOT  AVAILABLE  IN  SUBSHELLS.  THE PROCESS ID OF THE
       SHELL SPAWNED TO EXECUTE THE COPROCESS IS AVAILABLE AS THE VALUE OF THE
       VARIABLE  NAME_PID.   THE  WAIT BUILTIN COMMAND MAY BE USED TO WAIT FOR
       THE COPROCESS TO TERMINATE.

       SINCE THE COPROCESS IS CREATED AS AN ASYNCHRONOUS COMMAND,  THE  COPROC
       COMMAND  ALWAYS  RETURNS  SUCCESS.  THE RETURN STATUS OF A COPROCESS IS
       THE EXIT STATUS OF COMMAND.

   SHELL FUNCTION DEFINITIONS
       A SHELL FUNCTION IS AN OBJECT THAT IS CALLED LIKE A SIMPLE COMMAND  AND
       EXECUTES  A  COMPOUND  COMMAND WITH A NEW SET OF POSITIONAL PARAMETERS.
       SHELL FUNCTIONS ARE DECLARED AS FOLLOWS:

       NAME () COMPOUND-COMMAND [REDIRECTION]
       FUNCTION NAME [()] COMPOUND-COMMAND [REDIRECTION]
              THIS DEFINES A FUNCTION NAMED NAME.  THE RESERVED WORD  FUNCTION
              IS  OPTIONAL.   IF  THE  FUNCTION RESERVED WORD IS SUPPLIED, THE
              PARENTHESES ARE OPTIONAL.  THE BODY OF THE FUNCTION IS THE  COM‐
              POUND  COMMAND  COMPOUND-COMMAND  (SEE COMPOUND COMMANDS ABOVE).
              THAT COMMAND IS USUALLY A LIST OF COMMANDS BETWEEN { AND },  BUT
              MAY  BE  ANY COMMAND LISTED UNDER COMPOUND COMMANDS ABOVE.  COM‐
              POUND-COMMAND IS EXECUTED WHENEVER NAME IS SPECIFIED AS THE NAME
              OF  A  SIMPLE  COMMAND.  WHEN IN POSIX MODE, NAME MAY NOT BE THE
              NAME OF ONE OF THE POSIX  SPECIAL  BUILTINS.   ANY  REDIRECTIONS
              (SEE REDIRECTION BELOW) SPECIFIED WHEN A FUNCTION IS DEFINED ARE
              PERFORMED WHEN THE FUNCTION IS EXECUTED.  THE EXIT STATUS  OF  A
              FUNCTION  DEFINITION  IS  ZERO UNLESS A SYNTAX ERROR OCCURS OR A
              READONLY FUNCTION WITH THE SAME NAME ALREADY EXISTS.  WHEN  EXE‐
              CUTED,  THE  EXIT STATUS OF A FUNCTION IS THE EXIT STATUS OF THE
              LAST COMMAND EXECUTED IN THE BODY.  (SEE FUNCTIONS BELOW.)

COMMENTS
       IN A NON-INTERACTIVE SHELL, OR AN INTERACTIVE SHELL IN WHICH THE INTER‐
       ACTIVE_COMMENTS  OPTION  TO  THE  SHOPT  BUILTIN  IS ENABLED (SEE SHELL
       BUILTIN COMMANDS BELOW), A WORD BEGINNING WITH # CAUSES THAT  WORD  AND
       ALL  REMAINING  CHARACTERS  ON THAT LINE TO BE IGNORED.  AN INTERACTIVE
       SHELL WITHOUT THE INTERACTIVE_COMMENTS OPTION ENABLED  DOES  NOT  ALLOW
       COMMENTS.  THE INTERACTIVE_COMMENTS OPTION IS ON BY DEFAULT IN INTERAC‐
       TIVE SHELLS.

QUOTING
       QUOTING IS USED TO REMOVE THE SPECIAL MEANING OF CERTAIN CHARACTERS  OR
       WORDS  TO  THE SHELL.  QUOTING CAN BE USED TO DISABLE SPECIAL TREATMENT
       FOR SPECIAL CHARACTERS, TO PREVENT RESERVED WORDS FROM BEING RECOGNIZED
       AS SUCH, AND TO PREVENT PARAMETER EXPANSION.

       EACH  OF  THE METACHARACTERS LISTED ABOVE UNDER DEFINITIONS HAS SPECIAL
       MEANING TO THE SHELL AND MUST BE QUOTED IF IT IS TO REPRESENT ITSELF.

       WHEN THE COMMAND HISTORY EXPANSION FACILITIES ARE BEING USED (SEE  HIS‐
       TORY EXPANSION BELOW), THE HISTORY EXPANSION CHARACTER, USUALLY !, MUST
       BE QUOTED TO PREVENT HISTORY EXPANSION.

       THERE ARE  THREE  QUOTING  MECHANISMS:  THE  ESCAPE  CHARACTER,  SINGLE
       QUOTES, AND DOUBLE QUOTES.

       A  NON-QUOTED  BACKSLASH (\) IS THE ESCAPE CHARACTER.  IT PRESERVES THE
       LITERAL VALUE OF THE NEXT CHARACTER THAT FOLLOWS, WITH THE EXCEPTION OF
       <NEWLINE>.   IF  A  \<NEWLINE>  PAIR  APPEARS, AND THE BACKSLASH IS NOT
       ITSELF QUOTED, THE \<NEWLINE> IS TREATED AS A LINE  CONTINUATION  (THAT
       IS, IT IS REMOVED FROM THE INPUT STREAM AND EFFECTIVELY IGNORED).

       ENCLOSING  CHARACTERS  IN  SINGLE QUOTES PRESERVES THE LITERAL VALUE OF
       EACH CHARACTER WITHIN THE QUOTES.  A SINGLE QUOTE MAY NOT OCCUR BETWEEN
       SINGLE QUOTES, EVEN WHEN PRECEDED BY A BACKSLASH.

       ENCLOSING  CHARACTERS  IN  DOUBLE QUOTES PRESERVES THE LITERAL VALUE OF
       ALL CHARACTERS WITHIN THE QUOTES, WITH THE EXCEPTION OF $, `,  \,  AND,
       WHEN  HISTORY  EXPANSION  IS ENABLED, !.  THE CHARACTERS $ AND ` RETAIN
       THEIR SPECIAL MEANING WITHIN DOUBLE QUOTES.  THE BACKSLASH RETAINS  ITS
       SPECIAL  MEANING ONLY WHEN FOLLOWED BY ONE OF THE FOLLOWING CHARACTERS:
       $, `, ", \, OR <NEWLINE>.  A DOUBLE QUOTE MAY BE QUOTED  WITHIN  DOUBLE
       QUOTES BY PRECEDING IT WITH A BACKSLASH.  IF ENABLED, HISTORY EXPANSION
       WILL BE PERFORMED UNLESS AN !  APPEARING IN DOUBLE  QUOTES  IS  ESCAPED
       USING A BACKSLASH.  THE BACKSLASH PRECEDING THE !  IS NOT REMOVED.

       THE  SPECIAL  PARAMETERS  *  AND  @ HAVE SPECIAL MEANING WHEN IN DOUBLE
       QUOTES (SEE PARAMETERS BELOW).

       WORDS OF THE FORM $'STRING' ARE TREATED SPECIALLY.  THE WORD EXPANDS TO
       STRING,  WITH BACKSLASH-ESCAPED CHARACTERS REPLACED AS SPECIFIED BY THE
       ANSI C STANDARD.  BACKSLASH ESCAPE SEQUENCES, IF PRESENT,  ARE  DECODED
       AS FOLLOWS:
              \A     ALERT (BELL)
              \B     BACKSPACE
              \E
              \E     AN ESCAPE CHARACTER
              \F     FORM FEED
              \N     NEW LINE
              \R     CARRIAGE RETURN
              \T     HORIZONTAL TAB
              \V     VERTICAL TAB
              \\     BACKSLASH
              \'     SINGLE QUOTE
              \"     DOUBLE QUOTE
              \NNN   THE  EIGHT-BIT  CHARACTER  WHOSE VALUE IS THE OCTAL VALUE
                     NNN (ONE TO THREE DIGITS)
              \XHH   THE EIGHT-BIT CHARACTER WHOSE VALUE  IS  THE  HEXADECIMAL
                     VALUE HH (ONE OR TWO HEX DIGITS)
              \UHHHH THE  UNICODE (ISO/IEC 10646) CHARACTER WHOSE VALUE IS THE
                     HEXADECIMAL VALUE HHHH (ONE TO FOUR HEX DIGITS)
              \UHHHHHHHH
                     THE UNICODE (ISO/IEC 10646) CHARACTER WHOSE VALUE IS  THE
                     HEXADECIMAL VALUE HHHHHHHH (ONE TO EIGHT HEX DIGITS)
              \CX    A CONTROL-X CHARACTER

       THE  EXPANDED  RESULT  IS  SINGLE-QUOTED, AS IF THE DOLLAR SIGN HAD NOT
       BEEN PRESENT.

       A DOUBLE-QUOTED STRING PRECEDED BY A DOLLAR SIGN ($"STRING") WILL CAUSE
       THE  STRING  TO  BE TRANSLATED ACCORDING TO THE CURRENT LOCALE.  IF THE
       CURRENT LOCALE IS C OR POSIX, THE  DOLLAR  SIGN  IS  IGNORED.   IF  THE
       STRING IS TRANSLATED AND REPLACED, THE REPLACEMENT IS DOUBLE-QUOTED.

PARAMETERS
       A  PARAMETER IS AN ENTITY THAT STORES VALUES.  IT CAN BE A NAME, A NUM‐
       BER, OR ONE OF THE SPECIAL CHARACTERS LISTED BELOW UNDER SPECIAL PARAM‐
       ETERS.   A VARIABLE IS A PARAMETER DENOTED BY A NAME.  A VARIABLE HAS A
       VALUE AND ZERO OR MORE ATTRIBUTES.  ATTRIBUTES ARE ASSIGNED  USING  THE
       DECLARE BUILTIN COMMAND (SEE DECLARE BELOW IN SHELL BUILTIN COMMANDS).

       A PARAMETER IS SET IF IT HAS BEEN ASSIGNED A VALUE.  THE NULL STRING IS
       A VALID VALUE.  ONCE A VARIABLE IS SET, IT MAY BE UNSET ONLY  BY  USING
       THE UNSET BUILTIN COMMAND (SEE SHELL BUILTIN COMMANDS BELOW).

       A VARIABLE MAY BE ASSIGNED TO BY A STATEMENT OF THE FORM

              NAME=[VALUE]

       IF  VALUE  IS NOT GIVEN, THE VARIABLE IS ASSIGNED THE NULL STRING.  ALL
       VALUES UNDERGO TILDE EXPANSION, PARAMETER AND VARIABLE EXPANSION,  COM‐
       MAND  SUBSTITUTION, ARITHMETIC EXPANSION, AND QUOTE REMOVAL (SEE EXPAN‐
       SION BELOW).  IF THE VARIABLE HAS ITS INTEGER ATTRIBUTE SET, THEN VALUE
       IS EVALUATED AS AN ARITHMETIC EXPRESSION EVEN IF THE $((...)) EXPANSION
       IS NOT USED (SEE ARITHMETIC EXPANSION BELOW).  WORD  SPLITTING  IS  NOT
       PERFORMED,  WITH THE EXCEPTION OF "$@" AS EXPLAINED BELOW UNDER SPECIAL
       PARAMETERS.  PATHNAME EXPANSION IS NOT  PERFORMED.   ASSIGNMENT  STATE‐
       MENTS  MAY  ALSO  APPEAR  AS  ARGUMENTS TO THE ALIAS, DECLARE, TYPESET,
       EXPORT, READONLY, AND LOCAL BUILTIN  COMMANDS.   WHEN  IN  POSIX  MODE,
       THESE  BUILTINS  MAY APPEAR IN A COMMAND AFTER ONE OR MORE INSTANCES OF
       THE COMMAND BUILTIN AND RETAIN THESE ASSIGNMENT STATEMENT PROPERTIES.

       IN THE CONTEXT WHERE AN ASSIGNMENT STATEMENT IS ASSIGNING A VALUE TO  A
       SHELL VARIABLE OR ARRAY INDEX, THE += OPERATOR CAN BE USED TO APPEND TO
       OR ADD TO THE VARIABLE'S PREVIOUS VALUE.  WHEN += IS APPLIED TO A VARI‐
       ABLE  FOR  WHICH THE INTEGER ATTRIBUTE HAS BEEN SET, VALUE IS EVALUATED
       AS AN ARITHMETIC EXPRESSION AND ADDED TO THE VARIABLE'S CURRENT  VALUE,
       WHICH IS ALSO EVALUATED.  WHEN += IS APPLIED TO AN ARRAY VARIABLE USING
       COMPOUND ASSIGNMENT (SEE ARRAYS BELOW), THE  VARIABLE'S  VALUE  IS  NOT
       UNSET (AS IT IS WHEN USING =), AND NEW VALUES ARE APPENDED TO THE ARRAY
       BEGINNING AT ONE GREATER THAN THE ARRAY'S MAXIMUM  INDEX  (FOR  INDEXED
       ARRAYS) OR ADDED AS ADDITIONAL KEY-VALUE PAIRS IN AN ASSOCIATIVE ARRAY.
       WHEN APPLIED  TO  A  STRING-VALUED  VARIABLE,  VALUE  IS  EXPANDED  AND
       APPENDED TO THE VARIABLE'S VALUE.

       A VARIABLE CAN BE ASSIGNED THE NAMEREF ATTRIBUTE USING THE -N OPTION TO
       THE DECLARE OR LOCAL BUILTIN COMMANDS (SEE THE DESCRIPTIONS OF  DECLARE
       AND  LOCAL  BELOW) TO CREATE A NAMEREF, OR A REFERENCE TO ANOTHER VARI‐
       ABLE.  THIS ALLOWS VARIABLES TO BE  MANIPULATED  INDIRECTLY.   WHENEVER
       THE  NAMEREF  VARIABLE  IS  REFERENCED OR ASSIGNED TO, THE OPERATION IS
       ACTUALLY PERFORMED ON THE VARIABLE SPECIFIED BY THE NAMEREF  VARIABLE'S
       VALUE.  A NAMEREF IS COMMONLY USED WITHIN SHELL FUNCTIONS TO REFER TO A
       VARIABLE WHOSE NAME IS PASSED AS AN  ARGUMENT  TO  THE  FUNCTION.   FOR
       INSTANCE, IF A VARIABLE NAME IS PASSED TO A SHELL FUNCTION AS ITS FIRST
       ARGUMENT, RUNNING
              DECLARE -N REF=$1
       INSIDE THE FUNCTION CREATES A NAMEREF VARIABLE REF WHOSE VALUE  IS  THE
       VARIABLE NAME PASSED AS THE FIRST ARGUMENT.  REFERENCES AND ASSIGNMENTS
       TO REF ARE TREATED AS REFERENCES AND ASSIGNMENTS TO THE VARIABLE  WHOSE
       NAME  WAS  PASSED AS $1.  IF THE CONTROL VARIABLE IN A FOR LOOP HAS THE
       NAMEREF ATTRIBUTE, THE LIST OF WORDS CAN BE A LIST OF SHELL  VARIABLES,
       AND  A NAME REFERENCE WILL BE ESTABLISHED FOR EACH WORD IN THE LIST, IN
       TURN, WHEN THE LOOP IS EXECUTED.  ARRAY VARIABLES CANNOT BE  GIVEN  THE
       -N ATTRIBUTE.  HOWEVER, NAMEREF VARIABLES CAN REFERENCE ARRAY VARIABLES
       AND SUBSCRIPTED ARRAY VARIABLES.  NAMEREFS CAN BE UNSET  USING  THE  -N
       OPTION  TO THE UNSET BUILTIN.  OTHERWISE, IF UNSET IS EXECUTED WITH THE
       NAME OF A NAMEREF VARIABLE AS AN ARGUMENT, THE VARIABLE  REFERENCED  BY
       THE NAMEREF VARIABLE WILL BE UNSET.

   POSITIONAL PARAMETERS
       A  POSITIONAL  PARAMETER  IS A PARAMETER DENOTED BY ONE OR MORE DIGITS,
       OTHER THAN THE SINGLE DIGIT 0.  POSITIONAL PARAMETERS ARE ASSIGNED FROM
       THE  SHELL'S  ARGUMENTS WHEN IT IS INVOKED, AND MAY BE REASSIGNED USING
       THE SET BUILTIN COMMAND.  POSITIONAL PARAMETERS MAY NOT BE ASSIGNED  TO
       WITH  ASSIGNMENT STATEMENTS.  THE POSITIONAL PARAMETERS ARE TEMPORARILY
       REPLACED WHEN A SHELL FUNCTION IS EXECUTED (SEE FUNCTIONS BELOW).

       WHEN A POSITIONAL PARAMETER CONSISTING OF MORE THAN A SINGLE  DIGIT  IS
       EXPANDED, IT MUST BE ENCLOSED IN BRACES (SEE EXPANSION BELOW).

   SPECIAL PARAMETERS
       THE  SHELL  TREATS  SEVERAL PARAMETERS SPECIALLY.  THESE PARAMETERS MAY
       ONLY BE REFERENCED; ASSIGNMENT TO THEM IS NOT ALLOWED.
       *      EXPANDS TO THE POSITIONAL PARAMETERS, STARTING FROM  ONE.   WHEN
              THE  EXPANSION  IS  NOT  WITHIN  DOUBLE  QUOTES, EACH POSITIONAL
              PARAMETER EXPANDS TO A SEPARATE WORD.  IN CONTEXTS WHERE  IT  IS
              PERFORMED, THOSE WORDS ARE SUBJECT TO FURTHER WORD SPLITTING AND
              PATHNAME EXPANSION.  WHEN THE  EXPANSION  OCCURS  WITHIN  DOUBLE
              QUOTES,  IT  EXPANDS  TO  A  SINGLE  WORD WITH THE VALUE OF EACH
              PARAMETER SEPARATED BY THE FIRST CHARACTER OF  THE  IFS  SPECIAL
              VARIABLE.   THAT  IS, "$*" IS EQUIVALENT TO "$1C$2C...", WHERE C
              IS THE FIRST CHARACTER OF THE VALUE OF THE IFS VARIABLE.  IF IFS
              IS  UNSET,  THE  PARAMETERS  ARE SEPARATED BY SPACES.  IF IFS IS
              NULL, THE PARAMETERS ARE JOINED WITHOUT INTERVENING SEPARATORS.
       @      EXPANDS TO THE POSITIONAL PARAMETERS, STARTING FROM  ONE.   WHEN
              THE  EXPANSION  OCCURS  WITHIN  DOUBLE  QUOTES,  EACH  PARAMETER
              EXPANDS TO A SEPARATE WORD.  THAT IS, "$@" IS EQUIVALENT TO "$1"
              "$2"  ...   IF THE DOUBLE-QUOTED EXPANSION OCCURS WITHIN A WORD,
              THE EXPANSION OF THE FIRST PARAMETER IS JOINED WITH  THE  BEGIN‐
              NING  PART  OF  THE ORIGINAL WORD, AND THE EXPANSION OF THE LAST
              PARAMETER IS JOINED WITH THE LAST PART  OF  THE  ORIGINAL  WORD.
              WHEN  THERE  ARE NO POSITIONAL PARAMETERS, "$@" AND $@ EXPAND TO
              NOTHING (I.E., THEY ARE REMOVED).
       #      EXPANDS TO THE NUMBER OF POSITIONAL PARAMETERS IN DECIMAL.
       ?      EXPANDS TO THE EXIT STATUS OF THE MOST RECENTLY  EXECUTED  FORE‐
              GROUND PIPELINE.
       -      EXPANDS  TO  THE  CURRENT OPTION FLAGS AS SPECIFIED UPON INVOCA‐
              TION, BY THE SET BUILTIN COMMAND, OR  THOSE  SET  BY  THE  SHELL
              ITSELF (SUCH AS THE -I OPTION).
       $      EXPANDS  TO  THE  PROCESS ID OF THE SHELL.  IN A () SUBSHELL, IT
              EXPANDS TO THE PROCESS ID OF THE CURRENT  SHELL,  NOT  THE  SUB‐
              SHELL.
       !      EXPANDS  TO  THE PROCESS ID OF THE JOB MOST RECENTLY PLACED INTO
              THE BACKGROUND, WHETHER EXECUTED AS AN ASYNCHRONOUS  COMMAND  OR
              USING THE BG BUILTIN (SEE JOB CONTROL BELOW).
       0      EXPANDS  TO  THE NAME OF THE SHELL OR SHELL SCRIPT.  THIS IS SET
              AT SHELL INITIALIZATION.  IF BASH IS INVOKED WITH A FILE OF COM‐
              MANDS,  $0  IS SET TO THE NAME OF THAT FILE.  IF BASH IS STARTED
              WITH THE -C OPTION, THEN $0 IS SET TO THE FIRST  ARGUMENT  AFTER
              THE  STRING TO BE EXECUTED, IF ONE IS PRESENT.  OTHERWISE, IT IS
              SET TO THE FILENAME USED TO INVOKE BASH, AS  GIVEN  BY  ARGUMENT
              ZERO.
       _      AT  SHELL  STARTUP,  SET TO THE ABSOLUTE PATHNAME USED TO INVOKE
              THE SHELL OR SHELL SCRIPT BEING EXECUTED AS PASSED IN THE  ENVI‐
              RONMENT  OR  ARGUMENT  LIST.   SUBSEQUENTLY, EXPANDS TO THE LAST
              ARGUMENT TO THE PREVIOUS COMMAND, AFTER EXPANSION.  ALSO SET  TO
              THE  FULL  PATHNAME  USED  TO  INVOKE  EACH COMMAND EXECUTED AND
              PLACED IN THE ENVIRONMENT EXPORTED TO THAT COMMAND.  WHEN CHECK‐
              ING  MAIL,  THIS  PARAMETER HOLDS THE NAME OF THE MAIL FILE CUR‐
              RENTLY BEING CHECKED.

   SHELL VARIABLES
       THE FOLLOWING VARIABLES ARE SET BY THE SHELL:

       BASH   EXPANDS TO THE FULL FILENAME USED TO  INVOKE  THIS  INSTANCE  OF
              BASH.
       BASHOPTS
              A  COLON-SEPARATED  LIST OF ENABLED SHELL OPTIONS.  EACH WORD IN
              THE LIST IS A VALID ARGUMENT FOR THE  -S  OPTION  TO  THE  SHOPT
              BUILTIN COMMAND (SEE SHELL BUILTIN COMMANDS BELOW).  THE OPTIONS
              APPEARING IN BASHOPTS ARE THOSE REPORTED AS  ON  BY  SHOPT.   IF
              THIS  VARIABLE  IS  IN THE ENVIRONMENT WHEN BASH STARTS UP, EACH
              SHELL OPTION IN THE LIST WILL  BE  ENABLED  BEFORE  READING  ANY
              STARTUP FILES.  THIS VARIABLE IS READ-ONLY.
       BASHPID
              EXPANDS  TO  THE  PROCESS  ID OF THE CURRENT BASH PROCESS.  THIS
              DIFFERS FROM $$ UNDER CERTAIN CIRCUMSTANCES, SUCH  AS  SUBSHELLS
              THAT DO NOT REQUIRE BASH TO BE RE-INITIALIZED.
       BASH_ALIASES
              AN  ASSOCIATIVE  ARRAY  VARIABLE WHOSE MEMBERS CORRESPOND TO THE
              INTERNAL LIST OF ALIASES AS MAINTAINED  BY  THE  ALIAS  BUILTIN.
              ELEMENTS ADDED TO THIS ARRAY APPEAR IN THE ALIAS LIST; UNSETTING
              ARRAY ELEMENTS CAUSE ALIASES TO BE REMOVED FROM THE ALIAS LIST.
       BASH_ARGC
              AN ARRAY VARIABLE WHOSE VALUES ARE THE NUMBER OF  PARAMETERS  IN
              EACH FRAME OF THE CURRENT BASH EXECUTION CALL STACK.  THE NUMBER
              OF PARAMETERS TO  THE  CURRENT  SUBROUTINE  (SHELL  FUNCTION  OR
              SCRIPT  EXECUTED  WITH  . OR SOURCE) IS AT THE TOP OF THE STACK.
              WHEN A SUBROUTINE IS EXECUTED, THE NUMBER OF  PARAMETERS  PASSED
              IS PUSHED ONTO BASH_ARGC.  THE SHELL SETS BASH_ARGC ONLY WHEN IN
              EXTENDED DEBUGGING MODE (SEE THE  DESCRIPTION  OF  THE  EXTDEBUG
              OPTION TO THE SHOPT BUILTIN BELOW)
       BASH_ARGV
              AN  ARRAY  VARIABLE CONTAINING ALL OF THE PARAMETERS IN THE CUR‐
              RENT BASH EXECUTION CALL STACK.  THE FINAL PARAMETER OF THE LAST
              SUBROUTINE  CALL IS AT THE TOP OF THE STACK; THE FIRST PARAMETER
              OF THE INITIAL CALL IS AT THE BOTTOM.  WHEN A SUBROUTINE IS EXE‐
              CUTED,  THE  PARAMETERS SUPPLIED ARE PUSHED ONTO BASH_ARGV.  THE
              SHELL SETS BASH_ARGV ONLY WHEN IN EXTENDED DEBUGGING  MODE  (SEE
              THE  DESCRIPTION  OF  THE  EXTDEBUG  OPTION TO THE SHOPT BUILTIN
              BELOW)
       BASH_CMDS
              AN ASSOCIATIVE ARRAY VARIABLE WHOSE MEMBERS  CORRESPOND  TO  THE
              INTERNAL  HASH  TABLE  OF  COMMANDS  AS  MAINTAINED  BY THE HASH
              BUILTIN.  ELEMENTS ADDED TO THIS ARRAY APPEAR IN THE HASH TABLE;
              UNSETTING  ARRAY  ELEMENTS CAUSE COMMANDS TO BE REMOVED FROM THE
              HASH TABLE.
       BASH_COMMAND
              THE COMMAND CURRENTLY BEING EXECUTED OR ABOUT  TO  BE  EXECUTED,
              UNLESS THE SHELL IS EXECUTING A COMMAND AS THE RESULT OF A TRAP,
              IN WHICH CASE IT IS THE COMMAND EXECUTING AT  THE  TIME  OF  THE
              TRAP.
       BASH_EXECUTION_STRING
              THE COMMAND ARGUMENT TO THE -C INVOCATION OPTION.
       BASH_LINENO
              AN  ARRAY  VARIABLE WHOSE MEMBERS ARE THE LINE NUMBERS IN SOURCE
              FILES WHERE EACH CORRESPONDING MEMBER OF FUNCNAME  WAS  INVOKED.
              ${BASH_LINENO[$I]}  IS  THE  LINE  NUMBER  IN  THE  SOURCE  FILE
              (${BASH_SOURCE[$I+1]})  WHERE  ${FUNCNAME[$I]}  WAS  CALLED  (OR
              ${BASH_LINENO[$I-1]}  IF  REFERENCED  WITHIN ANOTHER SHELL FUNC‐
              TION).  USE LINENO TO OBTAIN THE CURRENT LINE NUMBER.
       BASH_REMATCH
              AN ARRAY VARIABLE WHOSE MEMBERS ARE ASSIGNED BY  THE  =~  BINARY
              OPERATOR  TO THE [[ CONDITIONAL COMMAND.  THE ELEMENT WITH INDEX
              0 IS THE PORTION OF  THE  STRING  MATCHING  THE  ENTIRE  REGULAR
              EXPRESSION.   THE  ELEMENT  WITH  INDEX  N IS THE PORTION OF THE
              STRING MATCHING THE NTH PARENTHESIZED SUBEXPRESSION.  THIS VARI‐
              ABLE IS READ-ONLY.
       BASH_SOURCE
              AN  ARRAY  VARIABLE WHOSE MEMBERS ARE THE SOURCE FILENAMES WHERE
              THE CORRESPONDING SHELL FUNCTION NAMES  IN  THE  FUNCNAME  ARRAY
              VARIABLE  ARE  DEFINED.   THE  SHELL FUNCTION ${FUNCNAME[$I]} IS
              DEFINED  IN  THE  FILE  ${BASH_SOURCE[$I]}   AND   CALLED   FROM
              ${BASH_SOURCE[$I+1]}.
       BASH_SUBSHELL
              INCREMENTED  BY ONE WITHIN EACH SUBSHELL OR SUBSHELL ENVIRONMENT
              WHEN THE SHELL BEGINS EXECUTING IN THAT ENVIRONMENT.   THE  INI‐
              TIAL VALUE IS 0.
       BASH_VERSINFO
              A READONLY ARRAY VARIABLE WHOSE MEMBERS HOLD VERSION INFORMATION
              FOR THIS INSTANCE OF BASH.  THE VALUES  ASSIGNED  TO  THE  ARRAY
              MEMBERS ARE AS FOLLOWS:
              BASH_VERSINFO[0]        THE MAJOR VERSION NUMBER (THE RELEASE).
              BASH_VERSINFO[1]        THE MINOR VERSION NUMBER (THE VERSION).
              BASH_VERSINFO[2]        THE PATCH LEVEL.
              BASH_VERSINFO[3]        THE BUILD VERSION.
              BASH_VERSINFO[4]        THE RELEASE STATUS (E.G., BETA1).
              BASH_VERSINFO[5]        THE VALUE OF MACHTYPE.
       BASH_VERSION
              EXPANDS  TO  A STRING DESCRIBING THE VERSION OF THIS INSTANCE OF
              BASH.
       COMP_CWORD
              AN INDEX INTO ${COMP_WORDS} OF THE WORD CONTAINING  THE  CURRENT
              CURSOR POSITION.  THIS VARIABLE IS AVAILABLE ONLY IN SHELL FUNC‐
              TIONS INVOKED BY THE  PROGRAMMABLE  COMPLETION  FACILITIES  (SEE
              PROGRAMMABLE COMPLETION BELOW).
       COMP_KEY
              THE KEY (OR FINAL KEY OF A KEY SEQUENCE) USED TO INVOKE THE CUR‐
              RENT COMPLETION FUNCTION.
       COMP_LINE
              THE CURRENT COMMAND LINE.  THIS VARIABLE IS  AVAILABLE  ONLY  IN
              SHELL  FUNCTIONS  AND  EXTERNAL COMMANDS INVOKED BY THE PROGRAM‐
              MABLE COMPLETION FACILITIES (SEE PROGRAMMABLE COMPLETION BELOW).
       COMP_POINT
              THE INDEX OF THE CURRENT CURSOR POSITION RELATIVE TO THE  BEGIN‐
              NING  OF THE CURRENT COMMAND.  IF THE CURRENT CURSOR POSITION IS
              AT THE END OF THE CURRENT COMMAND, THE VALUE OF THIS VARIABLE IS
              EQUAL  TO  ${#COMP_LINE}.   THIS  VARIABLE  IS AVAILABLE ONLY IN
              SHELL FUNCTIONS AND EXTERNAL COMMANDS INVOKED  BY  THE  PROGRAM‐
              MABLE COMPLETION FACILITIES (SEE PROGRAMMABLE COMPLETION BELOW).
       COMP_TYPE
              SET  TO AN INTEGER VALUE CORRESPONDING TO THE TYPE OF COMPLETION
              ATTEMPTED THAT CAUSED A COMPLETION FUNCTION TO BE  CALLED:  TAB,
              FOR  NORMAL COMPLETION, ?, FOR LISTING COMPLETIONS AFTER SUCCES‐
              SIVE TABS, !, FOR LISTING ALTERNATIVES ON PARTIAL  WORD  COMPLE‐
              TION,  @,  TO LIST COMPLETIONS IF THE WORD IS NOT UNMODIFIED, OR
              %, FOR MENU COMPLETION.  THIS  VARIABLE  IS  AVAILABLE  ONLY  IN
              SHELL  FUNCTIONS  AND  EXTERNAL COMMANDS INVOKED BY THE PROGRAM‐
              MABLE COMPLETION FACILITIES (SEE PROGRAMMABLE COMPLETION BELOW).
       COMP_WORDBREAKS
              THE SET OF CHARACTERS THAT THE READLINE LIBRARY TREATS  AS  WORD
              SEPARATORS  WHEN PERFORMING WORD COMPLETION.  IF COMP_WORDBREAKS
              IS UNSET, IT LOSES ITS SPECIAL PROPERTIES, EVEN IF IT IS  SUBSE‐
              QUENTLY RESET.
       COMP_WORDS
              AN  ARRAY VARIABLE (SEE ARRAYS BELOW) CONSISTING OF THE INDIVID‐
              UAL WORDS IN THE CURRENT COMMAND LINE.  THE LINE IS  SPLIT  INTO
              WORDS  AS  READLINE  WOULD  SPLIT  IT,  USING COMP_WORDBREAKS AS
              DESCRIBED ABOVE.  THIS VARIABLE IS AVAILABLE ONLY IN SHELL FUNC‐
              TIONS  INVOKED  BY  THE  PROGRAMMABLE COMPLETION FACILITIES (SEE
              PROGRAMMABLE COMPLETION BELOW).
       COPROC AN ARRAY VARIABLE (SEE ARRAYS BELOW) CREATED TO  HOLD  THE  FILE
              DESCRIPTORS  FOR  OUTPUT  FROM AND INPUT TO AN UNNAMED COPROCESS
              (SEE COPROCESSES ABOVE).
       DIRSTACK
              AN ARRAY VARIABLE (SEE ARRAYS BELOW) CONTAINING THE CURRENT CON‐
              TENTS  OF  THE DIRECTORY STACK.  DIRECTORIES APPEAR IN THE STACK
              IN THE ORDER THEY ARE DISPLAYED BY THE DIRS BUILTIN.   ASSIGNING
              TO MEMBERS OF THIS ARRAY VARIABLE MAY BE USED TO MODIFY DIRECTO‐
              RIES ALREADY IN THE STACK, BUT THE PUSHD AND POPD BUILTINS  MUST
              BE USED TO ADD AND REMOVE DIRECTORIES.  ASSIGNMENT TO THIS VARI‐
              ABLE WILL NOT CHANGE THE  CURRENT  DIRECTORY.   IF  DIRSTACK  IS
              UNSET,  IT  LOSES  ITS  SPECIAL PROPERTIES, EVEN IF IT IS SUBSE‐
              QUENTLY RESET.
       EUID   EXPANDS TO THE EFFECTIVE USER ID OF THE CURRENT  USER,  INITIAL‐
              IZED AT SHELL STARTUP.  THIS VARIABLE IS READONLY.
       FUNCNAME
              AN  ARRAY  VARIABLE  CONTAINING THE NAMES OF ALL SHELL FUNCTIONS
              CURRENTLY IN THE EXECUTION CALL STACK.  THE ELEMENT WITH INDEX 0
              IS THE NAME OF ANY CURRENTLY-EXECUTING SHELL FUNCTION.  THE BOT‐
              TOM-MOST ELEMENT (THE ONE WITH THE  HIGHEST  INDEX)  IS  "MAIN".
              THIS  VARIABLE  EXISTS  ONLY WHEN A SHELL FUNCTION IS EXECUTING.
              ASSIGNMENTS TO FUNCNAME HAVE NO EFFECT AND RETURN AN ERROR  STA‐
              TUS.   IF  FUNCNAME  IS  UNSET, IT LOSES ITS SPECIAL PROPERTIES,
              EVEN IF IT IS SUBSEQUENTLY RESET.

              THIS VARIABLE CAN BE  USED  WITH  BASH_LINENO  AND  BASH_SOURCE.
              EACH   ELEMENT   OF   FUNCNAME  HAS  CORRESPONDING  ELEMENTS  IN
              BASH_LINENO AND BASH_SOURCE TO DESCRIBE  THE  CALL  STACK.   FOR
              INSTANCE,    ${FUNCNAME[$I]}    WAS   CALLED   FROM   THE   FILE
              ${BASH_SOURCE[$I+1]} AT  LINE  NUMBER  ${BASH_LINENO[$I]}.   THE
              CALLER BUILTIN DISPLAYS THE CURRENT CALL STACK USING THIS INFOR‐
              MATION.
       GROUPS AN ARRAY VARIABLE CONTAINING THE LIST OF  GROUPS  OF  WHICH  THE
              CURRENT  USER IS A MEMBER.  ASSIGNMENTS TO GROUPS HAVE NO EFFECT
              AND RETURN AN ERROR STATUS.  IF GROUPS IS UNSET,  IT  LOSES  ITS
              SPECIAL PROPERTIES, EVEN IF IT IS SUBSEQUENTLY RESET.
       HISTCMD
              THE HISTORY NUMBER, OR INDEX IN THE HISTORY LIST, OF THE CURRENT
              COMMAND.  IF HISTCMD IS UNSET, IT LOSES ITS SPECIAL  PROPERTIES,
              EVEN IF IT IS SUBSEQUENTLY RESET.
       HOSTNAME
              AUTOMATICALLY SET TO THE NAME OF THE CURRENT HOST.
       HOSTTYPE
              AUTOMATICALLY  SET  TO A STRING THAT UNIQUELY DESCRIBES THE TYPE
              OF MACHINE ON WHICH BASH IS EXECUTING.  THE DEFAULT  IS  SYSTEM-
              DEPENDENT.
       LINENO EACH  TIME THIS PARAMETER IS REFERENCED, THE SHELL SUBSTITUTES A
              DECIMAL NUMBER REPRESENTING THE CURRENT SEQUENTIAL  LINE  NUMBER
              (STARTING  WITH  1)  WITHIN A SCRIPT OR FUNCTION.  WHEN NOT IN A
              SCRIPT OR FUNCTION, THE VALUE SUBSTITUTED IS NOT  GUARANTEED  TO
              BE MEANINGFUL.  IF LINENO IS UNSET, IT LOSES ITS SPECIAL PROPER‐
              TIES, EVEN IF IT IS SUBSEQUENTLY RESET.
       MACHTYPE
              AUTOMATICALLY SET TO A STRING THAT FULLY  DESCRIBES  THE  SYSTEM
              TYPE  ON  WHICH  BASH IS EXECUTING, IN THE STANDARD GNU CPU-COM‐
              PANY-SYSTEM FORMAT.  THE DEFAULT IS SYSTEM-DEPENDENT.
       MAPFILE
              AN ARRAY VARIABLE (SEE ARRAYS BELOW) CREATED TO  HOLD  THE  TEXT
              READ BY THE MAPFILE BUILTIN WHEN NO VARIABLE NAME IS SUPPLIED.
       OLDPWD THE PREVIOUS WORKING DIRECTORY AS SET BY THE CD COMMAND.
       OPTARG THE  VALUE  OF THE LAST OPTION ARGUMENT PROCESSED BY THE GETOPTS
              BUILTIN COMMAND (SEE SHELL BUILTIN COMMANDS BELOW).
       OPTIND THE INDEX OF THE NEXT ARGUMENT TO BE PROCESSED  BY  THE  GETOPTS
              BUILTIN COMMAND (SEE SHELL BUILTIN COMMANDS BELOW).
       OSTYPE AUTOMATICALLY  SET TO A STRING THAT DESCRIBES THE OPERATING SYS‐
              TEM ON WHICH BASH IS EXECUTING.  THE  DEFAULT  IS  SYSTEM-DEPEN‐
              DENT.
       PIPESTATUS
              AN  ARRAY  VARIABLE (SEE ARRAYS BELOW) CONTAINING A LIST OF EXIT
              STATUS VALUES FROM THE PROCESSES IN  THE  MOST-RECENTLY-EXECUTED
              FOREGROUND PIPELINE (WHICH MAY CONTAIN ONLY A SINGLE COMMAND).
       PPID   THE  PROCESS  ID  OF THE SHELL'S PARENT.  THIS VARIABLE IS READ‐
              ONLY.
       PWD    THE CURRENT WORKING DIRECTORY AS SET BY THE CD COMMAND.
       RANDOM EACH TIME THIS PARAMETER IS REFERENCED, A RANDOM INTEGER BETWEEN
              0 AND 32767 IS GENERATED.  THE SEQUENCE OF RANDOM NUMBERS MAY BE
              INITIALIZED BY ASSIGNING A VALUE TO RANDOM.  IF RANDOM IS UNSET,
              IT  LOSES  ITS  SPECIAL  PROPERTIES,  EVEN IF IT IS SUBSEQUENTLY
              RESET.
       READLINE_LINE
              THE CONTENTS OF THE READLINE LINE BUFFER, FOR USE WITH "BIND -X"
              (SEE SHELL BUILTIN COMMANDS BELOW).
       READLINE_POINT
              THE POSITION OF THE INSERTION POINT IN THE READLINE LINE BUFFER,
              FOR USE WITH "BIND -X" (SEE SHELL BUILTIN COMMANDS BELOW).
       REPLY  SET TO THE LINE OF INPUT READ BY THE READ BUILTIN  COMMAND  WHEN
              NO ARGUMENTS ARE SUPPLIED.
       SECONDS
              EACH  TIME  THIS  PARAMETER IS REFERENCED, THE NUMBER OF SECONDS
              SINCE SHELL INVOCATION IS RETURNED.  IF A VALUE IS  ASSIGNED  TO
              SECONDS,  THE  VALUE  RETURNED UPON SUBSEQUENT REFERENCES IS THE
              NUMBER OF SECONDS SINCE THE ASSIGNMENT PLUS THE VALUE  ASSIGNED.
              IF SECONDS IS UNSET, IT LOSES ITS SPECIAL PROPERTIES, EVEN IF IT
              IS SUBSEQUENTLY RESET.
       SHELLOPTS
              A COLON-SEPARATED LIST OF ENABLED SHELL OPTIONS.  EACH  WORD  IN
              THE  LIST  IS  A  VALID  ARGUMENT  FOR  THE -O OPTION TO THE SET
              BUILTIN COMMAND (SEE SHELL BUILTIN COMMANDS BELOW).  THE OPTIONS
              APPEARING  IN  SHELLOPTS ARE THOSE REPORTED AS ON BY SET -O.  IF
              THIS VARIABLE IS IN THE ENVIRONMENT WHEN BASH  STARTS  UP,  EACH
              SHELL  OPTION  IN  THE  LIST  WILL BE ENABLED BEFORE READING ANY
              STARTUP FILES.  THIS VARIABLE IS READ-ONLY.
       SHLVL  INCREMENTED BY ONE EACH TIME AN INSTANCE OF BASH IS STARTED.
       UID    EXPANDS TO THE USER ID OF THE CURRENT USER, INITIALIZED AT SHELL
              STARTUP.  THIS VARIABLE IS READONLY.

       THE  FOLLOWING  VARIABLES  ARE  USED BY THE SHELL.  IN SOME CASES, BASH
       ASSIGNS A DEFAULT VALUE TO A VARIABLE; THESE CASES ARE NOTED BELOW.

       BASH_COMPAT
              THE VALUE IS USED TO SET THE SHELL'S COMPATIBILITY  LEVEL.   SEE
              THE  DESCRIPTION  OF THE SHOPT BUILTIN BELOW UNDER SHELL BUILTIN
              COMMANDS FOR A DESCRIPTION OF THE VARIOUS  COMPATIBILITY  LEVELS
              AND  THEIR  EFFECTS.   THE  VALUE MAY BE A DECIMAL NUMBER (E.G.,
              4.2) OR AN INTEGER (E.G., 42) CORRESPONDING TO THE DESIRED  COM‐
              PATIBILITY  LEVEL.   IF BASH_COMPAT IS UNSET OR SET TO THE EMPTY
              STRING, THE COMPATIBILITY LEVEL IS SET TO THE  DEFAULT  FOR  THE
              CURRENT  VERSION.   IF BASH_COMPAT IS SET TO A VALUE THAT IS NOT
              ONE OF THE VALID COMPATIBILITY LEVELS, THE SHELL PRINTS AN ERROR
              MESSAGE  AND SETS THE COMPATIBILITY LEVEL TO THE DEFAULT FOR THE
              CURRENT VERSION.  THE VALID COMPATIBILITY LEVELS  CORRESPOND  TO
              THE   COMPATIBILITY   OPTIONS  ACCEPTED  BY  THE  SHOPT  BUILTIN
              DESCRIBED BELOW (FOR EXAMPLE, COMPAT42 MEANS THAT 4.2 AND 42 ARE
              VALID VALUES).  THE CURRENT VERSION IS ALSO A VALID VALUE.
       BASH_ENV
              IF  THIS PARAMETER IS SET WHEN BASH IS EXECUTING A SHELL SCRIPT,
              ITS VALUE IS INTERPRETED AS A FILENAME  CONTAINING  COMMANDS  TO
              INITIALIZE THE SHELL, AS IN ~/.BASHRC.  THE VALUE OF BASH_ENV IS
              SUBJECTED TO  PARAMETER  EXPANSION,  COMMAND  SUBSTITUTION,  AND
              ARITHMETIC  EXPANSION  BEFORE  BEING  INTERPRETED AS A FILENAME.
              PATH IS NOT USED TO SEARCH FOR THE RESULTANT FILENAME.
       BASH_XTRACEFD
              IF SET TO AN INTEGER CORRESPONDING TO A VALID  FILE  DESCRIPTOR,
              BASH  WILL  WRITE  THE  TRACE  OUTPUT  GENERATED  WHEN SET -X IS
              ENABLED TO THAT FILE DESCRIPTOR.  THE FILE DESCRIPTOR IS  CLOSED
              WHEN  BASH_XTRACEFD IS UNSET OR ASSIGNED A NEW VALUE.  UNSETTING
              BASH_XTRACEFD OR ASSIGNING IT THE EMPTY STRING CAUSES THE  TRACE
              OUTPUT  TO  BE  SENT  TO  THE STANDARD ERROR.  NOTE THAT SETTING
              BASH_XTRACEFD TO 2 (THE STANDARD ERROR FILE DESCRIPTOR) AND THEN
              UNSETTING IT WILL RESULT IN THE STANDARD ERROR BEING CLOSED.
       CDPATH THE  SEARCH  PATH FOR THE CD COMMAND.  THIS IS A COLON-SEPARATED
              LIST OF DIRECTORIES IN WHICH THE  SHELL  LOOKS  FOR  DESTINATION
              DIRECTORIES  SPECIFIED  BY  THE  CD  COMMAND.  A SAMPLE VALUE IS
              ".:~:/USR".
       CHILD_MAX
              SET THE NUMBER OF EXITED CHILD STATUS VALUES FOR  THE  SHELL  TO
              REMEMBER.   BASH WILL NOT ALLOW THIS VALUE TO BE DECREASED BELOW
              A POSIX-MANDATED MINIMUM, AND THERE IS  A  MAXIMUM  VALUE  (CUR‐
              RENTLY  8192)  THAT  THIS  MAY NOT EXCEED.  THE MINIMUM VALUE IS
              SYSTEM-DEPENDENT.
       COLUMNS
              USED BY THE SELECT COMPOUND COMMAND TO  DETERMINE  THE  TERMINAL
              WIDTH  WHEN  PRINTING SELECTION LISTS.  AUTOMATICALLY SET IF THE
              CHECKWINSIZE OPTION IS ENABLED OR IN AN INTERACTIVE  SHELL  UPON
              RECEIPT OF A SIGWINCH.
       COMPREPLY
              AN ARRAY VARIABLE FROM WHICH BASH READS THE POSSIBLE COMPLETIONS
              GENERATED BY A SHELL FUNCTION INVOKED BY THE  PROGRAMMABLE  COM‐
              PLETION  FACILITY  (SEE  PROGRAMMABLE  COMPLETION  BELOW).  EACH
              ARRAY ELEMENT CONTAINS ONE POSSIBLE COMPLETION.
       EMACS  IF BASH FINDS THIS VARIABLE IN THE ENVIRONMENT  WHEN  THE  SHELL
              STARTS  WITH  VALUE "T", IT ASSUMES THAT THE SHELL IS RUNNING IN
              AN EMACS SHELL BUFFER AND DISABLES LINE EDITING.
       ENV    SIMILAR TO BASH_ENV; USED WHEN THE SHELL  IS  INVOKED  IN  POSIX
              MODE.
       FCEDIT THE DEFAULT EDITOR FOR THE FC BUILTIN COMMAND.
       FIGNORE
              A  COLON-SEPARATED  LIST  OF  SUFFIXES TO IGNORE WHEN PERFORMING
              FILENAME COMPLETION (SEE READLINE BELOW).  A FILENAME WHOSE SUF‐
              FIX  MATCHES  ONE OF THE ENTRIES IN FIGNORE IS EXCLUDED FROM THE
              LIST OF MATCHED FILENAMES.  A SAMPLE VALUE IS ".O:~" (QUOTING IS
              NEEDED  WHEN  ASSIGNING A VALUE TO THIS VARIABLE, WHICH CONTAINS
              TILDES).
       FUNCNEST
              IF SET TO A NUMERIC VALUE GREATER  THAN  0,  DEFINES  A  MAXIMUM
              FUNCTION  NESTING  LEVEL.  FUNCTION INVOCATIONS THAT EXCEED THIS
              NESTING LEVEL WILL CAUSE THE CURRENT COMMAND TO ABORT.
       GLOBIGNORE
              A COLON-SEPARATED LIST OF PATTERNS DEFINING THE SET OF FILENAMES
              TO BE IGNORED BY PATHNAME EXPANSION.  IF A FILENAME MATCHED BY A
              PATHNAME EXPANSION PATTERN ALSO MATCHES ONE OF THE  PATTERNS  IN
              GLOBIGNORE, IT IS REMOVED FROM THE LIST OF MATCHES.
       HISTCONTROL
              A  COLON-SEPARATED  LIST  OF VALUES CONTROLLING HOW COMMANDS ARE
              SAVED ON THE HISTORY LIST.   IF  THE  LIST  OF  VALUES  INCLUDES
              IGNORESPACE,  LINES  WHICH  BEGIN WITH A SPACE CHARACTER ARE NOT
              SAVED IN THE HISTORY LIST.  A VALUE OF IGNOREDUPS  CAUSES  LINES
              MATCHING THE PREVIOUS HISTORY ENTRY TO NOT BE SAVED.  A VALUE OF
              IGNOREBOTH IS SHORTHAND FOR IGNORESPACE AND IGNOREDUPS.  A VALUE
              OF ERASEDUPS CAUSES ALL PREVIOUS LINES MATCHING THE CURRENT LINE
              TO BE REMOVED FROM THE HISTORY LIST BEFORE THAT LINE  IS  SAVED.
              ANY  VALUE  NOT IN THE ABOVE LIST IS IGNORED.  IF HISTCONTROL IS
              UNSET, OR DOES NOT INCLUDE A VALID VALUE, ALL LINES READ BY  THE
              SHELL PARSER ARE SAVED ON THE HISTORY LIST, SUBJECT TO THE VALUE
              OF HISTIGNORE.  THE SECOND AND SUBSEQUENT LINES OF A  MULTI-LINE
              COMPOUND  COMMAND  ARE  NOT TESTED, AND ARE ADDED TO THE HISTORY
              REGARDLESS OF THE VALUE OF HISTCONTROL.
       HISTFILE
              THE NAME OF THE FILE IN WHICH COMMAND HISTORY IS SAVED (SEE HIS‐
              TORY  BELOW).   THE DEFAULT VALUE IS ~/.BASH_HISTORY.  IF UNSET,
              THE COMMAND HISTORY IS NOT SAVED WHEN A SHELL EXITS.
       HISTFILESIZE
              THE MAXIMUM NUMBER OF LINES CONTAINED IN THE HISTORY FILE.  WHEN
              THIS  VARIABLE  IS  ASSIGNED  A VALUE, THE HISTORY FILE IS TRUN‐
              CATED, IF NECESSARY, TO CONTAIN NO  MORE  THAN  THAT  NUMBER  OF
              LINES  BY REMOVING THE OLDEST ENTRIES.  THE HISTORY FILE IS ALSO
              TRUNCATED TO THIS SIZE AFTER WRITING IT WHEN A SHELL EXITS.   IF
              THE  VALUE  IS  0,  THE  HISTORY FILE IS TRUNCATED TO ZERO SIZE.
              NON-NUMERIC VALUES AND NUMERIC VALUES  LESS  THAN  ZERO  INHIBIT
              TRUNCATION.   THE  SHELL  SETS THE DEFAULT VALUE TO THE VALUE OF
              HISTSIZE AFTER READING ANY STARTUP FILES.
       HISTIGNORE
              A COLON-SEPARATED LIST OF PATTERNS USED TO DECIDE WHICH  COMMAND
              LINES  SHOULD  BE  SAVED  ON  THE HISTORY LIST.  EACH PATTERN IS
              ANCHORED AT THE BEGINNING OF THE LINE AND MUST  MATCH  THE  COM‐
              PLETE  LINE  (NO  IMPLICIT  `*'  IS  APPENDED).  EACH PATTERN IS
              TESTED AGAINST THE LINE AFTER THE CHECKS SPECIFIED  BY  HISTCON‐
              TROL  ARE  APPLIED.   IN  ADDITION  TO  THE NORMAL SHELL PATTERN
              MATCHING CHARACTERS, `&' MATCHES THE PREVIOUS HISTORY LINE.  `&'
              MAY  BE  ESCAPED  USING  A  BACKSLASH;  THE BACKSLASH IS REMOVED
              BEFORE ATTEMPTING A MATCH.  THE SECOND AND SUBSEQUENT LINES OF A
              MULTI-LINE COMPOUND COMMAND ARE NOT TESTED, AND ARE ADDED TO THE
              HISTORY REGARDLESS OF THE VALUE OF HISTIGNORE.
       HISTSIZE
              THE NUMBER OF COMMANDS TO REMEMBER IN THE COMMAND  HISTORY  (SEE
              HISTORY  BELOW).   IF  THE VALUE IS 0, COMMANDS ARE NOT SAVED IN
              THE HISTORY LIST.  NUMERIC VALUES LESS THAN ZERO RESULT IN EVERY
              COMMAND  BEING  SAVED  ON  THE HISTORY LIST (THERE IS NO LIMIT).
              THE SHELL SETS THE  DEFAULT  VALUE  TO  500  AFTER  READING  ANY
              STARTUP FILES.
       HISTTIMEFORMAT
              IF  THIS  VARIABLE  IS  SET AND NOT NULL, ITS VALUE IS USED AS A
              FORMAT STRING FOR STRFTIME(3) TO PRINT THE TIME STAMP ASSOCIATED
              WITH  EACH  HISTORY  ENTRY DISPLAYED BY THE HISTORY BUILTIN.  IF
              THIS VARIABLE IS SET, TIME STAMPS ARE  WRITTEN  TO  THE  HISTORY
              FILE  SO THEY MAY BE PRESERVED ACROSS SHELL SESSIONS.  THIS USES
              THE HISTORY COMMENT CHARACTER  TO  DISTINGUISH  TIMESTAMPS  FROM
              OTHER HISTORY LINES.
       HOME   THE HOME DIRECTORY OF THE CURRENT USER; THE DEFAULT ARGUMENT FOR
              THE CD BUILTIN COMMAND.  THE VALUE OF THIS VARIABLE IS ALSO USED
              WHEN PERFORMING TILDE EXPANSION.
       HOSTFILE
              CONTAINS  THE  NAME  OF  A FILE IN THE SAME FORMAT AS /ETC/HOSTS
              THAT SHOULD BE READ WHEN THE SHELL NEEDS TO COMPLETE A HOSTNAME.
              THE  LIST  OF POSSIBLE HOSTNAME COMPLETIONS MAY BE CHANGED WHILE
              THE SHELL IS RUNNING;  THE  NEXT  TIME  HOSTNAME  COMPLETION  IS
              ATTEMPTED  AFTER THE VALUE IS CHANGED, BASH ADDS THE CONTENTS OF
              THE NEW FILE TO THE EXISTING LIST.  IF HOSTFILE IS SET, BUT  HAS
              NO  VALUE,  OR  DOES  NOT NAME A READABLE FILE, BASH ATTEMPTS TO
              READ /ETC/HOSTS TO OBTAIN THE LIST OF POSSIBLE HOSTNAME  COMPLE‐
              TIONS.  WHEN HOSTFILE IS UNSET, THE HOSTNAME LIST IS CLEARED.
       IFS    THE  INTERNAL  FIELD  SEPARATOR  THAT IS USED FOR WORD SPLITTING
              AFTER EXPANSION AND TO SPLIT LINES  INTO  WORDS  WITH  THE  READ
              BUILTIN  COMMAND.   THE  DEFAULT  VALUE  IS  ``<SPACE><TAB><NEW‐
              LINE>''.
       IGNOREEOF
              CONTROLS THE ACTION OF AN INTERACTIVE SHELL ON RECEIPT OF AN EOF
              CHARACTER AS THE SOLE INPUT.  IF SET, THE VALUE IS THE NUMBER OF
              CONSECUTIVE EOF CHARACTERS WHICH MUST  BE  TYPED  AS  THE  FIRST
              CHARACTERS  ON AN INPUT LINE BEFORE BASH EXITS.  IF THE VARIABLE
              EXISTS BUT DOES NOT HAVE A NUMERIC VALUE, OR HAS NO  VALUE,  THE
              DEFAULT  VALUE  IS  10.  IF IT DOES NOT EXIST, EOF SIGNIFIES THE
              END OF INPUT TO THE SHELL.
       INPUTRC
              THE FILENAME FOR  THE  READLINE  STARTUP  FILE,  OVERRIDING  THE
              DEFAULT OF ~/.INPUTRC (SEE READLINE BELOW).
       LANG   USED  TO  DETERMINE  THE  LOCALE  CATEGORY  FOR ANY CATEGORY NOT
              SPECIFICALLY SELECTED WITH A VARIABLE STARTING WITH LC_.
       LC_ALL THIS VARIABLE OVERRIDES THE VALUE OF  LANG  AND  ANY  OTHER  LC_
              VARIABLE SPECIFYING A LOCALE CATEGORY.
       LC_COLLATE
              THIS  VARIABLE  DETERMINES THE COLLATION ORDER USED WHEN SORTING
              THE RESULTS OF PATHNAME EXPANSION, AND DETERMINES  THE  BEHAVIOR
              OF   RANGE   EXPRESSIONS,  EQUIVALENCE  CLASSES,  AND  COLLATING
              SEQUENCES WITHIN PATHNAME EXPANSION AND PATTERN MATCHING.
       LC_CTYPE
              THIS VARIABLE DETERMINES THE INTERPRETATION  OF  CHARACTERS  AND
              THE  BEHAVIOR OF CHARACTER CLASSES WITHIN PATHNAME EXPANSION AND
              PATTERN MATCHING.
       LC_MESSAGES
              THIS VARIABLE DETERMINES THE LOCALE USED  TO  TRANSLATE  DOUBLE-
              QUOTED STRINGS PRECEDED BY A $.
       LC_NUMERIC
              THIS  VARIABLE  DETERMINES  THE  LOCALE CATEGORY USED FOR NUMBER
              FORMATTING.
       LINES  USED BY THE SELECT COMPOUND  COMMAND  TO  DETERMINE  THE  COLUMN
              LENGTH  FOR  PRINTING SELECTION LISTS.  AUTOMATICALLY SET IF THE
              CHECKWINSIZE OPTION IS ENABLED OR IN AN INTERACTIVE  SHELL  UPON
              RECEIPT OF A SIGWINCH.
       MAIL   IF  THIS  PARAMETER  IS  SET TO A FILE OR DIRECTORY NAME AND THE
              MAILPATH VARIABLE IS NOT SET,  BASH  INFORMS  THE  USER  OF  THE
              ARRIVAL  OF  MAIL IN THE SPECIFIED FILE OR MAILDIR-FORMAT DIREC‐
              TORY.
       MAILCHECK
              SPECIFIES HOW OFTEN (IN SECONDS)  BASH  CHECKS  FOR  MAIL.   THE
              DEFAULT  IS  60 SECONDS.  WHEN IT IS TIME TO CHECK FOR MAIL, THE
              SHELL DOES SO BEFORE DISPLAYING THE  PRIMARY  PROMPT.   IF  THIS
              VARIABLE  IS  UNSET,  OR  SET  TO  A  VALUE THAT IS NOT A NUMBER
              GREATER THAN OR EQUAL TO ZERO, THE SHELL DISABLES MAIL CHECKING.
       MAILPATH
              A COLON-SEPARATED LIST OF FILENAMES TO BE CHECKED FOR MAIL.  THE
              MESSAGE TO BE PRINTED WHEN MAIL ARRIVES IN A PARTICULAR FILE MAY
              BE SPECIFIED BY SEPARATING THE FILENAME FROM THE MESSAGE WITH  A
              `?'.   WHEN  USED  IN THE TEXT OF THE MESSAGE, $_ EXPANDS TO THE
              NAME OF THE CURRENT MAILFILE.  EXAMPLE:
              MAILPATH='/VAR/MAIL/BFOX?"YOU  HAVE  MAIL":~/SHELL-MAIL?"$_  HAS
              MAIL!"'
              BASH  SUPPLIES  A DEFAULT VALUE FOR THIS VARIABLE, BUT THE LOCA‐
              TION OF THE USER MAIL FILES THAT IT  USES  IS  SYSTEM  DEPENDENT
              (E.G., /VAR/MAIL/$USER).
       OPTERR IF SET TO THE VALUE 1, BASH DISPLAYS ERROR MESSAGES GENERATED BY
              THE GETOPTS BUILTIN COMMAND (SEE SHELL BUILTIN COMMANDS  BELOW).
              OPTERR  IS  INITIALIZED TO 1 EACH TIME THE SHELL IS INVOKED OR A
              SHELL SCRIPT IS EXECUTED.
       PATH   THE SEARCH PATH FOR COMMANDS.  IT IS A COLON-SEPARATED  LIST  OF
              DIRECTORIES  IN  WHICH THE SHELL LOOKS FOR COMMANDS (SEE COMMAND
              EXECUTION BELOW).  A ZERO-LENGTH (NULL) DIRECTORY  NAME  IN  THE
              VALUE OF PATH INDICATES THE CURRENT DIRECTORY.  A NULL DIRECTORY
              NAME MAY APPEAR AS TWO ADJACENT COLONS,  OR  AS  AN  INITIAL  OR
              TRAILING  COLON.   THE  DEFAULT PATH IS SYSTEM-DEPENDENT, AND IS
              SET BY THE ADMINISTRATOR WHO INSTALLS BASH.  A COMMON  VALUE  IS
              ``/USR/LOCAL/BIN:/USR/LOCAL/SBIN:/USR/BIN:/USR/SBIN:/BIN:/SBIN''.
       POSIXLY_CORRECT
              IF THIS VARIABLE IS IN THE ENVIRONMENT  WHEN  BASH  STARTS,  THE
              SHELL  ENTERS POSIX MODE BEFORE READING THE STARTUP FILES, AS IF
              THE --POSIX INVOCATION OPTION HAD BEEN SUPPLIED.  IF IT  IS  SET
              WHILE  THE  SHELL IS RUNNING, BASH ENABLES POSIX MODE, AS IF THE
              COMMAND SET -O POSIX HAD BEEN EXECUTED.
       PROMPT_COMMAND
              IF SET, THE VALUE IS EXECUTED AS A COMMAND PRIOR TO ISSUING EACH
              PRIMARY PROMPT.
       PROMPT_DIRTRIM
              IF  SET  TO A NUMBER GREATER THAN ZERO, THE VALUE IS USED AS THE
              NUMBER OF TRAILING DIRECTORY COMPONENTS TO RETAIN WHEN EXPANDING
              THE  \W  AND  \W  PROMPT  STRING  ESCAPES (SEE PROMPTING BELOW).
              CHARACTERS REMOVED ARE REPLACED WITH AN ELLIPSIS.
       PS1    THE VALUE OF THIS PARAMETER IS EXPANDED  (SEE  PROMPTING  BELOW)
              AND  USED  AS  THE  PRIMARY PROMPT STRING.  THE DEFAULT VALUE IS
              ``\S-\V\$ ''.
       PS2    THE VALUE OF THIS PARAMETER IS EXPANDED AS WITH PS1 AND USED  AS
              THE SECONDARY PROMPT STRING.  THE DEFAULT IS ``> ''.
       PS3    THE VALUE OF THIS PARAMETER IS USED AS THE PROMPT FOR THE SELECT
              COMMAND (SEE SHELL GRAMMAR ABOVE).
       PS4    THE VALUE OF THIS PARAMETER IS EXPANDED  AS  WITH  PS1  AND  THE
              VALUE  IS  PRINTED  BEFORE  EACH COMMAND BASH DISPLAYS DURING AN
              EXECUTION TRACE.  THE FIRST CHARACTER OF PS4 IS REPLICATED  MUL‐
              TIPLE  TIMES, AS NECESSARY, TO INDICATE MULTIPLE LEVELS OF INDI‐
              RECTION.  THE DEFAULT IS ``+ ''.
       SHELL  THE FULL PATHNAME TO THE SHELL IS KEPT IN THIS ENVIRONMENT VARI‐
              ABLE.   IF  IT IS NOT SET WHEN THE SHELL STARTS, BASH ASSIGNS TO
              IT THE FULL PATHNAME OF THE CURRENT USER'S LOGIN SHELL.
       TIMEFORMAT
              THE VALUE OF THIS PARAMETER IS USED AS A FORMAT STRING  SPECIFY‐
              ING  HOW  THE TIMING INFORMATION FOR PIPELINES PREFIXED WITH THE
              TIME RESERVED WORD SHOULD BE DISPLAYED.  THE % CHARACTER  INTRO‐
              DUCES  AN  ESCAPE  SEQUENCE  THAT IS EXPANDED TO A TIME VALUE OR
              OTHER INFORMATION.  THE ESCAPE SEQUENCES AND THEIR MEANINGS  ARE
              AS FOLLOWS; THE BRACES DENOTE OPTIONAL PORTIONS.
              %%        A LITERAL %.
              %[P][L]R  THE ELAPSED TIME IN SECONDS.
              %[P][L]U  THE NUMBER OF CPU SECONDS SPENT IN USER MODE.
              %[P][L]S  THE NUMBER OF CPU SECONDS SPENT IN SYSTEM MODE.
              %P        THE CPU PERCENTAGE, COMPUTED AS (%U + %S) / %R.

              THE  OPTIONAL  P IS A DIGIT SPECIFYING THE PRECISION, THE NUMBER
              OF FRACTIONAL DIGITS AFTER A DECIMAL POINT.  A VALUE OF 0 CAUSES
              NO DECIMAL POINT OR FRACTION TO BE OUTPUT.  AT MOST THREE PLACES
              AFTER THE DECIMAL POINT MAY BE SPECIFIED; VALUES  OF  P  GREATER
              THAN  3 ARE CHANGED TO 3.  IF P IS NOT SPECIFIED, THE VALUE 3 IS
              USED.

              THE OPTIONAL L SPECIFIES A LONGER FORMAT, INCLUDING MINUTES,  OF
              THE  FORM  MMMSS.FFS.   THE VALUE OF P DETERMINES WHETHER OR NOT
              THE FRACTION IS INCLUDED.

              IF THIS VARIABLE IS NOT SET, BASH ACTS AS IF IT  HAD  THE  VALUE
              $'\NREAL\T%3LR\NUSER\T%3LU\NSYS\T%3LS'.   IF  THE VALUE IS NULL,
              NO TIMING INFORMATION IS DISPLAYED.  A TRAILING NEWLINE IS ADDED
              WHEN THE FORMAT STRING IS DISPLAYED.
       TMOUT  IF  SET  TO  A  VALUE GREATER THAN ZERO, TMOUT IS TREATED AS THE
              DEFAULT TIMEOUT FOR THE READ BUILTIN.  THE SELECT COMMAND TERMI‐
              NATES IF INPUT DOES NOT ARRIVE AFTER TMOUT SECONDS WHEN INPUT IS
              COMING FROM A TERMINAL.  IN AN INTERACTIVE SHELL, THE  VALUE  IS
              INTERPRETED AS THE NUMBER OF SECONDS TO WAIT FOR A LINE OF INPUT
              AFTER ISSUING THE PRIMARY PROMPT.  BASH TERMINATES AFTER WAITING
              FOR  THAT NUMBER OF SECONDS IF A COMPLETE LINE OF INPUT DOES NOT
              ARRIVE.
       TMPDIR IF SET, BASH USES ITS VALUE AS THE NAME OF A DIRECTORY IN  WHICH
              BASH CREATES TEMPORARY FILES FOR THE SHELL'S USE.
       AUTO_RESUME
              THIS VARIABLE CONTROLS HOW THE SHELL INTERACTS WITH THE USER AND
              JOB CONTROL.  IF THIS VARIABLE IS SET, SINGLE WORD  SIMPLE  COM‐
              MANDS WITHOUT REDIRECTIONS ARE TREATED AS CANDIDATES FOR RESUMP‐
              TION OF AN EXISTING STOPPED JOB.  THERE IS NO AMBIGUITY ALLOWED;
              IF  THERE  IS MORE THAN ONE JOB BEGINNING WITH THE STRING TYPED,
              THE JOB MOST RECENTLY ACCESSED  IS  SELECTED.   THE  NAME  OF  A
              STOPPED  JOB, IN THIS CONTEXT, IS THE COMMAND LINE USED TO START
              IT.  IF SET TO THE VALUE EXACT, THE STRING SUPPLIED  MUST  MATCH
              THE  NAME  OF  A  STOPPED  JOB EXACTLY; IF SET TO SUBSTRING, THE
              STRING SUPPLIED NEEDS TO MATCH A SUBSTRING  OF  THE  NAME  OF  A
              STOPPED  JOB.  THE SUBSTRING VALUE PROVIDES FUNCTIONALITY ANALO‐
              GOUS TO THE %?  JOB IDENTIFIER (SEE JOB CONTROL BELOW).  IF  SET
              TO  ANY  OTHER  VALUE, THE SUPPLIED STRING MUST BE A PREFIX OF A
              STOPPED JOB'S NAME; THIS PROVIDES FUNCTIONALITY ANALOGOUS TO THE
              %STRING JOB IDENTIFIER.
       HISTCHARS
              THE  TWO OR THREE CHARACTERS WHICH CONTROL HISTORY EXPANSION AND
              TOKENIZATION (SEE HISTORY EXPANSION BELOW).  THE FIRST CHARACTER
              IS  THE HISTORY EXPANSION CHARACTER, THE CHARACTER WHICH SIGNALS
              THE START OF A HISTORY  EXPANSION,  NORMALLY  `!'.   THE  SECOND
              CHARACTER  IS THE QUICK SUBSTITUTION CHARACTER, WHICH IS USED AS
              SHORTHAND FOR RE-RUNNING THE PREVIOUS COMMAND  ENTERED,  SUBSTI‐
              TUTING  ONE  STRING  FOR ANOTHER IN THE COMMAND.  THE DEFAULT IS
              `^'.  THE OPTIONAL THIRD CHARACTER IS THE CHARACTER WHICH  INDI‐
              CATES  THAT THE REMAINDER OF THE LINE IS A COMMENT WHEN FOUND AS
              THE FIRST CHARACTER OF A WORD, NORMALLY `#'.  THE  HISTORY  COM‐
              MENT CHARACTER CAUSES HISTORY SUBSTITUTION TO BE SKIPPED FOR THE
              REMAINING WORDS ON THE LINE.  IT DOES NOT NECESSARILY CAUSE  THE
              SHELL PARSER TO TREAT THE REST OF THE LINE AS A COMMENT.

   ARRAYS
       BASH  PROVIDES ONE-DIMENSIONAL INDEXED AND ASSOCIATIVE ARRAY VARIABLES.
       ANY VARIABLE MAY BE USED AS AN INDEXED ARRAY; THE DECLARE BUILTIN  WILL
       EXPLICITLY  DECLARE AN ARRAY.  THERE IS NO MAXIMUM LIMIT ON THE SIZE OF
       AN ARRAY, NOR ANY REQUIREMENT THAT MEMBERS BE INDEXED OR ASSIGNED  CON‐
       TIGUOUSLY.   INDEXED  ARRAYS  ARE  REFERENCED USING INTEGERS (INCLUDING
       ARITHMETIC EXPRESSIONS)  AND ARE  ZERO-BASED;  ASSOCIATIVE  ARRAYS  ARE
       REFERENCED  USING  ARBITRARY  STRINGS.  UNLESS OTHERWISE NOTED, INDEXED
       ARRAY INDICES MUST BE NON-NEGATIVE INTEGERS.

       AN INDEXED ARRAY IS CREATED AUTOMATICALLY IF ANY VARIABLE  IS  ASSIGNED
       TO USING THE SYNTAX NAME[SUBSCRIPT]=VALUE.  THE SUBSCRIPT IS TREATED AS
       AN ARITHMETIC EXPRESSION THAT MUST EVALUATE TO A NUMBER.  TO EXPLICITLY
       DECLARE  AN  INDEXED ARRAY, USE DECLARE -A NAME (SEE SHELL BUILTIN COM‐
       MANDS BELOW).  DECLARE -A NAME[SUBSCRIPT] IS ALSO  ACCEPTED;  THE  SUB‐
       SCRIPT IS IGNORED.

       ASSOCIATIVE ARRAYS ARE CREATED USING DECLARE -A NAME.

       ATTRIBUTES MAY BE SPECIFIED FOR AN ARRAY VARIABLE USING THE DECLARE AND
       READONLY BUILTINS.  EACH ATTRIBUTE APPLIES TO ALL MEMBERS OF AN ARRAY.

       ARRAYS  ARE  ASSIGNED  TO  USING  COMPOUND  ASSIGNMENTS  OF  THE   FORM
       NAME=(VALUE1  ...  VALUEN),  WHERE  EACH  VALUE  IS  OF  THE FORM [SUB‐
       SCRIPT]=STRING.  INDEXED ARRAY ASSIGNMENTS DO NOT REQUIRE ANYTHING  BUT
       STRING.  WHEN ASSIGNING TO INDEXED ARRAYS, IF THE OPTIONAL BRACKETS AND
       SUBSCRIPT ARE SUPPLIED, THAT INDEX IS ASSIGNED TO; OTHERWISE THE  INDEX
       OF  THE ELEMENT ASSIGNED IS THE LAST INDEX ASSIGNED TO BY THE STATEMENT
       PLUS ONE.  INDEXING STARTS AT ZERO.

       WHEN ASSIGNING TO AN ASSOCIATIVE ARRAY, THE SUBSCRIPT IS REQUIRED.

       THIS SYNTAX IS ALSO ACCEPTED BY THE DECLARE BUILTIN.  INDIVIDUAL  ARRAY
       ELEMENTS  MAY  BE  ASSIGNED  TO  USING THE NAME[SUBSCRIPT]=VALUE SYNTAX
       INTRODUCED ABOVE.  WHEN ASSIGNING TO AN INDEXED ARRAY, IF NAME IS  SUB‐
       SCRIPTED  BY  A NEGATIVE NUMBER, THAT NUMBER IS INTERPRETED AS RELATIVE
       TO ONE GREATER THAN THE MAXIMUM INDEX  OF  NAME,  SO  NEGATIVE  INDICES
       COUNT BACK FROM THE END OF THE ARRAY, AND AN INDEX OF -1 REFERENCES THE
       LAST ELEMENT.

       ANY ELEMENT OF AN ARRAY MAY  BE  REFERENCED  USING  ${NAME[SUBSCRIPT]}.
       THE BRACES ARE REQUIRED TO AVOID CONFLICTS WITH PATHNAME EXPANSION.  IF
       SUBSCRIPT IS @ OR *, THE WORD EXPANDS TO ALL MEMBERS  OF  NAME.   THESE
       SUBSCRIPTS  DIFFER ONLY WHEN THE WORD APPEARS WITHIN DOUBLE QUOTES.  IF
       THE WORD IS DOUBLE-QUOTED, ${NAME[*]} EXPANDS TO A SINGLE WORD WITH THE
       VALUE  OF EACH ARRAY MEMBER SEPARATED BY THE FIRST CHARACTER OF THE IFS
       SPECIAL VARIABLE, AND ${NAME[@]} EXPANDS EACH ELEMENT OF NAME TO A SEP‐
       ARATE  WORD.   WHEN  THERE  ARE NO ARRAY MEMBERS, ${NAME[@]} EXPANDS TO
       NOTHING.  IF THE DOUBLE-QUOTED EXPANSION  OCCURS  WITHIN  A  WORD,  THE
       EXPANSION  OF  THE FIRST PARAMETER IS JOINED WITH THE BEGINNING PART OF
       THE ORIGINAL WORD, AND THE EXPANSION OF THE LAST  PARAMETER  IS  JOINED
       WITH  THE  LAST  PART  OF  THE ORIGINAL WORD.  THIS IS ANALOGOUS TO THE
       EXPANSION OF THE SPECIAL PARAMETERS * AND  @  (SEE  SPECIAL  PARAMETERS
       ABOVE).   ${#NAME[SUBSCRIPT]}  EXPANDS  TO  THE  LENGTH  OF ${NAME[SUB‐
       SCRIPT]}.  IF SUBSCRIPT IS * OR @, THE EXPANSION IS THE NUMBER OF  ELE‐
       MENTS  IN THE ARRAY.  REFERENCING AN ARRAY VARIABLE WITHOUT A SUBSCRIPT
       IS EQUIVALENT TO REFERENCING THE ARRAY WITH A SUBSCRIPT OF 0.   IF  THE
       SUBSCRIPT USED TO REFERENCE AN ELEMENT OF AN INDEXED ARRAY EVALUATES TO
       A NUMBER LESS THAN ZERO, IT IS INTERPRETED AS RELATIVE TO  ONE  GREATER
       THAN  THE  MAXIMUM  INDEX  OF THE ARRAY, SO NEGATIVE INDICES COUNT BACK
       FROM THE END OF THE ARRAY, AND AN INDEX OF -1 REFERENCES THE LAST  ELE‐
       MENT.

       AN  ARRAY VARIABLE IS CONSIDERED SET IF A SUBSCRIPT HAS BEEN ASSIGNED A
       VALUE.  THE NULL STRING IS A VALID VALUE.

       IT IS POSSIBLE TO OBTAIN THE KEYS (INDICES) OF AN ARRAY AS WELL AS  THE
       VALUES.   ${!NAME[@]} AND ${!NAME[*]} EXPAND TO THE INDICES ASSIGNED IN
       ARRAY VARIABLE NAME.  THE TREATMENT WHEN IN DOUBLE QUOTES IS SIMILAR TO
       THE EXPANSION OF THE SPECIAL PARAMETERS @ AND * WITHIN DOUBLE QUOTES.

       THE  UNSET  BUILTIN  IS  USED TO DESTROY ARRAYS.  UNSET NAME[SUBSCRIPT]
       DESTROYS THE ARRAY ELEMENT AT INDEX SUBSCRIPT.  NEGATIVE SUBSCRIPTS  TO
       INDEXED  ARRAYS ARE INTERPRETED AS DESCRIBED ABOVE.  CARE MUST BE TAKEN
       TO AVOID UNWANTED SIDE EFFECTS CAUSED  BY  PATHNAME  EXPANSION.   UNSET
       NAME, WHERE NAME IS AN ARRAY, OR UNSET NAME[SUBSCRIPT], WHERE SUBSCRIPT
       IS * OR @, REMOVES THE ENTIRE ARRAY.

       THE DECLARE, LOCAL, AND READONLY BUILTINS EACH ACCEPT A  -A  OPTION  TO
       SPECIFY  AN  INDEXED  ARRAY  AND  A -A OPTION TO SPECIFY AN ASSOCIATIVE
       ARRAY.  IF BOTH OPTIONS ARE SUPPLIED, -A TAKES  PRECEDENCE.   THE  READ
       BUILTIN  ACCEPTS  A  -A  OPTION TO ASSIGN A LIST OF WORDS READ FROM THE
       STANDARD INPUT TO AN ARRAY.  THE SET AND DECLARE BUILTINS DISPLAY ARRAY
       VALUES IN A WAY THAT ALLOWS THEM TO BE REUSED AS ASSIGNMENTS.

EXPANSION
       EXPANSION IS PERFORMED ON THE COMMAND LINE AFTER IT HAS BEEN SPLIT INTO
       WORDS.  THERE ARE SEVEN KINDS OF EXPANSION PERFORMED: BRACE  EXPANSION,
       TILDE  EXPANSION,  PARAMETER  AND VARIABLE EXPANSION, COMMAND SUBSTITU‐
       TION, ARITHMETIC EXPANSION, WORD SPLITTING, AND PATHNAME EXPANSION.

       THE ORDER OF EXPANSIONS IS: BRACE EXPANSION; TILDE EXPANSION, PARAMETER
       AND  VARIABLE EXPANSION, ARITHMETIC EXPANSION, AND COMMAND SUBSTITUTION
       (DONE IN A LEFT-TO-RIGHT FASHION); WORD SPLITTING; AND PATHNAME  EXPAN‐
       SION.

       ON SYSTEMS THAT CAN SUPPORT IT, THERE IS AN ADDITIONAL EXPANSION AVAIL‐
       ABLE: PROCESS SUBSTITUTION.  THIS IS PERFORMED  AT  THE  SAME  TIME  AS
       TILDE,  PARAMETER,  VARIABLE, AND ARITHMETIC EXPANSION AND COMMAND SUB‐
       STITUTION.

       ONLY BRACE EXPANSION, WORD SPLITTING, AND PATHNAME EXPANSION CAN CHANGE
       THE  NUMBER OF WORDS OF THE EXPANSION; OTHER EXPANSIONS EXPAND A SINGLE
       WORD TO A SINGLE WORD.  THE ONLY EXCEPTIONS TO THIS ARE THE  EXPANSIONS
       OF "$@" AND "${NAME[@]}" AS EXPLAINED ABOVE (SEE PARAMETERS).

   BRACE EXPANSION
       BRACE EXPANSION IS A MECHANISM BY WHICH ARBITRARY STRINGS MAY BE GENER‐
       ATED.  THIS MECHANISM IS SIMILAR TO PATHNAME EXPANSION, BUT  THE  FILE‐
       NAMES GENERATED NEED NOT EXIST.  PATTERNS TO BE BRACE EXPANDED TAKE THE
       FORM OF AN OPTIONAL PREAMBLE, FOLLOWED BY EITHER A SERIES OF COMMA-SEP‐
       ARATED  STRINGS OR A SEQUENCE EXPRESSION BETWEEN A PAIR OF BRACES, FOL‐
       LOWED BY AN OPTIONAL POSTSCRIPT.  THE  PREAMBLE  IS  PREFIXED  TO  EACH
       STRING CONTAINED WITHIN THE BRACES, AND THE POSTSCRIPT IS THEN APPENDED
       TO EACH RESULTING STRING, EXPANDING LEFT TO RIGHT.

       BRACE EXPANSIONS MAY BE NESTED.  THE RESULTS OF  EACH  EXPANDED  STRING
       ARE  NOT  SORTED;  LEFT  TO  RIGHT  ORDER  IS  PRESERVED.  FOR EXAMPLE,
       A{D,C,B}E EXPANDS INTO `ADE ACE ABE'.

       A SEQUENCE EXPRESSION TAKES THE FORM {X..Y[..INCR]}, WHERE X AND Y  ARE
       EITHER  INTEGERS OR SINGLE CHARACTERS, AND INCR, AN OPTIONAL INCREMENT,
       IS AN INTEGER.  WHEN INTEGERS ARE SUPPLIED, THE EXPRESSION  EXPANDS  TO
       EACH  NUMBER BETWEEN X AND Y, INCLUSIVE.  SUPPLIED INTEGERS MAY BE PRE‐
       FIXED WITH 0 TO FORCE EACH TERM TO HAVE THE SAME WIDTH.  WHEN EITHER  X
       OR  Y  BEGINS  WITH  A  ZERO, THE SHELL ATTEMPTS TO FORCE ALL GENERATED
       TERMS TO CONTAIN THE SAME NUMBER OF DIGITS, ZERO-PADDING  WHERE  NECES‐
       SARY.   WHEN  CHARACTERS  ARE  SUPPLIED, THE EXPRESSION EXPANDS TO EACH
       CHARACTER LEXICOGRAPHICALLY BETWEEN  X  AND  Y,  INCLUSIVE,  USING  THE
       DEFAULT  C  LOCALE.   NOTE  THAT BOTH X AND Y MUST BE OF THE SAME TYPE.
       WHEN THE INCREMENT IS SUPPLIED, IT IS USED AS  THE  DIFFERENCE  BETWEEN
       EACH TERM.  THE DEFAULT INCREMENT IS 1 OR -1 AS APPROPRIATE.

       BRACE EXPANSION IS PERFORMED BEFORE ANY OTHER EXPANSIONS, AND ANY CHAR‐
       ACTERS SPECIAL TO OTHER EXPANSIONS ARE PRESERVED IN THE RESULT.  IT  IS
       STRICTLY  TEXTUAL.  BASH DOES NOT APPLY ANY SYNTACTIC INTERPRETATION TO
       THE CONTEXT OF THE EXPANSION OR THE TEXT BETWEEN THE BRACES.

       A CORRECTLY-FORMED BRACE EXPANSION MUST CONTAIN  UNQUOTED  OPENING  AND
       CLOSING  BRACES,  AND  AT  LEAST ONE UNQUOTED COMMA OR A VALID SEQUENCE
       EXPRESSION.  ANY INCORRECTLY FORMED BRACE EXPANSION IS LEFT  UNCHANGED.
       A { OR , MAY BE QUOTED WITH A BACKSLASH TO PREVENT ITS BEING CONSIDERED
       PART OF A BRACE EXPRESSION.  TO AVOID CONFLICTS WITH  PARAMETER  EXPAN‐
       SION, THE STRING ${ IS NOT CONSIDERED ELIGIBLE FOR BRACE EXPANSION.

       THIS CONSTRUCT IS TYPICALLY USED AS SHORTHAND WHEN THE COMMON PREFIX OF
       THE STRINGS TO BE GENERATED IS LONGER THAN IN THE ABOVE EXAMPLE:

              MKDIR /USR/LOCAL/SRC/BASH/{OLD,NEW,DIST,BUGS}
       OR
              CHOWN ROOT /USR/{UCB/{EX,EDIT},LIB/{EX?.?*,HOW_EX}}

       BRACE EXPANSION INTRODUCES A  SLIGHT  INCOMPATIBILITY  WITH  HISTORICAL
       VERSIONS  OF SH.  SH DOES NOT TREAT OPENING OR CLOSING BRACES SPECIALLY
       WHEN THEY APPEAR AS PART OF A WORD, AND PRESERVES THEM IN  THE  OUTPUT.
       BASH  REMOVES  BRACES  FROM  WORDS AS A CONSEQUENCE OF BRACE EXPANSION.
       FOR EXAMPLE, A WORD ENTERED TO SH AS FILE{1,2} APPEARS  IDENTICALLY  IN
       THE  OUTPUT.  THE SAME WORD IS OUTPUT AS FILE1 FILE2 AFTER EXPANSION BY
       BASH.  IF STRICT COMPATIBILITY WITH SH IS DESIRED, START BASH WITH  THE
       +B OPTION OR DISABLE BRACE EXPANSION WITH THE +B OPTION TO THE SET COM‐
       MAND (SEE SHELL BUILTIN COMMANDS BELOW).

   TILDE EXPANSION
       IF A WORD BEGINS WITH AN UNQUOTED TILDE CHARACTER  (`~'),  ALL  OF  THE
       CHARACTERS  PRECEDING  THE  FIRST UNQUOTED SLASH (OR ALL CHARACTERS, IF
       THERE IS NO UNQUOTED SLASH) ARE CONSIDERED A TILDE-PREFIX.  IF NONE  OF
       THE  CHARACTERS  IN  THE TILDE-PREFIX ARE QUOTED, THE CHARACTERS IN THE
       TILDE-PREFIX FOLLOWING THE TILDE ARE TREATED AS A POSSIBLE LOGIN  NAME.
       IF  THIS  LOGIN NAME IS THE NULL STRING, THE TILDE IS REPLACED WITH THE
       VALUE OF THE SHELL PARAMETER HOME.  IF HOME IS UNSET, THE  HOME  DIREC‐
       TORY  OF  THE  USER EXECUTING THE SHELL IS SUBSTITUTED INSTEAD.  OTHER‐
       WISE, THE TILDE-PREFIX IS REPLACED WITH THE HOME  DIRECTORY  ASSOCIATED
       WITH THE SPECIFIED LOGIN NAME.

       IF  THE  TILDE-PREFIX  IS  A  `~+', THE VALUE OF THE SHELL VARIABLE PWD
       REPLACES THE TILDE-PREFIX.  IF THE TILDE-PREFIX IS A `~-', THE VALUE OF
       THE  SHELL VARIABLE OLDPWD, IF IT IS SET, IS SUBSTITUTED.  IF THE CHAR‐
       ACTERS FOLLOWING THE TILDE IN THE TILDE-PREFIX CONSIST OF A  NUMBER  N,
       OPTIONALLY  PREFIXED  BY  A  `+' OR A `-', THE TILDE-PREFIX IS REPLACED
       WITH THE CORRESPONDING ELEMENT FROM THE DIRECTORY STACK, AS IT WOULD BE
       DISPLAYED BY THE DIRS BUILTIN INVOKED WITH THE TILDE-PREFIX AS AN ARGU‐
       MENT.  IF THE CHARACTERS FOLLOWING THE TILDE IN THE  TILDE-PREFIX  CON‐
       SIST OF A NUMBER WITHOUT A LEADING `+' OR `-', `+' IS ASSUMED.

       IF THE LOGIN NAME IS INVALID, OR THE TILDE EXPANSION FAILS, THE WORD IS
       UNCHANGED.

       EACH VARIABLE ASSIGNMENT IS CHECKED FOR UNQUOTED TILDE-PREFIXES IMMEDI‐
       ATELY FOLLOWING A : OR THE FIRST =.  IN THESE CASES, TILDE EXPANSION IS
       ALSO PERFORMED.  CONSEQUENTLY, ONE MAY USE  FILENAMES  WITH  TILDES  IN
       ASSIGNMENTS  TO  PATH,  MAILPATH, AND CDPATH, AND THE SHELL ASSIGNS THE
       EXPANDED VALUE.

   PARAMETER EXPANSION
       THE `$' CHARACTER INTRODUCES PARAMETER EXPANSION, COMMAND SUBSTITUTION,
       OR  ARITHMETIC  EXPANSION.  THE PARAMETER NAME OR SYMBOL TO BE EXPANDED
       MAY BE ENCLOSED IN BRACES, WHICH ARE OPTIONAL BUT SERVE TO PROTECT  THE
       VARIABLE  TO BE EXPANDED FROM CHARACTERS IMMEDIATELY FOLLOWING IT WHICH
       COULD BE INTERPRETED AS PART OF THE NAME.

       WHEN BRACES ARE USED, THE MATCHING ENDING BRACE IS THE  FIRST  `}'  NOT
       ESCAPED  BY  A  BACKSLASH  OR WITHIN A QUOTED STRING, AND NOT WITHIN AN
       EMBEDDED  ARITHMETIC  EXPANSION,  COMMAND  SUBSTITUTION,  OR  PARAMETER
       EXPANSION.

       ${PARAMETER}
              THE  VALUE OF PARAMETER IS SUBSTITUTED.  THE BRACES ARE REQUIRED
              WHEN PARAMETER IS A POSITIONAL  PARAMETER  WITH  MORE  THAN  ONE
              DIGIT, OR WHEN PARAMETER IS FOLLOWED BY A CHARACTER WHICH IS NOT
              TO BE INTERPRETED AS PART OF ITS NAME.  THE PARAMETER IS A SHELL
              PARAMETER  AS  DESCRIBED ABOVE PARAMETERS) OR AN ARRAY REFERENCE
              (ARRAYS).

       IF THE FIRST CHARACTER OF PARAMETER IS AN  EXCLAMATION  POINT  (!),  IT
       INTRODUCES A LEVEL OF VARIABLE INDIRECTION.  BASH USES THE VALUE OF THE
       VARIABLE FORMED FROM THE REST OF PARAMETER AS THE NAME OF THE VARIABLE;
       THIS  VARIABLE  IS  THEN EXPANDED AND THAT VALUE IS USED IN THE REST OF
       THE SUBSTITUTION, RATHER THAN THE VALUE OF PARAMETER ITSELF.   THIS  IS
       KNOWN AS INDIRECT EXPANSION.  THE EXCEPTIONS TO THIS ARE THE EXPANSIONS
       OF ${!PREFIX*} AND ${!NAME[@]} DESCRIBED BELOW.  THE EXCLAMATION  POINT
       MUST  IMMEDIATELY  FOLLOW THE LEFT BRACE IN ORDER TO INTRODUCE INDIREC‐
       TION.

       IN EACH OF THE CASES BELOW, WORD IS SUBJECT TO TILDE EXPANSION, PARAME‐
       TER EXPANSION, COMMAND SUBSTITUTION, AND ARITHMETIC EXPANSION.

       WHEN  NOT  PERFORMING  SUBSTRING  EXPANSION, USING THE FORMS DOCUMENTED
       BELOW (E.G., :-), BASH TESTS FOR A PARAMETER THAT  IS  UNSET  OR  NULL.
       OMITTING  THE  COLON  RESULTS  IN  A  TEST ONLY FOR A PARAMETER THAT IS
       UNSET.

       ${PARAMETER:-WORD}
              USE DEFAULT VALUES.  IF PARAMETER IS UNSET OR NULL,  THE  EXPAN‐
              SION  OF WORD IS SUBSTITUTED.  OTHERWISE, THE VALUE OF PARAMETER
              IS SUBSTITUTED.
       ${PARAMETER:=WORD}
              ASSIGN DEFAULT VALUES.  IF  PARAMETER  IS  UNSET  OR  NULL,  THE
              EXPANSION OF WORD IS ASSIGNED TO PARAMETER.  THE VALUE OF PARAM‐
              ETER IS THEN SUBSTITUTED.   POSITIONAL  PARAMETERS  AND  SPECIAL
              PARAMETERS MAY NOT BE ASSIGNED TO IN THIS WAY.
       ${PARAMETER:?WORD}
              DISPLAY  ERROR IF NULL OR UNSET.  IF PARAMETER IS NULL OR UNSET,
              THE EXPANSION OF WORD (OR A MESSAGE TO THAT EFFECT  IF  WORD  IS
              NOT  PRESENT) IS WRITTEN TO THE STANDARD ERROR AND THE SHELL, IF
              IT IS NOT INTERACTIVE, EXITS.  OTHERWISE, THE VALUE OF PARAMETER
              IS SUBSTITUTED.
       ${PARAMETER:+WORD}
              USE  ALTERNATE VALUE.  IF PARAMETER IS NULL OR UNSET, NOTHING IS
              SUBSTITUTED, OTHERWISE THE EXPANSION OF WORD IS SUBSTITUTED.
       ${PARAMETER:OFFSET}
       ${PARAMETER:OFFSET:LENGTH}
              SUBSTRING EXPANSION.  EXPANDS TO UP TO LENGTH CHARACTERS OF  THE
              VALUE  OF  PARAMETER STARTING AT THE CHARACTER SPECIFIED BY OFF‐
              SET.  IF PARAMETER IS @, AN INDEXED ARRAY SUBSCRIPTED BY @ OR *,
              OR  AN  ASSOCIATIVE  ARRAY NAME, THE RESULTS DIFFER AS DESCRIBED
              BELOW.  IF LENGTH IS OMITTED, EXPANDS TO THE  SUBSTRING  OF  THE
              VALUE OF PARAMETER STARTING AT THE CHARACTER SPECIFIED BY OFFSET
              AND EXTENDING TO THE END OF THE VALUE.  LENGTH  AND  OFFSET  ARE
              ARITHMETIC EXPRESSIONS (SEE ARITHMETIC EVALUATION BELOW).

              IF  OFFSET  EVALUATES  TO  A NUMBER LESS THAN ZERO, THE VALUE IS
              USED AS AN OFFSET IN CHARACTERS FROM THE END  OF  THE  VALUE  OF
              PARAMETER.   IF  LENGTH EVALUATES TO A NUMBER LESS THAN ZERO, IT
              IS INTERPRETED AS AN OFFSET IN CHARACTERS FROM THE  END  OF  THE
              VALUE  OF  PARAMETER RATHER THAN A NUMBER OF CHARACTERS, AND THE
              EXPANSION IS THE CHARACTERS  BETWEEN  OFFSET  AND  THAT  RESULT.
              NOTE  THAT A NEGATIVE OFFSET MUST BE SEPARATED FROM THE COLON BY
              AT LEAST ONE SPACE TO AVOID BEING CONFUSED WITH  THE  :-  EXPAN‐
              SION.

              IF  PARAMETER  IS  @, THE RESULT IS LENGTH POSITIONAL PARAMETERS
              BEGINNING AT OFFSET.  A NEGATIVE OFFSET IS TAKEN RELATIVE TO ONE
              GREATER  THAN THE GREATEST POSITIONAL PARAMETER, SO AN OFFSET OF
              -1 EVALUATES TO THE LAST POSITIONAL PARAMETER.  IT IS AN  EXPAN‐
              SION ERROR IF LENGTH EVALUATES TO A NUMBER LESS THAN ZERO.

              IF PARAMETER IS AN INDEXED ARRAY NAME SUBSCRIPTED BY @ OR *, THE
              RESULT IS  THE  LENGTH  MEMBERS  OF  THE  ARRAY  BEGINNING  WITH
              ${PARAMETER[OFFSET]}.   A  NEGATIVE  OFFSET IS TAKEN RELATIVE TO
              ONE GREATER THAN THE MAXIMUM INDEX OF THE SPECIFIED  ARRAY.   IT
              IS  AN EXPANSION ERROR IF LENGTH EVALUATES TO A NUMBER LESS THAN
              ZERO.

              SUBSTRING EXPANSION APPLIED TO  AN  ASSOCIATIVE  ARRAY  PRODUCES
              UNDEFINED RESULTS.

              SUBSTRING  INDEXING  IS ZERO-BASED UNLESS THE POSITIONAL PARAME‐
              TERS ARE USED, IN  WHICH  CASE  THE  INDEXING  STARTS  AT  1  BY
              DEFAULT.   IF  OFFSET  IS  0,  AND THE POSITIONAL PARAMETERS ARE
              USED, $0 IS PREFIXED TO THE LIST.

       ${!PREFIX*}
       ${!PREFIX@}
              NAMES MATCHING PREFIX.  EXPANDS TO THE NAMES OF VARIABLES  WHOSE
              NAMES BEGIN WITH PREFIX, SEPARATED BY THE FIRST CHARACTER OF THE
              IFS SPECIAL VARIABLE.  WHEN @ IS USED AND THE EXPANSION  APPEARS
              WITHIN  DOUBLE  QUOTES, EACH VARIABLE NAME EXPANDS TO A SEPARATE
              WORD.

       ${!NAME[@]}
       ${!NAME[*]}
              LIST OF ARRAY KEYS.  IF NAME IS AN ARRAY  VARIABLE,  EXPANDS  TO
              THE  LIST  OF ARRAY INDICES (KEYS) ASSIGNED IN NAME.  IF NAME IS
              NOT AN ARRAY, EXPANDS TO 0 IF NAME IS SET  AND  NULL  OTHERWISE.
              WHEN  @  IS USED AND THE EXPANSION APPEARS WITHIN DOUBLE QUOTES,
              EACH KEY EXPANDS TO A SEPARATE WORD.

       ${#PARAMETER}
              PARAMETER LENGTH.  THE LENGTH IN  CHARACTERS  OF  THE  VALUE  OF
              PARAMETER  IS  SUBSTITUTED.   IF  PARAMETER IS * OR @, THE VALUE
              SUBSTITUTED IS THE NUMBER OF POSITIONAL PARAMETERS.  IF  PARAME‐
              TER  IS  AN  ARRAY NAME SUBSCRIPTED BY * OR @, THE VALUE SUBSTI‐
              TUTED IS THE NUMBER OF ELEMENTS IN THE ARRAY.  IF  PARAMETER  IS
              AN  INDEXED  ARRAY  NAME  SUBSCRIPTED BY A NEGATIVE NUMBER, THAT
              NUMBER IS INTERPRETED AS RELATIVE TO ONE GREATER THAN THE  MAXI‐
              MUM  INDEX OF PARAMETER, SO NEGATIVE INDICES COUNT BACK FROM THE
              END OF THE ARRAY, AND AN INDEX OF -1 REFERENCES  THE  LAST  ELE‐
              MENT.

       ${PARAMETER#WORD}
       ${PARAMETER##WORD}
              REMOVE MATCHING PREFIX PATTERN.  THE WORD IS EXPANDED TO PRODUCE
              A PATTERN JUST AS IN PATHNAME EXPANSION.  IF THE PATTERN MATCHES
              THE  BEGINNING OF THE VALUE OF PARAMETER, THEN THE RESULT OF THE
              EXPANSION IS THE EXPANDED VALUE OF PARAMETER WITH  THE  SHORTEST
              MATCHING  PATTERN  (THE ``#'' CASE) OR THE LONGEST MATCHING PAT‐
              TERN (THE ``##'' CASE) DELETED.  IF PARAMETER IS  @  OR  *,  THE
              PATTERN  REMOVAL OPERATION IS APPLIED TO EACH POSITIONAL PARAME‐
              TER IN TURN, AND THE EXPANSION IS THE RESULTANT LIST.  IF PARAM‐
              ETER  IS  AN ARRAY VARIABLE SUBSCRIPTED WITH @ OR *, THE PATTERN
              REMOVAL OPERATION IS APPLIED TO EACH  MEMBER  OF  THE  ARRAY  IN
              TURN, AND THE EXPANSION IS THE RESULTANT LIST.

       ${PARAMETER%WORD}
       ${PARAMETER%%WORD}
              REMOVE MATCHING SUFFIX PATTERN.  THE WORD IS EXPANDED TO PRODUCE
              A PATTERN JUST AS IN PATHNAME EXPANSION.  IF THE PATTERN MATCHES
              A  TRAILING PORTION OF THE EXPANDED VALUE OF PARAMETER, THEN THE
              RESULT OF THE EXPANSION IS THE EXPANDED VALUE OF PARAMETER  WITH
              THE  SHORTEST  MATCHING  PATTERN (THE ``%'' CASE) OR THE LONGEST
              MATCHING PATTERN (THE ``%%'' CASE) DELETED.  IF PARAMETER  IS  @
              OR  *,  THE  PATTERN  REMOVAL OPERATION IS APPLIED TO EACH POSI‐
              TIONAL PARAMETER IN TURN, AND THE  EXPANSION  IS  THE  RESULTANT
              LIST.   IF  PARAMETER IS AN ARRAY VARIABLE SUBSCRIPTED WITH @ OR
              *, THE PATTERN REMOVAL OPERATION IS APPLIED TO  EACH  MEMBER  OF
              THE ARRAY IN TURN, AND THE EXPANSION IS THE RESULTANT LIST.

       ${PARAMETER/PATTERN/STRING}
              PATTERN SUBSTITUTION.  THE PATTERN IS EXPANDED TO PRODUCE A PAT‐
              TERN JUST AS IN PATHNAME EXPANSION.  PARAMETER IS  EXPANDED  AND
              THE  LONGEST MATCH OF PATTERN AGAINST ITS VALUE IS REPLACED WITH
              STRING.  IF PATTERN BEGINS WITH /, ALL MATCHES  OF  PATTERN  ARE
              REPLACED   WITH  STRING.   NORMALLY  ONLY  THE  FIRST  MATCH  IS
              REPLACED.  IF PATTERN BEGINS WITH #, IT MUST MATCH AT THE BEGIN‐
              NING OF THE EXPANDED VALUE OF PARAMETER.  IF PATTERN BEGINS WITH
              %, IT MUST MATCH AT THE END OF THE EXPANDED VALUE OF  PARAMETER.
              IF STRING IS NULL, MATCHES OF PATTERN ARE DELETED AND THE / FOL‐
              LOWING PATTERN MAY BE OMITTED.  IF PARAMETER IS @ OR *, THE SUB‐
              STITUTION  OPERATION  IS APPLIED TO EACH POSITIONAL PARAMETER IN
              TURN, AND THE EXPANSION IS THE RESULTANT LIST.  IF PARAMETER  IS
              AN  ARRAY  VARIABLE  SUBSCRIPTED  WITH  @ OR *, THE SUBSTITUTION
              OPERATION IS APPLIED TO EACH MEMBER OF THE ARRAY  IN  TURN,  AND
              THE EXPANSION IS THE RESULTANT LIST.

       ${PARAMETER^PATTERN}
       ${PARAMETER^^PATTERN}
       ${PARAMETER,PATTERN}
       ${PARAMETER,,PATTERN}
              CASE  MODIFICATION.   THIS EXPANSION MODIFIES THE CASE OF ALPHA‐
              BETIC CHARACTERS IN PARAMETER.  THE PATTERN IS EXPANDED TO  PRO‐
              DUCE A PATTERN JUST AS IN PATHNAME EXPANSION.  EACH CHARACTER IN
              THE EXPANDED VALUE OF PARAMETER IS TESTED AGAINST PATTERN,  AND,
              IF  IT  MATCHES THE PATTERN, ITS CASE IS CONVERTED.  THE PATTERN
              SHOULD NOT ATTEMPT TO MATCH MORE  THAN  ONE  CHARACTER.   THE  ^
              OPERATOR  CONVERTS  LOWERCASE LETTERS MATCHING PATTERN TO UPPER‐
              CASE; THE , OPERATOR CONVERTS MATCHING UPPERCASE LETTERS TO LOW‐
              ERCASE.  THE ^^ AND ,, EXPANSIONS CONVERT EACH MATCHED CHARACTER
              IN THE EXPANDED VALUE; THE ^ AND , EXPANSIONS MATCH AND  CONVERT
              ONLY  THE  FIRST CHARACTER IN THE EXPANDED VALUE.  IF PATTERN IS
              OMITTED, IT IS TREATED LIKE A ?, WHICH MATCHES EVERY  CHARACTER.
              IF  PARAMETER  IS  @  OR  *,  THE CASE MODIFICATION OPERATION IS
              APPLIED TO EACH POSITIONAL PARAMETER IN TURN, AND THE  EXPANSION
              IS  THE  RESULTANT LIST.  IF PARAMETER IS AN ARRAY VARIABLE SUB‐
              SCRIPTED WITH @ OR *, THE CASE MODIFICATION OPERATION IS APPLIED
              TO  EACH  MEMBER  OF THE ARRAY IN TURN, AND THE EXPANSION IS THE
              RESULTANT LIST.

   COMMAND SUBSTITUTION
       COMMAND SUBSTITUTION ALLOWS THE OUTPUT OF A COMMAND TO REPLACE THE COM‐
       MAND NAME.  THERE ARE TWO FORMS:

              $(COMMAND)
       OR
              `COMMAND`

       BASH PERFORMS THE EXPANSION BY EXECUTING COMMAND AND REPLACING THE COM‐
       MAND SUBSTITUTION WITH THE STANDARD OUTPUT OF  THE  COMMAND,  WITH  ANY
       TRAILING NEWLINES DELETED.  EMBEDDED NEWLINES ARE NOT DELETED, BUT THEY
       MAY BE REMOVED DURING WORD SPLITTING.  THE COMMAND  SUBSTITUTION  $(CAT
       FILE) CAN BE REPLACED BY THE EQUIVALENT BUT FASTER $(< FILE).

       WHEN  THE  OLD-STYLE  BACKQUOTE FORM OF SUBSTITUTION IS USED, BACKSLASH
       RETAINS ITS LITERAL MEANING EXCEPT WHEN FOLLOWED BY $, `,  OR  \.   THE
       FIRST BACKQUOTE NOT PRECEDED BY A BACKSLASH TERMINATES THE COMMAND SUB‐
       STITUTION.  WHEN USING THE $(COMMAND) FORM, ALL CHARACTERS BETWEEN  THE
       PARENTHESES MAKE UP THE COMMAND; NONE ARE TREATED SPECIALLY.

       COMMAND SUBSTITUTIONS MAY BE NESTED.  TO NEST WHEN USING THE BACKQUOTED
       FORM, ESCAPE THE INNER BACKQUOTES WITH BACKSLASHES.

       IF THE SUBSTITUTION APPEARS WITHIN DOUBLE QUOTES,  WORD  SPLITTING  AND
       PATHNAME EXPANSION ARE NOT PERFORMED ON THE RESULTS.

   ARITHMETIC EXPANSION
       ARITHMETIC  EXPANSION ALLOWS THE EVALUATION OF AN ARITHMETIC EXPRESSION
       AND THE SUBSTITUTION OF THE RESULT.  THE FORMAT FOR  ARITHMETIC  EXPAN‐
       SION IS:

              $((EXPRESSION))

       THE  OLD  FORMAT  $[EXPRESSION]  IS  DEPRECATED  AND WILL BE REMOVED IN
       UPCOMING VERSIONS OF BASH.

       THE EXPRESSION IS TREATED AS IF IT WERE WITHIN  DOUBLE  QUOTES,  BUT  A
       DOUBLE  QUOTE  INSIDE  THE  PARENTHESES  IS NOT TREATED SPECIALLY.  ALL
       TOKENS IN THE EXPRESSION UNDERGO PARAMETER AND VARIABLE EXPANSION, COM‐
       MAND  SUBSTITUTION,  AND  QUOTE  REMOVAL.  THE RESULT IS TREATED AS THE
       ARITHMETIC EXPRESSION TO BE EVALUATED.  ARITHMETIC  EXPANSIONS  MAY  BE
       NESTED.

       THE  EVALUATION  IS PERFORMED ACCORDING TO THE RULES LISTED BELOW UNDER
       ARITHMETIC EVALUATION.  IF EXPRESSION IS INVALID, BASH PRINTS A MESSAGE
       INDICATING FAILURE AND NO SUBSTITUTION OCCURS.

   PROCESS SUBSTITUTION
       PROCESS  SUBSTITUTION  IS SUPPORTED ON SYSTEMS THAT SUPPORT NAMED PIPES
       (FIFOS) OR THE /DEV/FD METHOD OF NAMING OPEN FILES.  IT TAKES THE  FORM
       OF  <(LIST) OR >(LIST).  THE PROCESS LIST IS RUN WITH ITS INPUT OR OUT‐
       PUT CONNECTED TO A FIFO OR SOME FILE IN /DEV/FD.  THE NAME OF THIS FILE
       IS  PASSED  AS  AN ARGUMENT TO THE CURRENT COMMAND AS THE RESULT OF THE
       EXPANSION.  IF THE >(LIST) FORM IS USED, WRITING TO THE FILE WILL  PRO‐
       VIDE  INPUT  FOR LIST.  IF THE <(LIST) FORM IS USED, THE FILE PASSED AS
       AN ARGUMENT SHOULD BE READ TO OBTAIN THE OUTPUT OF LIST.

       WHEN AVAILABLE, PROCESS SUBSTITUTION IS PERFORMED  SIMULTANEOUSLY  WITH
       PARAMETER  AND VARIABLE EXPANSION, COMMAND SUBSTITUTION, AND ARITHMETIC
       EXPANSION.

   WORD SPLITTING
       THE SHELL SCANS THE RESULTS OF PARAMETER EXPANSION,  COMMAND  SUBSTITU‐
       TION,  AND ARITHMETIC EXPANSION THAT DID NOT OCCUR WITHIN DOUBLE QUOTES
       FOR WORD SPLITTING.

       THE SHELL TREATS EACH CHARACTER OF IFS AS A DELIMITER, AND  SPLITS  THE
       RESULTS  OF  THE  OTHER EXPANSIONS INTO WORDS USING THESE CHARACTERS AS
       FIELD  TERMINATORS.   IF  IFS  IS  UNSET,  OR  ITS  VALUE  IS   EXACTLY
       <SPACE><TAB><NEWLINE>,  THE  DEFAULT, THEN SEQUENCES OF <SPACE>, <TAB>,
       AND <NEWLINE> AT THE BEGINNING AND END OF THE RESULTS OF  THE  PREVIOUS
       EXPANSIONS  ARE  IGNORED, AND ANY SEQUENCE OF IFS CHARACTERS NOT AT THE
       BEGINNING OR END SERVES TO DELIMIT WORDS.  IF IFS  HAS  A  VALUE  OTHER
       THAN THE DEFAULT, THEN SEQUENCES OF THE WHITESPACE CHARACTERS SPACE AND
       TAB ARE IGNORED AT THE BEGINNING AND END OF THE WORD, AS  LONG  AS  THE
       WHITESPACE  CHARACTER IS IN THE VALUE OF IFS (AN IFS WHITESPACE CHARAC‐
       TER).  ANY CHARACTER IN IFS THAT IS NOT IFS WHITESPACE, ALONG WITH  ANY
       ADJACENT  IFS  WHITESPACE  CHARACTERS, DELIMITS A FIELD.  A SEQUENCE OF
       IFS WHITESPACE CHARACTERS IS ALSO TREATED AS A DELIMITER.  IF THE VALUE
       OF IFS IS NULL, NO WORD SPLITTING OCCURS.

       EXPLICIT  NULL  ARGUMENTS  (""  OR '') ARE RETAINED.  UNQUOTED IMPLICIT
       NULL ARGUMENTS, RESULTING FROM THE EXPANSION OF PARAMETERS THAT HAVE NO
       VALUES,  ARE  REMOVED.  IF A PARAMETER WITH NO VALUE IS EXPANDED WITHIN
       DOUBLE QUOTES, A NULL ARGUMENT RESULTS AND IS RETAINED.

       NOTE THAT IF NO EXPANSION OCCURS, NO SPLITTING IS PERFORMED.

   PATHNAME EXPANSION
       AFTER WORD SPLITTING, UNLESS THE -F OPTION HAS  BEEN  SET,  BASH  SCANS
       EACH  WORD  FOR THE CHARACTERS *, ?, AND [.  IF ONE OF THESE CHARACTERS
       APPEARS, THEN THE WORD IS REGARDED AS A PATTERN, AND REPLACED  WITH  AN
       ALPHABETICALLY  SORTED LIST OF FILENAMES MATCHING THE PATTERN (SEE PAT‐
       TERN MATCHING BELOW).  IF NO MATCHING  FILENAMES  ARE  FOUND,  AND  THE
       SHELL  OPTION  NULLGLOB IS NOT ENABLED, THE WORD IS LEFT UNCHANGED.  IF
       THE NULLGLOB OPTION IS SET, AND NO  MATCHES  ARE  FOUND,  THE  WORD  IS
       REMOVED.   IF  THE  FAILGLOB  SHELL  OPTION  IS SET, AND NO MATCHES ARE
       FOUND, AN ERROR MESSAGE IS PRINTED AND THE COMMAND IS NOT EXECUTED.  IF
       THE  SHELL OPTION NOCASEGLOB IS ENABLED, THE MATCH IS PERFORMED WITHOUT
       REGARD TO THE CASE OF ALPHABETIC  CHARACTERS.   NOTE  THAT  WHEN  USING
       RANGE EXPRESSIONS LIKE [A-Z] (SEE BELOW), LETTERS OF THE OTHER CASE MAY
       BE INCLUDED, DEPENDING ON THE SETTING OF LC_COLLATE.  WHEN A PATTERN IS
       USED  FOR  PATHNAME  EXPANSION,  THE CHARACTER ``.''  AT THE START OF A
       NAME OR IMMEDIATELY FOLLOWING  A  SLASH  MUST  BE  MATCHED  EXPLICITLY,
       UNLESS  THE SHELL OPTION DOTGLOB IS SET.  WHEN MATCHING A PATHNAME, THE
       SLASH CHARACTER MUST ALWAYS BE MATCHED EXPLICITLY.  IN OTHER CASES, THE
       ``.''   CHARACTER  IS  NOT  TREATED  SPECIALLY.  SEE THE DESCRIPTION OF
       SHOPT BELOW UNDER SHELL BUILTIN  COMMANDS  FOR  A  DESCRIPTION  OF  THE
       NOCASEGLOB, NULLGLOB, FAILGLOB, AND DOTGLOB SHELL OPTIONS.

       THE  GLOBIGNORE SHELL VARIABLE MAY BE USED TO RESTRICT THE SET OF FILE‐
       NAMES MATCHING A PATTERN.  IF GLOBIGNORE IS SET, EACH MATCHING FILENAME
       THAT ALSO MATCHES ONE OF THE PATTERNS IN GLOBIGNORE IS REMOVED FROM THE
       LIST OF MATCHES.  THE FILENAMES ``.''  AND ``..''  ARE  ALWAYS  IGNORED
       WHEN  GLOBIGNORE IS SET AND NOT NULL.  HOWEVER, SETTING GLOBIGNORE TO A
       NON-NULL VALUE HAS THE EFFECT OF ENABLING THE DOTGLOB SHELL OPTION,  SO
       ALL OTHER FILENAMES BEGINNING WITH A ``.''  WILL MATCH.  TO GET THE OLD
       BEHAVIOR OF IGNORING FILENAMES BEGINNING WITH A ``.'', MAKE ``.*''  ONE
       OF  THE  PATTERNS  IN  GLOBIGNORE.  THE DOTGLOB OPTION IS DISABLED WHEN
       GLOBIGNORE IS UNSET.

       PATTERN MATCHING

       ANY CHARACTER THAT APPEARS IN A PATTERN, OTHER THAN THE SPECIAL PATTERN
       CHARACTERS  DESCRIBED BELOW, MATCHES ITSELF.  THE NUL CHARACTER MAY NOT
       OCCUR IN A PATTERN.  A BACKSLASH ESCAPES THE FOLLOWING  CHARACTER;  THE
       ESCAPING  BACKSLASH  IS  DISCARDED  WHEN MATCHING.  THE SPECIAL PATTERN
       CHARACTERS MUST BE QUOTED IF THEY ARE TO BE MATCHED LITERALLY.

       THE SPECIAL PATTERN CHARACTERS HAVE THE FOLLOWING MEANINGS:

              *      MATCHES ANY STRING, INCLUDING THE NULL STRING.  WHEN  THE
                     GLOBSTAR  SHELL  OPTION  IS  ENABLED,  AND * IS USED IN A
                     PATHNAME EXPANSION CONTEXT, TWO ADJACENT  *S  USED  AS  A
                     SINGLE  PATTERN  WILL  MATCH  ALL  FILES AND ZERO OR MORE
                     DIRECTORIES AND SUBDIRECTORIES.  IF FOLLOWED BY A /,  TWO
                     ADJACENT  *S  WILL MATCH ONLY DIRECTORIES AND SUBDIRECTO‐
                     RIES.
              ?      MATCHES ANY SINGLE CHARACTER.
              [...]  MATCHES ANY ONE OF THE ENCLOSED CHARACTERS.   A  PAIR  OF
                     CHARACTERS  SEPARATED BY A HYPHEN DENOTES A RANGE EXPRES‐
                     SION; ANY CHARACTER THAT FALLS BETWEEN THOSE TWO  CHARAC‐
                     TERS,  INCLUSIVE,  USING  THE  CURRENT LOCALE'S COLLATING
                     SEQUENCE AND CHARACTER SET, IS  MATCHED.   IF  THE  FIRST
                     CHARACTER FOLLOWING THE [ IS A !  OR A ^ THEN ANY CHARAC‐
                     TER NOT ENCLOSED IS MATCHED.  THE SORTING ORDER OF  CHAR‐
                     ACTERS  IN RANGE EXPRESSIONS IS DETERMINED BY THE CURRENT
                     LOCALE AND THE VALUES OF THE LC_COLLATE OR  LC_ALL  SHELL
                     VARIABLES, IF SET.  TO OBTAIN THE TRADITIONAL INTERPRETA‐
                     TION OF RANGE EXPRESSIONS, WHERE [A-D] IS  EQUIVALENT  TO
                     [ABCD],  SET  VALUE OF THE LC_ALL SHELL VARIABLE TO C, OR
                     ENABLE THE GLOBASCIIRANGES SHELL  OPTION.   A  -  MAY  BE
                     MATCHED BY INCLUDING IT AS THE FIRST OR LAST CHARACTER IN
                     THE SET.  A ] MAY BE MATCHED BY INCLUDING IT AS THE FIRST
                     CHARACTER IN THE SET.

                     WITHIN  [ AND ], CHARACTER CLASSES CAN BE SPECIFIED USING
                     THE SYNTAX [:CLASS:], WHERE CLASS IS ONE OF THE FOLLOWING
                     CLASSES DEFINED IN THE POSIX STANDARD:
                     ALNUM  ALPHA  ASCII  BLANK  CNTRL DIGIT GRAPH LOWER PRINT
                     PUNCT SPACE UPPER WORD XDIGIT
                     A CHARACTER CLASS MATCHES ANY CHARACTER BELONGING TO THAT
                     CLASS.  THE WORD CHARACTER CLASS MATCHES LETTERS, DIGITS,
                     AND THE CHARACTER _.

                     WITHIN [ AND ], AN EQUIVALENCE  CLASS  CAN  BE  SPECIFIED
                     USING THE SYNTAX [=C=], WHICH MATCHES ALL CHARACTERS WITH
                     THE SAME COLLATION WEIGHT  (AS  DEFINED  BY  THE  CURRENT
                     LOCALE) AS THE CHARACTER C.

                     WITHIN [ AND ], THE SYNTAX [.SYMBOL.] MATCHES THE COLLAT‐
                     ING SYMBOL SYMBOL.

       IF THE EXTGLOB SHELL OPTION IS ENABLED USING THE SHOPT BUILTIN, SEVERAL
       EXTENDED  PATTERN  MATCHING OPERATORS ARE RECOGNIZED.  IN THE FOLLOWING
       DESCRIPTION, A PATTERN-LIST IS A LIST OF ONE OR MORE PATTERNS SEPARATED
       BY A |.  COMPOSITE PATTERNS MAY BE FORMED USING ONE OR MORE OF THE FOL‐
       LOWING SUB-PATTERNS:

              ?(PATTERN-LIST)
                     MATCHES ZERO OR ONE OCCURRENCE OF THE GIVEN PATTERNS
              *(PATTERN-LIST)
                     MATCHES ZERO OR MORE OCCURRENCES OF THE GIVEN PATTERNS
              +(PATTERN-LIST)
                     MATCHES ONE OR MORE OCCURRENCES OF THE GIVEN PATTERNS
              @(PATTERN-LIST)
                     MATCHES ONE OF THE GIVEN PATTERNS
              !(PATTERN-LIST)
                     MATCHES ANYTHING EXCEPT ONE OF THE GIVEN PATTERNS

   QUOTE REMOVAL
       AFTER THE PRECEDING EXPANSIONS, ALL UNQUOTED OCCURRENCES OF THE CHARAC‐
       TERS  \,  ', AND " THAT DID NOT RESULT FROM ONE OF THE ABOVE EXPANSIONS
       ARE REMOVED.

REDIRECTION
       BEFORE A COMMAND IS EXECUTED, ITS INPUT AND OUTPUT  MAY  BE  REDIRECTED
       USING  A SPECIAL NOTATION INTERPRETED BY THE SHELL.  REDIRECTION ALLOWS
       COMMANDS' FILE HANDLES TO BE DUPLICATED, OPENED, CLOSED, MADE TO  REFER
       TO DIFFERENT FILES, AND CAN CHANGE THE FILES THE COMMAND READS FROM AND
       WRITES TO.  REDIRECTION MAY ALSO BE USED TO MODIFY FILE HANDLES IN  THE
       CURRENT  SHELL EXECUTION ENVIRONMENT.  THE FOLLOWING REDIRECTION OPERA‐
       TORS MAY PRECEDE OR APPEAR ANYWHERE WITHIN A SIMPLE COMMAND OR MAY FOL‐
       LOW  A  COMMAND.   REDIRECTIONS ARE PROCESSED IN THE ORDER THEY APPEAR,
       FROM LEFT TO RIGHT.

       EACH REDIRECTION THAT MAY BE PRECEDED BY A FILE DESCRIPTOR  NUMBER  MAY
       INSTEAD BE PRECEDED BY A WORD OF THE FORM {VARNAME}.  IN THIS CASE, FOR
       EACH REDIRECTION OPERATOR EXCEPT >&- AND <&-, THE SHELL WILL ALLOCATE A
       FILE  DESCRIPTOR  GREATER THAN OR EQUAL TO 10 AND ASSIGN IT TO VARNAME.
       IF >&- OR <&- IS PRECEDED BY {VARNAME}, THE VALUE  OF  VARNAME  DEFINES
       THE FILE DESCRIPTOR TO CLOSE.

       IN  THE  FOLLOWING DESCRIPTIONS, IF THE FILE DESCRIPTOR NUMBER IS OMIT‐
       TED, AND THE FIRST CHARACTER OF THE REDIRECTION OPERATOR IS <, THE  RE‐
       DIRECTION  REFERS  TO  THE  STANDARD INPUT (FILE DESCRIPTOR 0).  IF THE
       FIRST CHARACTER OF THE  REDIRECTION  OPERATOR  IS  >,  THE  REDIRECTION
       REFERS TO THE STANDARD OUTPUT (FILE DESCRIPTOR 1).

       THE  WORD  FOLLOWING THE REDIRECTION OPERATOR IN THE FOLLOWING DESCRIP‐
       TIONS, UNLESS OTHERWISE NOTED, IS SUBJECTED TO BRACE  EXPANSION,  TILDE
       EXPANSION,  PARAMETER  AND  VARIABLE  EXPANSION,  COMMAND SUBSTITUTION,
       ARITHMETIC EXPANSION,  QUOTE  REMOVAL,  PATHNAME  EXPANSION,  AND  WORD
       SPLITTING.  IF IT EXPANDS TO MORE THAN ONE WORD, BASH REPORTS AN ERROR.

       NOTE  THAT  THE ORDER OF REDIRECTIONS IS SIGNIFICANT.  FOR EXAMPLE, THE
       COMMAND

              LS > DIRLIST 2>&1

       DIRECTS BOTH STANDARD OUTPUT AND STANDARD ERROR TO  THE  FILE  DIRLIST,
       WHILE THE COMMAND

              LS 2>&1 > DIRLIST

       DIRECTS  ONLY THE STANDARD OUTPUT TO FILE DIRLIST, BECAUSE THE STANDARD
       ERROR WAS DUPLICATED FROM THE STANDARD OUTPUT BEFORE THE STANDARD  OUT‐
       PUT WAS REDIRECTED TO DIRLIST.

       BASH HANDLES SEVERAL FILENAMES SPECIALLY WHEN THEY ARE USED IN REDIREC‐
       TIONS, AS DESCRIBED IN THE FOLLOWING TABLE:

              /DEV/FD/FD
                     IF FD IS A VALID INTEGER, FILE DESCRIPTOR  FD  IS  DUPLI‐
                     CATED.
              /DEV/STDIN
                     FILE DESCRIPTOR 0 IS DUPLICATED.
              /DEV/STDOUT
                     FILE DESCRIPTOR 1 IS DUPLICATED.
              /DEV/STDERR
                     FILE DESCRIPTOR 2 IS DUPLICATED.
              /DEV/TCP/HOST/PORT
                     IF HOST IS A VALID HOSTNAME OR INTERNET ADDRESS, AND PORT
                     IS AN INTEGER PORT NUMBER OR SERVICE NAME, BASH  ATTEMPTS
                     TO OPEN THE CORRESPONDING TCP SOCKET.
              /DEV/UDP/HOST/PORT
                     IF HOST IS A VALID HOSTNAME OR INTERNET ADDRESS, AND PORT
                     IS AN INTEGER PORT NUMBER OR SERVICE NAME, BASH  ATTEMPTS
                     TO OPEN THE CORRESPONDING UDP SOCKET.

       A FAILURE TO OPEN OR CREATE A FILE CAUSES THE REDIRECTION TO FAIL.

       REDIRECTIONS  USING FILE DESCRIPTORS GREATER THAN 9 SHOULD BE USED WITH
       CARE, AS THEY MAY CONFLICT WITH FILE DESCRIPTORS THE SHELL USES  INTER‐
       NALLY.

       NOTE THAT THE EXEC BUILTIN COMMAND CAN MAKE REDIRECTIONS TAKE EFFECT IN
       THE CURRENT SHELL.

   REDIRECTING INPUT
       REDIRECTION OF INPUT CAUSES THE FILE WHOSE NAME RESULTS FROM THE EXPAN‐
       SION  OF  WORD  TO  BE  OPENED FOR READING ON FILE DESCRIPTOR N, OR THE
       STANDARD INPUT (FILE DESCRIPTOR 0) IF N IS NOT SPECIFIED.

       THE GENERAL FORMAT FOR REDIRECTING INPUT IS:

              [N]<WORD

   REDIRECTING OUTPUT
       REDIRECTION OF OUTPUT CAUSES THE  FILE  WHOSE  NAME  RESULTS  FROM  THE
       EXPANSION OF WORD TO BE OPENED FOR WRITING ON FILE DESCRIPTOR N, OR THE
       STANDARD OUTPUT (FILE DESCRIPTOR 1) IF N IS NOT SPECIFIED.  IF THE FILE
       DOES  NOT EXIST IT IS CREATED; IF IT DOES EXIST IT IS TRUNCATED TO ZERO
       SIZE.

       THE GENERAL FORMAT FOR REDIRECTING OUTPUT IS:

              [N]>WORD

       IF THE REDIRECTION OPERATOR IS >, AND THE NOCLOBBER OPTION TO  THE  SET
       BUILTIN  HAS  BEEN ENABLED, THE REDIRECTION WILL FAIL IF THE FILE WHOSE
       NAME RESULTS FROM THE EXPANSION OF WORD EXISTS AND IS A  REGULAR  FILE.
       IF THE REDIRECTION OPERATOR IS >|, OR THE REDIRECTION OPERATOR IS > AND
       THE NOCLOBBER OPTION TO THE SET BUILTIN COMMAND IS NOT ENABLED, THE RE‐
       DIRECTION IS ATTEMPTED EVEN IF THE FILE NAMED BY WORD EXISTS.

   APPENDING REDIRECTED OUTPUT
       REDIRECTION  OF  OUTPUT  IN  THIS  FASHION  CAUSES  THE FILE WHOSE NAME
       RESULTS FROM THE EXPANSION OF WORD TO BE OPENED FOR APPENDING  ON  FILE
       DESCRIPTOR  N,  OR  THE STANDARD OUTPUT (FILE DESCRIPTOR 1) IF N IS NOT
       SPECIFIED.  IF THE FILE DOES NOT EXIST IT IS CREATED.

       THE GENERAL FORMAT FOR APPENDING OUTPUT IS:

              [N]>>WORD

   REDIRECTING STANDARD OUTPUT AND STANDARD ERROR
       THIS CONSTRUCT ALLOWS BOTH THE STANDARD OUTPUT (FILE DESCRIPTOR 1)  AND
       THE  STANDARD  ERROR OUTPUT (FILE DESCRIPTOR 2) TO BE REDIRECTED TO THE
       FILE WHOSE NAME IS THE EXPANSION OF WORD.

       THERE ARE TWO FORMATS FOR  REDIRECTING  STANDARD  OUTPUT  AND  STANDARD
       ERROR:

              &>WORD
       AND
              >&WORD

       OF THE TWO FORMS, THE FIRST IS PREFERRED.  THIS IS SEMANTICALLY EQUIVA‐
       LENT TO

              >WORD 2>&1

       WHEN USING THE SECOND FORM, WORD MAY NOT EXPAND TO A NUMBER OR  -.   IF
       IT  DOES,  OTHER  REDIRECTION  OPERATORS  APPLY  (SEE  DUPLICATING FILE
       DESCRIPTORS BELOW) FOR COMPATIBILITY REASONS.

   APPENDING STANDARD OUTPUT AND STANDARD ERROR
       THIS CONSTRUCT ALLOWS BOTH THE STANDARD OUTPUT (FILE DESCRIPTOR 1)  AND
       THE  STANDARD  ERROR  OUTPUT  (FILE DESCRIPTOR 2) TO BE APPENDED TO THE
       FILE WHOSE NAME IS THE EXPANSION OF WORD.

       THE FORMAT FOR APPENDING STANDARD OUTPUT AND STANDARD ERROR IS:

              &>>WORD

       THIS IS SEMANTICALLY EQUIVALENT TO

              >>WORD 2>&1

       (SEE DUPLICATING FILE DESCRIPTORS BELOW).

   HERE DOCUMENTS
       THIS TYPE OF REDIRECTION INSTRUCTS THE SHELL TO  READ  INPUT  FROM  THE
       CURRENT SOURCE UNTIL A LINE CONTAINING ONLY DELIMITER (WITH NO TRAILING
       BLANKS) IS SEEN.  ALL OF THE LINES READ UP TO THAT POINT ARE THEN  USED
       AS THE STANDARD INPUT FOR A COMMAND.

       THE FORMAT OF HERE-DOCUMENTS IS:

              <<[-]WORD
                      HERE-DOCUMENT
              DELIMITER

       NO  PARAMETER  AND VARIABLE EXPANSION, COMMAND SUBSTITUTION, ARITHMETIC
       EXPANSION, OR PATHNAME EXPANSION IS PERFORMED ON WORD.  IF ANY  CHARAC‐
       TERS  IN  WORD ARE QUOTED, THE DELIMITER IS THE RESULT OF QUOTE REMOVAL
       ON WORD, AND THE LINES IN THE HERE-DOCUMENT ARE NOT EXPANDED.  IF  WORD
       IS  UNQUOTED, ALL LINES OF THE HERE-DOCUMENT ARE SUBJECTED TO PARAMETER
       EXPANSION, COMMAND SUBSTITUTION, AND ARITHMETIC EXPANSION, THE  CHARAC‐
       TER  SEQUENCE  \<NEWLINE>  IS  IGNORED, AND \ MUST BE USED TO QUOTE THE
       CHARACTERS \, $, AND `.

       IF THE REDIRECTION OPERATOR IS <<-, THEN ALL LEADING TAB CHARACTERS ARE
       STRIPPED  FROM  INPUT  LINES  AND  THE LINE CONTAINING DELIMITER.  THIS
       ALLOWS HERE-DOCUMENTS WITHIN SHELL SCRIPTS TO BE INDENTED IN A  NATURAL
       FASHION.

   HERE STRINGS
       A VARIANT OF HERE DOCUMENTS, THE FORMAT IS:

              <<<WORD

       THE  WORD  UNDERGOES  BRACE  EXPANSION,  TILDE EXPANSION, PARAMETER AND
       VARIABLE EXPANSION, COMMAND  SUBSTITUTION,  ARITHMETIC  EXPANSION,  AND
       QUOTE  REMOVAL.   PATHNAME  EXPANSION  AND  WORD SPLITTING ARE NOT PER‐
       FORMED.  THE RESULT IS SUPPLIED AS A SINGLE STRING TO  THE  COMMAND  ON
       ITS STANDARD INPUT.

   DUPLICATING FILE DESCRIPTORS
       THE REDIRECTION OPERATOR

              [N]<&WORD

       IS USED TO DUPLICATE INPUT FILE DESCRIPTORS.  IF WORD EXPANDS TO ONE OR
       MORE DIGITS, THE FILE DESCRIPTOR DENOTED BY N IS MADE TO BE A  COPY  OF
       THAT  FILE  DESCRIPTOR.   IF  THE  DIGITS IN WORD DO NOT SPECIFY A FILE
       DESCRIPTOR OPEN FOR INPUT, A REDIRECTION ERROR OCCURS.  IF WORD  EVALU‐
       ATES  TO  -,  FILE  DESCRIPTOR N IS CLOSED.  IF N IS NOT SPECIFIED, THE
       STANDARD INPUT (FILE DESCRIPTOR 0) IS USED.

       THE OPERATOR

              [N]>&WORD

       IS USED SIMILARLY TO DUPLICATE OUTPUT FILE DESCRIPTORS.  IF  N  IS  NOT
       SPECIFIED,  THE  STANDARD  OUTPUT  (FILE DESCRIPTOR 1) IS USED.  IF THE
       DIGITS IN WORD DO NOT SPECIFY A FILE DESCRIPTOR OPEN FOR OUTPUT, A  RE‐
       DIRECTION  ERROR  OCCURS.  IF WORD EVALUATES TO -, FILE DESCRIPTOR N IS
       CLOSED.  AS A SPECIAL CASE, IF N IS OMITTED, AND WORD DOES  NOT  EXPAND
       TO  ONE OR MORE DIGITS OR -, THE STANDARD OUTPUT AND STANDARD ERROR ARE
       REDIRECTED AS DESCRIBED PREVIOUSLY.

   MOVING FILE DESCRIPTORS
       THE REDIRECTION OPERATOR

              [N]<&DIGIT-

       MOVES THE FILE DESCRIPTOR DIGIT TO FILE DESCRIPTOR N, OR  THE  STANDARD
       INPUT (FILE DESCRIPTOR 0) IF N IS NOT SPECIFIED.  DIGIT IS CLOSED AFTER
       BEING DUPLICATED TO N.

       SIMILARLY, THE REDIRECTION OPERATOR

              [N]>&DIGIT-

       MOVES THE FILE DESCRIPTOR DIGIT TO FILE DESCRIPTOR N, OR  THE  STANDARD
       OUTPUT (FILE DESCRIPTOR 1) IF N IS NOT SPECIFIED.

   OPENING FILE DESCRIPTORS FOR READING AND WRITING
       THE REDIRECTION OPERATOR

              [N]<>WORD

       CAUSES  THE  FILE  WHOSE NAME IS THE EXPANSION OF WORD TO BE OPENED FOR
       BOTH READING AND WRITING ON FILE DESCRIPTOR N, OR ON FILE DESCRIPTOR  0
       IF N IS NOT SPECIFIED.  IF THE FILE DOES NOT EXIST, IT IS CREATED.

ALIASES
       ALIASES  ALLOW A STRING TO BE SUBSTITUTED FOR A WORD WHEN IT IS USED AS
       THE FIRST WORD OF A SIMPLE COMMAND.  THE  SHELL  MAINTAINS  A  LIST  OF
       ALIASES  THAT  MAY  BE SET AND UNSET WITH THE ALIAS AND UNALIAS BUILTIN
       COMMANDS (SEE SHELL BUILTIN COMMANDS BELOW).  THE FIRST  WORD  OF  EACH
       SIMPLE  COMMAND, IF UNQUOTED, IS CHECKED TO SEE IF IT HAS AN ALIAS.  IF
       SO, THAT WORD IS REPLACED BY THE TEXT OF THE ALIAS.  THE CHARACTERS  /,
       $,  `,  AND = AND ANY OF THE SHELL METACHARACTERS OR QUOTING CHARACTERS
       LISTED ABOVE MAY NOT APPEAR IN AN ALIAS NAME.  THE REPLACEMENT TEXT MAY
       CONTAIN  ANY  VALID  SHELL  INPUT, INCLUDING SHELL METACHARACTERS.  THE
       FIRST WORD OF THE REPLACEMENT TEXT IS TESTED FOR ALIASES,  BUT  A  WORD
       THAT  IS  IDENTICAL TO AN ALIAS BEING EXPANDED IS NOT EXPANDED A SECOND
       TIME.  THIS MEANS THAT ONE MAY ALIAS LS TO LS  -F,  FOR  INSTANCE,  AND
       BASH  DOES  NOT TRY TO RECURSIVELY EXPAND THE REPLACEMENT TEXT.  IF THE
       LAST CHARACTER OF THE ALIAS VALUE IS A BLANK,  THEN  THE  NEXT  COMMAND
       WORD FOLLOWING THE ALIAS IS ALSO CHECKED FOR ALIAS EXPANSION.

       ALIASES ARE CREATED AND LISTED WITH THE ALIAS COMMAND, AND REMOVED WITH
       THE UNALIAS COMMAND.

       THERE IS NO MECHANISM FOR USING ARGUMENTS IN THE REPLACEMENT TEXT.   IF
       ARGUMENTS  ARE  NEEDED,  A SHELL FUNCTION SHOULD BE USED (SEE FUNCTIONS
       BELOW).

       ALIASES ARE NOT EXPANDED WHEN THE SHELL IS NOT INTERACTIVE, UNLESS  THE
       EXPAND_ALIASES  SHELL OPTION IS SET USING SHOPT (SEE THE DESCRIPTION OF
       SHOPT UNDER SHELL BUILTIN COMMANDS BELOW).

       THE RULES CONCERNING THE DEFINITION AND USE  OF  ALIASES  ARE  SOMEWHAT
       CONFUSING.   BASH  ALWAYS  READS  AT  LEAST  ONE COMPLETE LINE OF INPUT
       BEFORE EXECUTING ANY  OF  THE  COMMANDS  ON  THAT  LINE.   ALIASES  ARE
       EXPANDED  WHEN  A COMMAND IS READ, NOT WHEN IT IS EXECUTED.  THEREFORE,
       AN ALIAS DEFINITION APPEARING ON THE SAME LINE AS ANOTHER COMMAND  DOES
       NOT  TAKE  EFFECT  UNTIL  THE NEXT LINE OF INPUT IS READ.  THE COMMANDS
       FOLLOWING THE ALIAS DEFINITION ON THAT LINE ARE NOT AFFECTED BY THE NEW
       ALIAS.   THIS  BEHAVIOR  IS  ALSO AN ISSUE WHEN FUNCTIONS ARE EXECUTED.
       ALIASES ARE EXPANDED WHEN A FUNCTION DEFINITION IS READ, NOT  WHEN  THE
       FUNCTION  IS  EXECUTED,  BECAUSE A FUNCTION DEFINITION IS ITSELF A COM‐
       POUND COMMAND.  AS A CONSEQUENCE, ALIASES DEFINED IN A FUNCTION ARE NOT
       AVAILABLE  UNTIL  AFTER  THAT FUNCTION IS EXECUTED.  TO BE SAFE, ALWAYS
       PUT ALIAS DEFINITIONS ON A SEPARATE LINE, AND DO NOT USE ALIAS IN  COM‐
       POUND COMMANDS.

       FOR ALMOST EVERY PURPOSE, ALIASES ARE SUPERSEDED BY SHELL FUNCTIONS.

FUNCTIONS
       A  SHELL  FUNCTION,  DEFINED  AS  DESCRIBED  ABOVE UNDER SHELL GRAMMAR,
       STORES A SERIES OF COMMANDS FOR LATER EXECUTION.  WHEN THE  NAME  OF  A
       SHELL  FUNCTION  IS USED AS A SIMPLE COMMAND NAME, THE LIST OF COMMANDS
       ASSOCIATED WITH THAT FUNCTION NAME IS EXECUTED.  FUNCTIONS ARE EXECUTED
       IN  THE  CONTEXT  OF  THE  CURRENT  SHELL; NO NEW PROCESS IS CREATED TO
       INTERPRET THEM (CONTRAST THIS WITH THE EXECUTION OF  A  SHELL  SCRIPT).
       WHEN  A  FUNCTION IS EXECUTED, THE ARGUMENTS TO THE FUNCTION BECOME THE
       POSITIONAL PARAMETERS DURING ITS EXECUTION.  THE SPECIAL PARAMETER # IS
       UPDATED  TO REFLECT THE CHANGE.  SPECIAL PARAMETER 0 IS UNCHANGED.  THE
       FIRST ELEMENT OF THE FUNCNAME VARIABLE IS SET TO THE NAME OF THE  FUNC‐
       TION WHILE THE FUNCTION IS EXECUTING.

       ALL  OTHER  ASPECTS  OF  THE  SHELL EXECUTION ENVIRONMENT ARE IDENTICAL
       BETWEEN A FUNCTION AND ITS CALLER WITH THESE EXCEPTIONS:  THE DEBUG AND
       RETURN  TRAPS  (SEE  THE  DESCRIPTION  OF  THE TRAP BUILTIN UNDER SHELL
       BUILTIN COMMANDS BELOW) ARE NOT INHERITED UNLESS THE FUNCTION HAS  BEEN
       GIVEN  THE  TRACE ATTRIBUTE (SEE THE DESCRIPTION OF THE DECLARE BUILTIN
       BELOW) OR THE -O FUNCTRACE SHELL OPTION HAS BEEN ENABLED WITH  THE  SET
       BUILTIN  (IN  WHICH  CASE  ALL  FUNCTIONS  INHERIT THE DEBUG AND RETURN
       TRAPS), AND THE ERR TRAP IS NOT INHERITED UNLESS THE -O ERRTRACE  SHELL
       OPTION HAS BEEN ENABLED.

       VARIABLES  LOCAL TO THE FUNCTION MAY BE DECLARED WITH THE LOCAL BUILTIN
       COMMAND.  ORDINARILY, VARIABLES AND THEIR VALUES ARE SHARED BETWEEN THE
       FUNCTION AND ITS CALLER.

       THE  FUNCNEST  VARIABLE,  IF  SET  TO  A  NUMERIC VALUE GREATER THAN 0,
       DEFINES A MAXIMUM FUNCTION NESTING LEVEL.   FUNCTION  INVOCATIONS  THAT
       EXCEED THE LIMIT CAUSE THE ENTIRE COMMAND TO ABORT.

       IF  THE  BUILTIN COMMAND RETURN IS EXECUTED IN A FUNCTION, THE FUNCTION
       COMPLETES AND EXECUTION RESUMES WITH THE NEXT COMMAND AFTER  THE  FUNC‐
       TION  CALL.   ANY  COMMAND  ASSOCIATED WITH THE RETURN TRAP IS EXECUTED
       BEFORE EXECUTION RESUMES.  WHEN A FUNCTION COMPLETES, THE VALUES OF THE
       POSITIONAL  PARAMETERS  AND THE SPECIAL PARAMETER # ARE RESTORED TO THE
       VALUES THEY HAD PRIOR TO THE FUNCTION'S EXECUTION.

       FUNCTION NAMES AND DEFINITIONS MAY BE LISTED WITH THE -F OPTION TO  THE
       DECLARE OR TYPESET BUILTIN COMMANDS.  THE -F OPTION TO DECLARE OR TYPE‐
       SET WILL LIST THE FUNCTION NAMES ONLY (AND OPTIONALLY THE  SOURCE  FILE
       AND  LINE  NUMBER, IF THE EXTDEBUG SHELL OPTION IS ENABLED).  FUNCTIONS
       MAY BE EXPORTED SO THAT SUBSHELLS AUTOMATICALLY HAVE THEM DEFINED  WITH
       THE  -F  OPTION  TO  THE  EXPORT BUILTIN.  A FUNCTION DEFINITION MAY BE
       DELETED USING THE -F OPTION TO THE  UNSET  BUILTIN.   NOTE  THAT  SHELL
       FUNCTIONS AND VARIABLES WITH THE SAME NAME MAY RESULT IN MULTIPLE IDEN‐
       TICALLY-NAMED ENTRIES IN THE ENVIRONMENT PASSED TO  THE  SHELL'S  CHIL‐
       DREN.  CARE SHOULD BE TAKEN IN CASES WHERE THIS MAY CAUSE A PROBLEM.

       FUNCTIONS MAY BE RECURSIVE.  THE FUNCNEST VARIABLE MAY BE USED TO LIMIT
       THE DEPTH OF THE FUNCTION CALL STACK AND RESTRICT THE NUMBER  OF  FUNC‐
       TION  INVOCATIONS.   BY  DEFAULT,  NO LIMIT IS IMPOSED ON THE NUMBER OF
       RECURSIVE CALLS.

ARITHMETIC EVALUATION
       THE SHELL ALLOWS ARITHMETIC EXPRESSIONS TO BE EVALUATED, UNDER  CERTAIN
       CIRCUMSTANCES  (SEE THE LET AND DECLARE BUILTIN COMMANDS AND ARITHMETIC
       EXPANSION).  EVALUATION IS DONE IN FIXED-WIDTH INTEGERS WITH  NO  CHECK
       FOR  OVERFLOW, THOUGH DIVISION BY 0 IS TRAPPED AND FLAGGED AS AN ERROR.
       THE OPERATORS AND THEIR PRECEDENCE, ASSOCIATIVITY, AND VALUES  ARE  THE
       SAME  AS IN THE C LANGUAGE.  THE FOLLOWING LIST OF OPERATORS IS GROUPED
       INTO LEVELS OF EQUAL-PRECEDENCE OPERATORS.  THE LEVELS  ARE  LISTED  IN
       ORDER OF DECREASING PRECEDENCE.

       ID++ ID--
              VARIABLE POST-INCREMENT AND POST-DECREMENT
       ++ID --ID
              VARIABLE PRE-INCREMENT AND PRE-DECREMENT
       - +    UNARY MINUS AND PLUS
       ! ~    LOGICAL AND BITWISE NEGATION
       **     EXPONENTIATION
       * / %  MULTIPLICATION, DIVISION, REMAINDER
       + -    ADDITION, SUBTRACTION
       << >>  LEFT AND RIGHT BITWISE SHIFTS
       <= >= < >
              COMPARISON
       == !=  EQUALITY AND INEQUALITY
       &      BITWISE AND
       ^      BITWISE EXCLUSIVE OR
       |      BITWISE OR
       &&     LOGICAL AND
       ||     LOGICAL OR
       EXPR?EXPR:EXPR
              CONDITIONAL OPERATOR
       = *= /= %= += -= <<= >>= &= ^= |=
              ASSIGNMENT
       EXPR1 , EXPR2
              COMMA

       SHELL  VARIABLES  ARE  ALLOWED AS OPERANDS; PARAMETER EXPANSION IS PER‐
       FORMED BEFORE THE EXPRESSION IS EVALUATED.  WITHIN AN EXPRESSION, SHELL
       VARIABLES  MAY  ALSO  BE REFERENCED BY NAME WITHOUT USING THE PARAMETER
       EXPANSION SYNTAX.  A SHELL VARIABLE THAT IS NULL OR UNSET EVALUATES  TO
       0 WHEN REFERENCED BY NAME WITHOUT USING THE PARAMETER EXPANSION SYNTAX.
       THE VALUE OF A VARIABLE IS EVALUATED AS AN ARITHMETIC  EXPRESSION  WHEN
       IT  IS  REFERENCED, OR WHEN A VARIABLE WHICH HAS BEEN GIVEN THE INTEGER
       ATTRIBUTE USING DECLARE -I IS ASSIGNED A VALUE.  A NULL VALUE EVALUATES
       TO  0.   A SHELL VARIABLE NEED NOT HAVE ITS INTEGER ATTRIBUTE TURNED ON
       TO BE USED IN AN EXPRESSION.

       CONSTANTS WITH A LEADING 0 ARE INTERPRETED AS OCTAL NUMBERS.  A LEADING
       0X  OR  0X  DENOTES  HEXADECIMAL.   OTHERWISE,  NUMBERS  TAKE  THE FORM
       [BASE#]N, WHERE THE OPTIONAL BASE IS A DECIMAL NUMBER BETWEEN 2 AND  64
       REPRESENTING  THE  ARITHMETIC BASE, AND N IS A NUMBER IN THAT BASE.  IF
       BASE# IS OMITTED, THEN BASE 10 IS USED.  WHEN SPECIFYING N, THE  DIGITS
       GREATER< THAN 9 ARE REPRESENTED BY THE LOWERCASE LETTERS, THE UPPERCASE
       LETTERS, @, AND _, IN THAT ORDER.  IF BASE IS LESS THAN OR EQUAL TO 36,
       LOWERCASE  AND  UPPERCASE LETTERS MAY BE USED INTERCHANGEABLY TO REPRE‐
       SENT NUMBERS BETWEEN 10 AND 35.

       OPERATORS ARE EVALUATED IN ORDER  OF  PRECEDENCE.   SUB-EXPRESSIONS  IN
       PARENTHESES  ARE  EVALUATED FIRST AND MAY OVERRIDE THE PRECEDENCE RULES
       ABOVE.

CONDITIONAL EXPRESSIONS
       CONDITIONAL EXPRESSIONS ARE USED BY THE [[  COMPOUND  COMMAND  AND  THE
       TEST  AND [ BUILTIN COMMANDS TO TEST FILE ATTRIBUTES AND PERFORM STRING
       AND ARITHMETIC COMPARISONS.  EXPRESSIONS ARE FORMED FROM THE  FOLLOWING
       UNARY  OR  BINARY  PRIMARIES.   IF ANY FILE ARGUMENT TO ONE OF THE PRI‐
       MARIES IS OF THE FORM /DEV/FD/N, THEN FILE DESCRIPTOR N IS CHECKED.  IF
       THE  FILE  ARGUMENT  TO  ONE  OF  THE  PRIMARIES  IS ONE OF /DEV/STDIN,
       /DEV/STDOUT, OR /DEV/STDERR, FILE DESCRIPTOR 0, 1, OR 2,  RESPECTIVELY,
       IS CHECKED.

       UNLESS OTHERWISE SPECIFIED, PRIMARIES THAT OPERATE ON FILES FOLLOW SYM‐
       BOLIC LINKS AND OPERATE ON THE TARGET OF THE LINK, RATHER THAN THE LINK
       ITSELF.

       WHEN  USED  WITH [[, THE < AND > OPERATORS SORT LEXICOGRAPHICALLY USING
       THE CURRENT LOCALE.  THE TEST COMMAND SORTS USING ASCII ORDERING.

       -A FILE
              TRUE IF FILE EXISTS.
       -B FILE
              TRUE IF FILE EXISTS AND IS A BLOCK SPECIAL FILE.
       -C FILE
              TRUE IF FILE EXISTS AND IS A CHARACTER SPECIAL FILE.
       -D FILE
              TRUE IF FILE EXISTS AND IS A DIRECTORY.
       -E FILE
              TRUE IF FILE EXISTS.
       -F FILE
              TRUE IF FILE EXISTS AND IS A REGULAR FILE.
       -G FILE
              TRUE IF FILE EXISTS AND IS SET-GROUP-ID.
       -H FILE
              TRUE IF FILE EXISTS AND IS A SYMBOLIC LINK.
       -K FILE
              TRUE IF FILE EXISTS AND ITS ``STICKY'' BIT IS SET.
       -P FILE
              TRUE IF FILE EXISTS AND IS A NAMED PIPE (FIFO).
       -R FILE
              TRUE IF FILE EXISTS AND IS READABLE.
       -S FILE
              TRUE IF FILE EXISTS AND HAS A SIZE GREATER THAN ZERO.
       -T FD  TRUE IF FILE DESCRIPTOR FD IS OPEN AND REFERS TO A TERMINAL.
       -U FILE
              TRUE IF FILE EXISTS AND ITS SET-USER-ID BIT IS SET.
       -W FILE
              TRUE IF FILE EXISTS AND IS WRITABLE.
       -X FILE
              TRUE IF FILE EXISTS AND IS EXECUTABLE.
       -G FILE
              TRUE IF FILE EXISTS AND IS OWNED BY THE EFFECTIVE GROUP ID.
       -L FILE
              TRUE IF FILE EXISTS AND IS A SYMBOLIC LINK.
       -N FILE
              TRUE IF FILE EXISTS AND HAS BEEN  MODIFIED  SINCE  IT  WAS  LAST
              READ.
       -O FILE
              TRUE IF FILE EXISTS AND IS OWNED BY THE EFFECTIVE USER ID.
       -S FILE
              TRUE IF FILE EXISTS AND IS A SOCKET.
       FILE1 -EF FILE2
              TRUE  IF FILE1 AND FILE2 REFER TO THE SAME DEVICE AND INODE NUM‐
              BERS.
       FILE1 -NT FILE2
              TRUE IF FILE1 IS NEWER (ACCORDING  TO  MODIFICATION  DATE)  THAN
              FILE2, OR IF FILE1 EXISTS AND FILE2 DOES NOT.
       FILE1 -OT FILE2
              TRUE  IF FILE1 IS OLDER THAN FILE2, OR IF FILE2 EXISTS AND FILE1
              DOES NOT.
       -O OPTNAME
              TRUE IF THE SHELL OPTION OPTNAME IS ENABLED.  SEE  THE  LIST  OF
              OPTIONS  UNDER  THE  DESCRIPTION  OF  THE  -O  OPTION TO THE SET
              BUILTIN BELOW.
       -V VARNAME
              TRUE IF THE SHELL VARIABLE VARNAME IS SET (HAS BEEN  ASSIGNED  A
              VALUE).
       -R VARNAME
              TRUE  IF  THE SHELL VARIABLE VARNAME IS SET AND IS A NAME REFER‐
              ENCE.
       -Z STRING
              TRUE IF THE LENGTH OF STRING IS ZERO.
       STRING
       -N STRING
              TRUE IF THE LENGTH OF STRING IS NON-ZERO.

       STRING1 == STRING2
       STRING1 = STRING2
              TRUE IF THE STRINGS ARE EQUAL.  = SHOULD BE USED WITH  THE  TEST
              COMMAND  FOR  POSIX CONFORMANCE.  WHEN USED WITH THE [[ COMMAND,
              THIS PERFORMS PATTERN MATCHING AS DESCRIBED ABOVE (COMPOUND COM‐
              MANDS).

       STRING1 != STRING2
              TRUE IF THE STRINGS ARE NOT EQUAL.

       STRING1 < STRING2
              TRUE IF STRING1 SORTS BEFORE STRING2 LEXICOGRAPHICALLY.

       STRING1 > STRING2
              TRUE IF STRING1 SORTS AFTER STRING2 LEXICOGRAPHICALLY.

       ARG1 OP ARG2
              OP  IS ONE OF -EQ, -NE, -LT, -LE, -GT, OR -GE.  THESE ARITHMETIC
              BINARY OPERATORS RETURN TRUE IF ARG1 IS EQUAL TO, NOT EQUAL  TO,
              LESS  THAN, LESS THAN OR EQUAL TO, GREATER THAN, OR GREATER THAN
              OR EQUAL TO ARG2, RESPECTIVELY.  ARG1 AND ARG2 MAY  BE  POSITIVE
              OR NEGATIVE INTEGERS.

SIMPLE COMMAND EXPANSION
       WHEN  A  SIMPLE  COMMAND  IS EXECUTED, THE SHELL PERFORMS THE FOLLOWING
       EXPANSIONS, ASSIGNMENTS, AND REDIRECTIONS, FROM LEFT TO RIGHT.

       1.     THE WORDS THAT THE PARSER HAS  MARKED  AS  VARIABLE  ASSIGNMENTS
              (THOSE  PRECEDING  THE  COMMAND NAME) AND REDIRECTIONS ARE SAVED
              FOR LATER PROCESSING.

       2.     THE WORDS THAT ARE NOT VARIABLE ASSIGNMENTS OR REDIRECTIONS  ARE
              EXPANDED.   IF  ANY WORDS REMAIN AFTER EXPANSION, THE FIRST WORD
              IS TAKEN TO BE THE NAME OF THE COMMAND AND THE  REMAINING  WORDS
              ARE THE ARGUMENTS.

       3.     REDIRECTIONS ARE PERFORMED AS DESCRIBED ABOVE UNDER REDIRECTION.

       4.     THE TEXT AFTER THE = IN EACH VARIABLE ASSIGNMENT UNDERGOES TILDE
              EXPANSION, PARAMETER EXPANSION, COMMAND SUBSTITUTION, ARITHMETIC
              EXPANSION,  AND QUOTE REMOVAL BEFORE BEING ASSIGNED TO THE VARI‐
              ABLE.

       IF NO COMMAND NAME RESULTS, THE VARIABLE ASSIGNMENTS AFFECT THE CURRENT
       SHELL  ENVIRONMENT.  OTHERWISE, THE VARIABLES ARE ADDED TO THE ENVIRON‐
       MENT OF THE EXECUTED COMMAND AND DO NOT AFFECT THE CURRENT SHELL  ENVI‐
       RONMENT.   IF  ANY  OF  THE ASSIGNMENTS ATTEMPTS TO ASSIGN A VALUE TO A
       READONLY VARIABLE, AN ERROR OCCURS, AND THE COMMAND EXITS WITH  A  NON-
       ZERO STATUS.

       IF  NO  COMMAND  NAME  RESULTS,  REDIRECTIONS ARE PERFORMED, BUT DO NOT
       AFFECT THE CURRENT SHELL ENVIRONMENT.  A REDIRECTION ERROR  CAUSES  THE
       COMMAND TO EXIT WITH A NON-ZERO STATUS.

       IF  THERE IS A COMMAND NAME LEFT AFTER EXPANSION, EXECUTION PROCEEDS AS
       DESCRIBED BELOW.  OTHERWISE, THE COMMAND EXITS.  IF ONE OF  THE  EXPAN‐
       SIONS  CONTAINED A COMMAND SUBSTITUTION, THE EXIT STATUS OF THE COMMAND
       IS THE EXIT STATUS OF THE  LAST  COMMAND  SUBSTITUTION  PERFORMED.   IF
       THERE WERE NO COMMAND SUBSTITUTIONS, THE COMMAND EXITS WITH A STATUS OF
       ZERO.

COMMAND EXECUTION
       AFTER A COMMAND HAS BEEN SPLIT INTO WORDS, IF IT RESULTS  IN  A  SIMPLE
       COMMAND  AND  AN  OPTIONAL LIST OF ARGUMENTS, THE FOLLOWING ACTIONS ARE
       TAKEN.

       IF THE COMMAND NAME CONTAINS NO SLASHES, THE SHELL ATTEMPTS  TO  LOCATE
       IT.   IF  THERE  EXISTS A SHELL FUNCTION BY THAT NAME, THAT FUNCTION IS
       INVOKED AS DESCRIBED ABOVE IN FUNCTIONS.  IF THE NAME DOES NOT MATCH  A
       FUNCTION,  THE SHELL SEARCHES FOR IT IN THE LIST OF SHELL BUILTINS.  IF
       A MATCH IS FOUND, THAT BUILTIN IS INVOKED.

       IF THE NAME IS NEITHER A SHELL FUNCTION NOR A BUILTIN, AND CONTAINS  NO
       SLASHES,  BASH  SEARCHES  EACH ELEMENT OF THE PATH FOR A DIRECTORY CON‐
       TAINING AN EXECUTABLE FILE BY THAT NAME.  BASH USES  A  HASH  TABLE  TO
       REMEMBER  THE  FULL PATHNAMES OF EXECUTABLE FILES (SEE HASH UNDER SHELL
       BUILTIN COMMANDS BELOW).  A FULL SEARCH OF THE DIRECTORIES IN  PATH  IS
       PERFORMED  ONLY  IF THE COMMAND IS NOT FOUND IN THE HASH TABLE.  IF THE
       SEARCH IS UNSUCCESSFUL, THE SHELL SEARCHES FOR A DEFINED SHELL FUNCTION
       NAMED COMMAND_NOT_FOUND_HANDLE.  IF THAT FUNCTION EXISTS, IT IS INVOKED
       WITH THE ORIGINAL COMMAND AND THE ORIGINAL COMMAND'S ARGUMENTS  AS  ITS
       ARGUMENTS,  AND  THE  FUNCTION'S EXIT STATUS BECOMES THE EXIT STATUS OF
       THE SHELL.  IF THAT FUNCTION IS NOT DEFINED, THE SHELL PRINTS AN  ERROR
       MESSAGE AND RETURNS AN EXIT STATUS OF 127.

       IF  THE  SEARCH  IS  SUCCESSFUL, OR IF THE COMMAND NAME CONTAINS ONE OR
       MORE SLASHES, THE SHELL EXECUTES THE NAMED PROGRAM IN A SEPARATE EXECU‐
       TION ENVIRONMENT.  ARGUMENT 0 IS SET TO THE NAME GIVEN, AND THE REMAIN‐
       ING ARGUMENTS TO THE COMMAND ARE SET TO THE ARGUMENTS GIVEN, IF ANY.

       IF THIS EXECUTION FAILS BECAUSE THE FILE IS NOT IN  EXECUTABLE  FORMAT,
       AND  THE FILE IS NOT A DIRECTORY, IT IS ASSUMED TO BE A SHELL SCRIPT, A
       FILE CONTAINING SHELL COMMANDS.  A SUBSHELL IS SPAWNED TO  EXECUTE  IT.
       THIS  SUBSHELL  REINITIALIZES ITSELF, SO THAT THE EFFECT IS AS IF A NEW
       SHELL HAD BEEN INVOKED TO HANDLE THE SCRIPT, WITH  THE  EXCEPTION  THAT
       THE  LOCATIONS  OF  COMMANDS  REMEMBERED  BY THE PARENT (SEE HASH BELOW
       UNDER SHELL BUILTIN COMMANDS) ARE RETAINED BY THE CHILD.

       IF THE PROGRAM IS A FILE BEGINNING WITH #!, THE REMAINDER OF THE  FIRST
       LINE  SPECIFIES AN INTERPRETER FOR THE PROGRAM.  THE SHELL EXECUTES THE
       SPECIFIED INTERPRETER ON OPERATING SYSTEMS THAT DO NOT HANDLE THIS EXE‐
       CUTABLE FORMAT THEMSELVES.  THE ARGUMENTS TO THE INTERPRETER CONSIST OF
       A SINGLE OPTIONAL ARGUMENT FOLLOWING THE INTERPRETER NAME ON THE  FIRST
       LINE  OF  THE PROGRAM, FOLLOWED BY THE NAME OF THE PROGRAM, FOLLOWED BY
       THE COMMAND ARGUMENTS, IF ANY.

COMMAND EXECUTION ENVIRONMENT
       THE SHELL HAS AN EXECUTION ENVIRONMENT, WHICH CONSISTS OF  THE  FOLLOW‐
       ING:

       ·      OPEN  FILES INHERITED BY THE SHELL AT INVOCATION, AS MODIFIED BY
              REDIRECTIONS SUPPLIED TO THE EXEC BUILTIN

       ·      THE CURRENT WORKING DIRECTORY AS SET BY CD, PUSHD, OR  POPD,  OR
              INHERITED BY THE SHELL AT INVOCATION

       ·      THE  FILE  CREATION  MODE MASK AS SET BY UMASK OR INHERITED FROM
              THE SHELL'S PARENT

       ·      CURRENT TRAPS SET BY TRAP

       ·      SHELL PARAMETERS THAT ARE SET BY VARIABLE ASSIGNMENT OR WITH SET
              OR INHERITED FROM THE SHELL'S PARENT IN THE ENVIRONMENT

       ·      SHELL  FUNCTIONS  DEFINED DURING EXECUTION OR INHERITED FROM THE
              SHELL'S PARENT IN THE ENVIRONMENT

       ·      OPTIONS ENABLED AT INVOCATION (EITHER BY DEFAULT  OR  WITH  COM‐
              MAND-LINE ARGUMENTS) OR BY SET

       ·      OPTIONS ENABLED BY SHOPT

       ·      SHELL ALIASES DEFINED WITH ALIAS

       ·      VARIOUS  PROCESS  IDS,  INCLUDING  THOSE OF BACKGROUND JOBS, THE
              VALUE OF $$, AND THE VALUE OF PPID

       WHEN A SIMPLE COMMAND OTHER THAN A BUILTIN OR SHELL FUNCTION IS  TO  BE
       EXECUTED,  IT  IS INVOKED IN A SEPARATE EXECUTION ENVIRONMENT THAT CON‐
       SISTS OF THE FOLLOWING.  UNLESS OTHERWISE NOTED, THE VALUES ARE  INHER‐
       ITED FROM THE SHELL.


       ·      THE  SHELL'S  OPEN  FILES,  PLUS ANY MODIFICATIONS AND ADDITIONS
              SPECIFIED BY REDIRECTIONS TO THE COMMAND

       ·      THE CURRENT WORKING DIRECTORY

       ·      THE FILE CREATION MODE MASK

       ·      SHELL VARIABLES AND FUNCTIONS  MARKED  FOR  EXPORT,  ALONG  WITH
              VARIABLES EXPORTED FOR THE COMMAND, PASSED IN THE ENVIRONMENT

       ·      TRAPS CAUGHT BY THE SHELL ARE RESET TO THE VALUES INHERITED FROM
              THE SHELL'S PARENT, AND TRAPS IGNORED BY THE SHELL ARE IGNORED

       A COMMAND INVOKED  IN  THIS  SEPARATE  ENVIRONMENT  CANNOT  AFFECT  THE
       SHELL'S EXECUTION ENVIRONMENT.

       COMMAND  SUBSTITUTION, COMMANDS GROUPED WITH PARENTHESES, AND ASYNCHRO‐
       NOUS COMMANDS ARE INVOKED IN A SUBSHELL ENVIRONMENT THAT IS A DUPLICATE
       OF  THE  SHELL  ENVIRONMENT,  EXCEPT THAT TRAPS CAUGHT BY THE SHELL ARE
       RESET TO THE VALUES THAT THE SHELL INHERITED FROM ITS PARENT AT INVOCA‐
       TION.  BUILTIN COMMANDS THAT ARE INVOKED AS PART OF A PIPELINE ARE ALSO
       EXECUTED IN A SUBSHELL ENVIRONMENT.  CHANGES MADE TO THE SUBSHELL ENVI‐
       RONMENT CANNOT AFFECT THE SHELL'S EXECUTION ENVIRONMENT.

       SUBSHELLS SPAWNED TO EXECUTE COMMAND SUBSTITUTIONS INHERIT THE VALUE OF
       THE -E OPTION FROM THE PARENT SHELL.  WHEN  NOT  IN  POSIX  MODE,  BASH
       CLEARS THE -E OPTION IN SUCH SUBSHELLS.

       IF  A  COMMAND  IS  FOLLOWED  BY A & AND JOB CONTROL IS NOT ACTIVE, THE
       DEFAULT STANDARD INPUT FOR THE COMMAND IS  THE  EMPTY  FILE  /DEV/NULL.
       OTHERWISE,  THE  INVOKED  COMMAND  INHERITS THE FILE DESCRIPTORS OF THE
       CALLING SHELL AS MODIFIED BY REDIRECTIONS.

ENVIRONMENT
       WHEN A PROGRAM IS INVOKED IT IS GIVEN AN ARRAY OF  STRINGS  CALLED  THE
       ENVIRONMENT.   THIS  IS  A  LIST  OF  NAME-VALUE  PAIRS,  OF  THE  FORM
       NAME=VALUE.

       THE SHELL PROVIDES SEVERAL WAYS  TO  MANIPULATE  THE  ENVIRONMENT.   ON
       INVOCATION, THE SHELL SCANS ITS OWN ENVIRONMENT AND CREATES A PARAMETER
       FOR EACH NAME FOUND, AUTOMATICALLY MARKING IT FOR EXPORT TO CHILD  PRO‐
       CESSES.   EXECUTED  COMMANDS  INHERIT  THE ENVIRONMENT.  THE EXPORT AND
       DECLARE -X COMMANDS ALLOW PARAMETERS AND FUNCTIONS TO BE ADDED  TO  AND
       DELETED FROM THE ENVIRONMENT.  IF THE VALUE OF A PARAMETER IN THE ENVI‐
       RONMENT IS MODIFIED, THE NEW VALUE BECOMES  PART  OF  THE  ENVIRONMENT,
       REPLACING  THE  OLD.  THE ENVIRONMENT INHERITED BY ANY EXECUTED COMMAND
       CONSISTS OF THE SHELL'S INITIAL ENVIRONMENT, WHOSE VALUES MAY BE  MODI‐
       FIED  IN  THE  SHELL, LESS ANY PAIRS REMOVED BY THE UNSET COMMAND, PLUS
       ANY ADDITIONS VIA THE EXPORT AND DECLARE -X COMMANDS.

       THE ENVIRONMENT FOR ANY SIMPLE COMMAND OR  FUNCTION  MAY  BE  AUGMENTED
       TEMPORARILY  BY  PREFIXING  IT WITH PARAMETER ASSIGNMENTS, AS DESCRIBED
       ABOVE IN PARAMETERS.  THESE ASSIGNMENT STATEMENTS AFFECT ONLY THE ENVI‐
       RONMENT SEEN BY THAT COMMAND.

       IF  THE  -K OPTION IS SET (SEE THE SET BUILTIN COMMAND BELOW), THEN ALL
       PARAMETER ASSIGNMENTS ARE PLACED IN THE ENVIRONMENT FOR A COMMAND,  NOT
       JUST THOSE THAT PRECEDE THE COMMAND NAME.

       WHEN  BASH  INVOKES  AN  EXTERNAL COMMAND, THE VARIABLE _ IS SET TO THE
       FULL FILENAME OF THE COMMAND AND PASSED TO THAT COMMAND IN ITS ENVIRON‐
       MENT.

EXIT STATUS
       THE  EXIT  STATUS  OF  AN EXECUTED COMMAND IS THE VALUE RETURNED BY THE
       WAITPID SYSTEM CALL OR EQUIVALENT FUNCTION.  EXIT STATUSES FALL BETWEEN
       0  AND  255, THOUGH, AS EXPLAINED BELOW, THE SHELL MAY USE VALUES ABOVE
       125 SPECIALLY.  EXIT STATUSES FROM SHELL BUILTINS AND COMPOUND COMMANDS
       ARE  ALSO LIMITED TO THIS RANGE. UNDER CERTAIN CIRCUMSTANCES, THE SHELL
       WILL USE SPECIAL VALUES TO INDICATE SPECIFIC FAILURE MODES.

       FOR THE SHELL'S PURPOSES, A COMMAND WHICH EXITS WITH A ZERO EXIT STATUS
       HAS  SUCCEEDED.   AN EXIT STATUS OF ZERO INDICATES SUCCESS.  A NON-ZERO
       EXIT STATUS INDICATES FAILURE.  WHEN A COMMAND TERMINATES  ON  A  FATAL
       SIGNAL N, BASH USES THE VALUE OF 128+N AS THE EXIT STATUS.

       IF  A  COMMAND  IS  NOT  FOUND, THE CHILD PROCESS CREATED TO EXECUTE IT
       RETURNS A STATUS OF 127.  IF A COMMAND IS FOUND BUT IS NOT  EXECUTABLE,
       THE RETURN STATUS IS 126.

       IF A COMMAND FAILS BECAUSE OF AN ERROR DURING EXPANSION OR REDIRECTION,
       THE EXIT STATUS IS GREATER THAN ZERO.

       SHELL BUILTIN COMMANDS RETURN A STATUS OF 0 (TRUE) IF  SUCCESSFUL,  AND
       NON-ZERO  (FALSE)  IF AN ERROR OCCURS WHILE THEY EXECUTE.  ALL BUILTINS
       RETURN AN EXIT STATUS OF 2 TO INDICATE INCORRECT USAGE.

       BASH ITSELF RETURNS THE EXIT  STATUS  OF  THE  LAST  COMMAND  EXECUTED,
       UNLESS  A  SYNTAX  ERROR OCCURS, IN WHICH CASE IT EXITS WITH A NON-ZERO
       VALUE.  SEE ALSO THE EXIT BUILTIN COMMAND BELOW.

SIGNALS
       WHEN BASH IS INTERACTIVE, IN THE  ABSENCE  OF  ANY  TRAPS,  IT  IGNORES
       SIGTERM (SO THAT KILL 0 DOES NOT KILL AN INTERACTIVE SHELL), AND SIGINT
       IS CAUGHT AND HANDLED (SO THAT THE WAIT BUILTIN IS INTERRUPTIBLE).   IN
       ALL  CASES,  BASH  IGNORES  SIGQUIT.  IF JOB CONTROL IS IN EFFECT, BASH
       IGNORES SIGTTIN, SIGTTOU, AND SIGTSTP.

       NON-BUILTIN COMMANDS RUN BY BASH HAVE SIGNAL HANDLERS SET TO THE VALUES
       INHERITED  BY  THE  SHELL  FROM ITS PARENT.  WHEN JOB CONTROL IS NOT IN
       EFFECT, ASYNCHRONOUS COMMANDS IGNORE SIGINT AND SIGQUIT IN ADDITION  TO
       THESE  INHERITED HANDLERS.  COMMANDS RUN AS A RESULT OF COMMAND SUBSTI‐
       TUTION IGNORE THE KEYBOARD-GENERATED JOB CONTROL SIGNALS SIGTTIN, SIGT‐
       TOU, AND SIGTSTP.

       THE  SHELL  EXITS BY DEFAULT UPON RECEIPT OF A SIGHUP.  BEFORE EXITING,
       AN INTERACTIVE SHELL  RESENDS  THE  SIGHUP  TO  ALL  JOBS,  RUNNING  OR
       STOPPED.  STOPPED JOBS ARE SENT SIGCONT TO ENSURE THAT THEY RECEIVE THE
       SIGHUP.  TO PREVENT THE SHELL FROM SENDING THE SIGNAL TO  A  PARTICULAR
       JOB,  IT  SHOULD BE REMOVED FROM THE JOBS TABLE WITH THE DISOWN BUILTIN
       (SEE SHELL BUILTIN COMMANDS BELOW) OR  MARKED  TO  NOT  RECEIVE  SIGHUP
       USING DISOWN -H.

       IF  THE  HUPONEXIT  SHELL  OPTION HAS BEEN SET WITH SHOPT, BASH SENDS A
       SIGHUP TO ALL JOBS WHEN AN INTERACTIVE LOGIN SHELL EXITS.

       IF BASH IS WAITING FOR A COMMAND TO COMPLETE AND RECEIVES A SIGNAL  FOR
       WHICH A TRAP HAS BEEN SET, THE TRAP WILL NOT BE EXECUTED UNTIL THE COM‐
       MAND COMPLETES.  WHEN BASH IS WAITING FOR AN ASYNCHRONOUS  COMMAND  VIA
       THE  WAIT  BUILTIN, THE RECEPTION OF A SIGNAL FOR WHICH A TRAP HAS BEEN
       SET WILL CAUSE THE WAIT BUILTIN TO RETURN IMMEDIATELY WITH AN EXIT STA‐
       TUS GREATER THAN 128, IMMEDIATELY AFTER WHICH THE TRAP IS EXECUTED.

JOB CONTROL
       JOB  CONTROL  REFERS  TO  THE ABILITY TO SELECTIVELY STOP (SUSPEND) THE
       EXECUTION OF PROCESSES AND CONTINUE (RESUME) THEIR EXECUTION AT A LATER
       POINT.   A  USER  TYPICALLY  EMPLOYS  THIS  FACILITY VIA AN INTERACTIVE
       INTERFACE SUPPLIED JOINTLY BY THE OPERATING  SYSTEM  KERNEL'S  TERMINAL
       DRIVER AND BASH.

       THE  SHELL  ASSOCIATES  A  JOB WITH EACH PIPELINE.  IT KEEPS A TABLE OF
       CURRENTLY EXECUTING JOBS, WHICH MAY BE LISTED WITH  THE  JOBS  COMMAND.
       WHEN  BASH STARTS A JOB ASYNCHRONOUSLY (IN THE BACKGROUND), IT PRINTS A
       LINE THAT LOOKS LIKE:

              [1] 25647

       INDICATING THAT THIS JOB IS JOB NUMBER 1 AND THAT THE PROCESS ID OF THE
       LAST PROCESS IN THE PIPELINE ASSOCIATED WITH THIS JOB IS 25647.  ALL OF
       THE PROCESSES IN A SINGLE PIPELINE ARE MEMBERS OF THE SAME  JOB.   BASH
       USES THE JOB ABSTRACTION AS THE BASIS FOR JOB CONTROL.

       TO  FACILITATE THE IMPLEMENTATION OF THE USER INTERFACE TO JOB CONTROL,
       THE OPERATING SYSTEM MAINTAINS THE NOTION OF A CURRENT TERMINAL PROCESS
       GROUP ID.  MEMBERS OF THIS PROCESS GROUP (PROCESSES WHOSE PROCESS GROUP
       ID IS EQUAL TO THE CURRENT TERMINAL PROCESS GROUP ID) RECEIVE KEYBOARD-
       GENERATED  SIGNALS  SUCH  AS SIGINT.  THESE PROCESSES ARE SAID TO BE IN
       THE FOREGROUND.  BACKGROUND PROCESSES ARE THOSE WHOSE PROCESS GROUP  ID
       DIFFERS FROM THE TERMINAL'S; SUCH PROCESSES ARE IMMUNE TO KEYBOARD-GEN‐
       ERATED SIGNALS.  ONLY FOREGROUND PROCESSES ARE ALLOWED TO READ FROM OR,
       IF  THE  USER  SO  SPECIFIES  WITH  STTY TOSTOP, WRITE TO THE TERMINAL.
       BACKGROUND PROCESSES WHICH ATTEMPT TO READ FROM  (WRITE  TO  WHEN  STTY
       TOSTOP  IS  IN EFFECT) THE TERMINAL ARE SENT A SIGTTIN (SIGTTOU) SIGNAL
       BY THE KERNEL'S TERMINAL DRIVER, WHICH,  UNLESS  CAUGHT,  SUSPENDS  THE
       PROCESS.

       IF  THE OPERATING SYSTEM ON WHICH BASH IS RUNNING SUPPORTS JOB CONTROL,
       BASH CONTAINS FACILITIES TO USE IT.  TYPING THE SUSPEND CHARACTER (TYP‐
       ICALLY ^Z, CONTROL-Z) WHILE A PROCESS IS RUNNING CAUSES THAT PROCESS TO
       BE STOPPED AND RETURNS CONTROL TO BASH.   TYPING  THE  DELAYED  SUSPEND
       CHARACTER  (TYPICALLY  ^Y,  CONTROL-Y) CAUSES THE PROCESS TO BE STOPPED
       WHEN IT ATTEMPTS TO READ INPUT FROM THE TERMINAL,  AND  CONTROL  TO  BE
       RETURNED  TO BASH.  THE USER MAY THEN MANIPULATE THE STATE OF THIS JOB,
       USING THE BG COMMAND TO CONTINUE IT IN THE BACKGROUND, THE  FG  COMMAND
       TO CONTINUE IT IN THE FOREGROUND, OR THE KILL COMMAND TO KILL IT.  A ^Z
       TAKES EFFECT IMMEDIATELY, AND HAS THE ADDITIONAL SIDE EFFECT OF CAUSING
       PENDING OUTPUT AND TYPEAHEAD TO BE DISCARDED.

       THERE ARE A NUMBER OF WAYS TO REFER TO A JOB IN THE SHELL.  THE CHARAC‐
       TER % INTRODUCES A JOB SPECIFICATION (JOBSPEC).  JOB NUMBER  N  MAY  BE
       REFERRED TO AS %N.  A JOB MAY ALSO BE REFERRED TO USING A PREFIX OF THE
       NAME USED TO START IT, OR USING A SUBSTRING THAT APPEARS IN ITS COMMAND
       LINE.   FOR  EXAMPLE,  %CE  REFERS  TO  A  STOPPED CE JOB.  IF A PREFIX
       MATCHES MORE THAN ONE JOB, BASH REPORTS AN ERROR.  USING %?CE,  ON  THE
       OTHER  HAND,  REFERS TO ANY JOB CONTAINING THE STRING CE IN ITS COMMAND
       LINE.  IF THE SUBSTRING MATCHES MORE THAN  ONE  JOB,  BASH  REPORTS  AN
       ERROR.   THE  SYMBOLS %% AND %+ REFER TO THE SHELL'S NOTION OF THE CUR‐
       RENT JOB, WHICH IS THE LAST JOB STOPPED WHILE IT WAS IN THE  FOREGROUND
       OR STARTED IN THE BACKGROUND.  THE PREVIOUS JOB MAY BE REFERENCED USING
       %-.  IF THERE IS ONLY A SINGLE JOB, %+ AND %- CAN BOTH BE USED TO REFER
       TO  THAT  JOB.   IN  OUTPUT PERTAINING TO JOBS (E.G., THE OUTPUT OF THE
       JOBS COMMAND), THE CURRENT JOB IS ALWAYS FLAGGED WITH A +, AND THE PRE‐
       VIOUS  JOB  WITH  A -.  A SINGLE % (WITH NO ACCOMPANYING JOB SPECIFICA‐
       TION) ALSO REFERS TO THE CURRENT JOB.

       SIMPLY NAMING A JOB CAN BE USED TO BRING IT INTO THE FOREGROUND: %1  IS
       A  SYNONYM  FOR  ``FG %1'', BRINGING JOB 1 FROM THE BACKGROUND INTO THE
       FOREGROUND.  SIMILARLY, ``%1 &''  RESUMES  JOB  1  IN  THE  BACKGROUND,
       EQUIVALENT TO ``BG %1''.

       THE  SHELL  LEARNS IMMEDIATELY WHENEVER A JOB CHANGES STATE.  NORMALLY,
       BASH WAITS UNTIL IT IS ABOUT TO PRINT A PROMPT BEFORE REPORTING CHANGES
       IN  A  JOB'S STATUS SO AS TO NOT INTERRUPT ANY OTHER OUTPUT.  IF THE -B
       OPTION TO THE SET BUILTIN COMMAND IS ENABLED, BASH REPORTS SUCH CHANGES
       IMMEDIATELY.   ANY  TRAP  ON  SIGCHLD  IS  EXECUTED FOR EACH CHILD THAT
       EXITS.

       IF AN ATTEMPT TO EXIT BASH IS MADE WHILE JOBS ARE STOPPED (OR,  IF  THE
       CHECKJOBS  SHELL  OPTION HAS BEEN ENABLED USING THE SHOPT BUILTIN, RUN‐
       NING), THE SHELL PRINTS A WARNING MESSAGE, AND, IF THE CHECKJOBS OPTION
       IS  ENABLED,  LISTS  THE JOBS AND THEIR STATUSES.  THE JOBS COMMAND MAY
       THEN BE USED TO INSPECT THEIR STATUS.  IF A SECOND ATTEMPT TO  EXIT  IS
       MADE  WITHOUT  AN INTERVENING COMMAND, THE SHELL DOES NOT PRINT ANOTHER
       WARNING, AND ANY STOPPED JOBS ARE TERMINATED.

PROMPTING
       WHEN EXECUTING INTERACTIVELY, BASH DISPLAYS THE PRIMARY PROMPT PS1 WHEN
       IT  IS  READY  TO  READ A COMMAND, AND THE SECONDARY PROMPT PS2 WHEN IT
       NEEDS MORE INPUT TO COMPLETE  A  COMMAND.   BASH  ALLOWS  THESE  PROMPT
       STRINGS  TO  BE  CUSTOMIZED  BY INSERTING A NUMBER OF BACKSLASH-ESCAPED
       SPECIAL CHARACTERS THAT ARE DECODED AS FOLLOWS:
              \A     AN ASCII BELL CHARACTER (07)
              \D     THE DATE IN "WEEKDAY MONTH DATE" FORMAT (E.G.,  "TUE  MAY
                     26")
              \D{FORMAT}
                     THE  FORMAT  IS  PASSED  TO STRFTIME(3) AND THE RESULT IS
                     INSERTED INTO THE PROMPT STRING; AN EMPTY FORMAT  RESULTS
                     IN A LOCALE-SPECIFIC TIME REPRESENTATION.  THE BRACES ARE
                     REQUIRED
              \E     AN ASCII ESCAPE CHARACTER (033)
              \H     THE HOSTNAME UP TO THE FIRST `.'
              \H     THE HOSTNAME
              \J     THE NUMBER OF JOBS CURRENTLY MANAGED BY THE SHELL
              \L     THE BASENAME OF THE SHELL'S TERMINAL DEVICE NAME
              \N     NEWLINE
              \R     CARRIAGE RETURN
              \S     THE NAME OF THE SHELL, THE BASENAME OF  $0  (THE  PORTION
                     FOLLOWING THE FINAL SLASH)
              \T     THE CURRENT TIME IN 24-HOUR HH:MM:SS FORMAT
              \T     THE CURRENT TIME IN 12-HOUR HH:MM:SS FORMAT
              \@     THE CURRENT TIME IN 12-HOUR AM/PM FORMAT
              \A     THE CURRENT TIME IN 24-HOUR HH:MM FORMAT
              \U     THE USERNAME OF THE CURRENT USER
              \V     THE VERSION OF BASH (E.G., 2.00)
              \V     THE RELEASE OF BASH, VERSION + PATCH LEVEL (E.G., 2.00.0)
              \W     THE  CURRENT  WORKING  DIRECTORY,  WITH $HOME ABBREVIATED
                     WITH A TILDE (USES THE VALUE OF THE PROMPT_DIRTRIM  VARI‐
                     ABLE)
              \W     THE BASENAME OF THE CURRENT WORKING DIRECTORY, WITH $HOME
                     ABBREVIATED WITH A TILDE
              \!     THE HISTORY NUMBER OF THIS COMMAND
              \#     THE COMMAND NUMBER OF THIS COMMAND
              \$     IF THE EFFECTIVE UID IS 0, A #, OTHERWISE A $
              \NNN   THE CHARACTER CORRESPONDING TO THE OCTAL NUMBER NNN
              \\     A BACKSLASH
              \[     BEGIN A SEQUENCE OF NON-PRINTING CHARACTERS, WHICH  COULD
                     BE  USED  TO  EMBED  A TERMINAL CONTROL SEQUENCE INTO THE
                     PROMPT
              \]     END A SEQUENCE OF NON-PRINTING CHARACTERS

       THE COMMAND NUMBER AND THE HISTORY NUMBER ARE  USUALLY  DIFFERENT:  THE
       HISTORY  NUMBER OF A COMMAND IS ITS POSITION IN THE HISTORY LIST, WHICH
       MAY INCLUDE COMMANDS  RESTORED  FROM  THE  HISTORY  FILE  (SEE  HISTORY
       BELOW),  WHILE  THE  COMMAND  NUMBER IS THE POSITION IN THE SEQUENCE OF
       COMMANDS EXECUTED DURING THE CURRENT SHELL SESSION.  AFTER  THE  STRING
       IS  DECODED,  IT IS EXPANDED VIA PARAMETER EXPANSION, COMMAND SUBSTITU‐
       TION, ARITHMETIC EXPANSION, AND QUOTE REMOVAL, SUBJECT TO THE VALUE  OF
       THE  PROMPTVARS  SHELL OPTION (SEE THE DESCRIPTION OF THE SHOPT COMMAND
       UNDER SHELL BUILTIN COMMANDS BELOW).

READLINE
       THIS IS THE LIBRARY THAT HANDLES READING INPUT WHEN USING  AN  INTERAC‐
       TIVE SHELL, UNLESS THE --NOEDITING OPTION IS GIVEN AT SHELL INVOCATION.
       LINE EDITING IS ALSO USED WHEN USING THE -E OPTION TO THE READ BUILTIN.
       BY DEFAULT, THE LINE EDITING COMMANDS ARE SIMILAR TO THOSE OF EMACS.  A
       VI-STYLE LINE EDITING INTERFACE IS ALSO AVAILABLE.  LINE EDITING CAN BE
       ENABLED  AT  ANY  TIME  USING  THE -O EMACS OR -O VI OPTIONS TO THE SET
       BUILTIN (SEE SHELL BUILTIN COMMANDS BELOW).  TO TURN OFF  LINE  EDITING
       AFTER  THE  SHELL  IS RUNNING, USE THE +O EMACS OR +O VI OPTIONS TO THE
       SET BUILTIN.

   READLINE NOTATION
       IN THIS SECTION, THE EMACS-STYLE NOTATION IS USED TO DENOTE KEYSTROKES.
       CONTROL  KEYS  ARE  DENOTED BY C-KEY, E.G., C-N MEANS CONTROL-N.  SIMI‐
       LARLY, META KEYS ARE DENOTED BY M-KEY, SO M-X MEANS META-X.   (ON  KEY‐
       BOARDS  WITHOUT A META KEY, M-X MEANS ESC X, I.E., PRESS THE ESCAPE KEY
       THEN THE X KEY.  THIS MAKES ESC THE META PREFIX.  THE COMBINATION M-C-X
       MEANS  ESC-CONTROL-X, OR PRESS THE ESCAPE KEY THEN HOLD THE CONTROL KEY
       WHILE PRESSING THE X KEY.)

       READLINE COMMANDS MAY BE GIVEN NUMERIC ARGUMENTS, WHICH NORMALLY ACT AS
       A  REPEAT  COUNT.   SOMETIMES,  HOWEVER, IT IS THE SIGN OF THE ARGUMENT
       THAT IS SIGNIFICANT.  PASSING A NEGATIVE ARGUMENT  TO  A  COMMAND  THAT
       ACTS  IN THE FORWARD DIRECTION (E.G., KILL-LINE) CAUSES THAT COMMAND TO
       ACT IN A BACKWARD DIRECTION.  COMMANDS WHOSE  BEHAVIOR  WITH  ARGUMENTS
       DEVIATES FROM THIS ARE NOTED BELOW.

       WHEN  A COMMAND IS DESCRIBED AS KILLING TEXT, THE TEXT DELETED IS SAVED
       FOR POSSIBLE FUTURE RETRIEVAL (YANKING).  THE KILLED TEXT IS SAVED IN A
       KILL RING.  CONSECUTIVE KILLS CAUSE THE TEXT TO BE ACCUMULATED INTO ONE
       UNIT, WHICH CAN BE YANKED ALL AT ONCE.  COMMANDS WHICH DO NOT KILL TEXT
       SEPARATE THE CHUNKS OF TEXT ON THE KILL RING.

   READLINE INITIALIZATION
       READLINE  IS  CUSTOMIZED  BY PUTTING COMMANDS IN AN INITIALIZATION FILE
       (THE INPUTRC FILE).  THE NAME OF THIS FILE IS TAKEN FROM THE  VALUE  OF
       THE  INPUTRC  VARIABLE.   IF  THAT  VARIABLE  IS  UNSET, THE DEFAULT IS
       ~/.INPUTRC.  WHEN A PROGRAM WHICH USES THE READLINE LIBRARY STARTS  UP,
       THE INITIALIZATION FILE IS READ, AND THE KEY BINDINGS AND VARIABLES ARE
       SET.  THERE ARE ONLY A FEW BASIC CONSTRUCTS  ALLOWED  IN  THE  READLINE
       INITIALIZATION  FILE.  BLANK LINES ARE IGNORED.  LINES BEGINNING WITH A
       # ARE COMMENTS.  LINES BEGINNING WITH A  $  INDICATE  CONDITIONAL  CON‐
       STRUCTS.  OTHER LINES DENOTE KEY BINDINGS AND VARIABLE SETTINGS.

       THE  DEFAULT  KEY-BINDINGS  MAY BE CHANGED WITH AN INPUTRC FILE.  OTHER
       PROGRAMS THAT USE THIS LIBRARY MAY ADD THEIR OWN COMMANDS AND BINDINGS.

       FOR EXAMPLE, PLACING

              M-CONTROL-U: UNIVERSAL-ARGUMENT
       OR
              C-META-U: UNIVERSAL-ARGUMENT
       INTO THE INPUTRC WOULD MAKE M-C-U EXECUTE THE READLINE COMMAND  UNIVER‐
       SAL-ARGUMENT.

       THE  FOLLOWING  SYMBOLIC  CHARACTER  NAMES ARE RECOGNIZED: RUBOUT, DEL,
       ESC, LFD, NEWLINE, RET, RETURN, SPC, SPACE, AND TAB.

       IN ADDITION TO COMMAND NAMES, READLINE ALLOWS KEYS TO  BE  BOUND  TO  A
       STRING THAT IS INSERTED WHEN THE KEY IS PRESSED (A MACRO).

   READLINE KEY BINDINGS
       THE  SYNTAX FOR CONTROLLING KEY BINDINGS IN THE INPUTRC FILE IS SIMPLE.
       ALL THAT IS REQUIRED IS THE NAME OF THE COMMAND OR THE TEXT OF A  MACRO
       AND  A KEY SEQUENCE TO WHICH IT SHOULD BE BOUND. THE NAME MAY BE SPECI‐
       FIED IN ONE OF TWO WAYS: AS A SYMBOLIC KEY NAME, POSSIBLY WITH META- OR
       CONTROL- PREFIXES, OR AS A KEY SEQUENCE.

       WHEN USING THE FORM KEYNAME:FUNCTION-NAME OR MACRO, KEYNAME IS THE NAME
       OF A KEY SPELLED OUT IN ENGLISH.  FOR EXAMPLE:

              CONTROL-U: UNIVERSAL-ARGUMENT
              META-RUBOUT: BACKWARD-KILL-WORD
              CONTROL-O: "> OUTPUT"

       IN THE ABOVE EXAMPLE, C-U IS BOUND TO THE FUNCTION  UNIVERSAL-ARGUMENT,
       M-DEL  IS BOUND TO THE FUNCTION BACKWARD-KILL-WORD, AND C-O IS BOUND TO
       RUN THE MACRO EXPRESSED ON THE RIGHT HAND SIDE (THAT IS, TO INSERT  THE
       TEXT ``> OUTPUT'' INTO THE LINE).

       IN  THE  SECOND  FORM,  "KEYSEQ":FUNCTION-NAME OR MACRO, KEYSEQ DIFFERS
       FROM KEYNAME ABOVE IN THAT STRINGS DENOTING AN ENTIRE KEY SEQUENCE  MAY
       BE  SPECIFIED  BY  PLACING THE SEQUENCE WITHIN DOUBLE QUOTES.  SOME GNU
       EMACS STYLE KEY ESCAPES CAN BE USED, AS IN THE FOLLOWING  EXAMPLE,  BUT
       THE SYMBOLIC CHARACTER NAMES ARE NOT RECOGNIZED.

              "\C-U": UNIVERSAL-ARGUMENT
              "\C-X\C-R": RE-READ-INIT-FILE
              "\E[11~": "FUNCTION KEY 1"

       IN THIS EXAMPLE, C-U IS AGAIN BOUND TO THE FUNCTION UNIVERSAL-ARGUMENT.
       C-X C-R IS BOUND TO THE FUNCTION RE-READ-INIT-FILE, AND ESC [ 1 1 ~  IS
       BOUND TO INSERT THE TEXT ``FUNCTION KEY 1''.

       THE FULL SET OF GNU EMACS STYLE ESCAPE SEQUENCES IS
              \C-    CONTROL PREFIX
              \M-    META PREFIX
              \E     AN ESCAPE CHARACTER
              \\     BACKSLASH
              \"     LITERAL "
              \'     LITERAL '

       IN  ADDITION  TO  THE GNU EMACS STYLE ESCAPE SEQUENCES, A SECOND SET OF
       BACKSLASH ESCAPES IS AVAILABLE:
              \A     ALERT (BELL)
              \B     BACKSPACE
              \D     DELETE
              \F     FORM FEED
              \N     NEWLINE
              \R     CARRIAGE RETURN
              \T     HORIZONTAL TAB
              \V     VERTICAL TAB
              \NNN   THE EIGHT-BIT CHARACTER WHOSE VALUE IS  THE  OCTAL  VALUE
                     NNN (ONE TO THREE DIGITS)
              \XHH   THE  EIGHT-BIT  CHARACTER  WHOSE VALUE IS THE HEXADECIMAL
                     VALUE HH (ONE OR TWO HEX DIGITS)

       WHEN ENTERING THE TEXT OF A MACRO, SINGLE OR DOUBLE QUOTES MUST BE USED
       TO INDICATE A MACRO DEFINITION.  UNQUOTED TEXT IS ASSUMED TO BE A FUNC‐
       TION NAME.  IN THE MACRO BODY, THE BACKSLASH  ESCAPES  DESCRIBED  ABOVE
       ARE  EXPANDED.   BACKSLASH  WILL QUOTE ANY OTHER CHARACTER IN THE MACRO
       TEXT, INCLUDING " AND '.

       BASH ALLOWS THE CURRENT READLINE KEY BINDINGS TO BE DISPLAYED OR  MODI‐
       FIED  WITH  THE BIND BUILTIN COMMAND.  THE EDITING MODE MAY BE SWITCHED
       DURING INTERACTIVE USE BY USING THE -O OPTION TO THE SET  BUILTIN  COM‐
       MAND (SEE SHELL BUILTIN COMMANDS BELOW).

   READLINE VARIABLES
       READLINE HAS VARIABLES THAT CAN BE USED TO FURTHER CUSTOMIZE ITS BEHAV‐
       IOR.  A VARIABLE MAY BE SET IN THE INPUTRC FILE WITH A STATEMENT OF THE
       FORM

              SET VARIABLE-NAME VALUE

       EXCEPT  WHERE  NOTED,  READLINE VARIABLES CAN TAKE THE VALUES ON OR OFF
       (WITHOUT REGARD TO CASE).  UNRECOGNIZED  VARIABLE  NAMES  ARE  IGNORED.
       WHEN  A VARIABLE VALUE IS READ, EMPTY OR NULL VALUES, "ON" (CASE-INSEN‐
       SITIVE), AND "1" ARE EQUIVALENT TO ON.  ALL OTHER VALUES ARE EQUIVALENT
       TO OFF.  THE VARIABLES AND THEIR DEFAULT VALUES ARE:

       BELL-STYLE (AUDIBLE)
              CONTROLS  WHAT  HAPPENS WHEN READLINE WANTS TO RING THE TERMINAL
              BELL.  IF SET TO NONE, READLINE NEVER RINGS THE BELL.  IF SET TO
              VISIBLE,  READLINE  USES A VISIBLE BELL IF ONE IS AVAILABLE.  IF
              SET TO AUDIBLE, READLINE ATTEMPTS TO RING THE TERMINAL'S BELL.
       BIND-TTY-SPECIAL-CHARS (ON)
              IF SET TO ON, READLINE ATTEMPTS TO BIND THE  CONTROL  CHARACTERS
              TREATED SPECIALLY BY THE KERNEL'S TERMINAL DRIVER TO THEIR READ‐
              LINE EQUIVALENTS.
       COLORED-STATS (OFF)
              IF SET TO ON, READLINE DISPLAYS POSSIBLE COMPLETIONS USING  DIF‐
              FERENT  COLORS  TO  INDICATE THEIR FILE TYPE.  THE COLOR DEFINI‐
              TIONS ARE TAKEN FROM THE  VALUE  OF  THE  LS_COLORS  ENVIRONMENT
              VARIABLE.
       COMMENT-BEGIN (``#'')
              THE  STRING  THAT  IS  INSERTED WHEN THE READLINE INSERT-COMMENT
              COMMAND IS EXECUTED.  THIS COMMAND IS BOUND TO M-# IN EMACS MODE
              AND TO # IN VI COMMAND MODE.
       COMPLETION-IGNORE-CASE (OFF)
              IF SET TO ON, READLINE PERFORMS FILENAME MATCHING AND COMPLETION
              IN A CASE-INSENSITIVE FASHION.
       COMPLETION-PREFIX-DISPLAY-LENGTH (0)
              THE LENGTH IN CHARACTERS OF THE COMMON PREFIX OF A LIST OF  POS‐
              SIBLE  COMPLETIONS THAT IS DISPLAYED WITHOUT MODIFICATION.  WHEN
              SET TO A VALUE GREATER THAN ZERO, COMMON  PREFIXES  LONGER  THAN
              THIS  VALUE ARE REPLACED WITH AN ELLIPSIS WHEN DISPLAYING POSSI‐
              BLE COMPLETIONS.
       COMPLETION-QUERY-ITEMS (100)
              THIS DETERMINES WHEN THE USER IS QUERIED ABOUT VIEWING THE  NUM‐
              BER  OF  POSSIBLE  COMPLETIONS GENERATED BY THE POSSIBLE-COMPLE‐
              TIONS COMMAND.  IT MAY BE SET TO ANY INTEGER VALUE GREATER  THAN
              OR  EQUAL  TO  ZERO.   IF  THE NUMBER OF POSSIBLE COMPLETIONS IS
              GREATER THAN OR EQUAL TO THE VALUE OF THIS VARIABLE, THE USER IS
              ASKED  WHETHER OR NOT HE WISHES TO VIEW THEM; OTHERWISE THEY ARE
              SIMPLY LISTED ON THE TERMINAL.
       CONVERT-META (ON)
              IF SET TO ON, READLINE WILL CONVERT CHARACTERS WITH  THE  EIGHTH
              BIT SET TO AN ASCII KEY SEQUENCE BY STRIPPING THE EIGHTH BIT AND
              PREFIXING AN ESCAPE CHARACTER (IN EFFECT, USING  ESCAPE  AS  THE
              META PREFIX).
       DISABLE-COMPLETION (OFF)
              IF SET TO ON, READLINE WILL INHIBIT WORD COMPLETION.  COMPLETION
              CHARACTERS WILL BE INSERTED INTO THE LINE AS IF  THEY  HAD  BEEN
              MAPPED TO SELF-INSERT.
       EDITING-MODE (EMACS)
              CONTROLS WHETHER READLINE BEGINS WITH A SET OF KEY BINDINGS SIM‐
              ILAR TO EMACS OR VI.  EDITING-MODE CAN BE SET TO EITHER EMACS OR
              VI.
       ECHO-CONTROL-CHARACTERS (ON)
              WHEN  SET TO ON, ON OPERATING SYSTEMS THAT INDICATE THEY SUPPORT
              IT, READLINE ECHOES A CHARACTER CORRESPONDING TO A SIGNAL GENER‐
              ATED FROM THE KEYBOARD.
       ENABLE-KEYPAD (OFF)
              WHEN SET TO ON, READLINE WILL TRY TO ENABLE THE APPLICATION KEY‐
              PAD WHEN IT IS CALLED.  SOME SYSTEMS NEED  THIS  TO  ENABLE  THE
              ARROW KEYS.
       ENABLE-META-KEY (ON)
              WHEN  SET  TO  ON, READLINE WILL TRY TO ENABLE ANY META MODIFIER
              KEY THE TERMINAL CLAIMS TO SUPPORT WHEN IT IS CALLED.   ON  MANY
              TERMINALS, THE META KEY IS USED TO SEND EIGHT-BIT CHARACTERS.
       EXPAND-TILDE (OFF)
              IF  SET  TO  ON,  TILDE  EXPANSION  IS  PERFORMED  WHEN READLINE
              ATTEMPTS WORD COMPLETION.
       HISTORY-PRESERVE-POINT (OFF)
              IF SET TO ON, THE HISTORY CODE ATTEMPTS TO PLACE  POINT  AT  THE
              SAME  LOCATION ON EACH HISTORY LINE RETRIEVED WITH PREVIOUS-HIS‐
              TORY OR NEXT-HISTORY.
       HISTORY-SIZE (0)
              SET THE MAXIMUM NUMBER OF HISTORY ENTRIES SAVED IN  THE  HISTORY
              LIST.   IF SET TO ZERO, ANY EXISTING HISTORY ENTRIES ARE DELETED
              AND NO NEW ENTRIES ARE SAVED.  IF SET TO A VALUE LESS THAN ZERO,
              THE  NUMBER  OF HISTORY ENTRIES IS NOT LIMITED.  BY DEFAULT, THE
              NUMBER OF HISTORY ENTRIES IS NOT LIMITED.
       HORIZONTAL-SCROLL-MODE (OFF)
              WHEN SET TO ON, MAKES READLINE USE A SINGLE  LINE  FOR  DISPLAY,
              SCROLLING THE INPUT HORIZONTALLY ON A SINGLE SCREEN LINE WHEN IT
              BECOMES LONGER THAN THE SCREEN WIDTH RATHER THAN WRAPPING  TO  A
              NEW LINE.
       INPUT-META (OFF)
              IF  SET TO ON, READLINE WILL ENABLE EIGHT-BIT INPUT (THAT IS, IT
              WILL NOT STRIP THE HIGH  BIT  FROM  THE  CHARACTERS  IT  READS),
              REGARDLESS OF WHAT THE TERMINAL CLAIMS IT CAN SUPPORT.  THE NAME
              META-FLAG IS A SYNONYM FOR THIS VARIABLE.
       ISEARCH-TERMINATORS (``C-[C-J'')
              THE STRING OF CHARACTERS THAT SHOULD  TERMINATE  AN  INCREMENTAL
              SEARCH  WITHOUT  SUBSEQUENTLY  EXECUTING THE CHARACTER AS A COM‐
              MAND.  IF THIS VARIABLE HAS NOT BEEN GIVEN A VALUE, THE  CHARAC‐
              TERS ESC AND C-J WILL TERMINATE AN INCREMENTAL SEARCH.
       KEYMAP (EMACS)
              SET  THE CURRENT READLINE KEYMAP.  THE SET OF VALID KEYMAP NAMES
              IS EMACS, EMACS-STANDARD, EMACS-META,  EMACS-CTLX,  VI,  VI-COM‐
              MAND,  AND  VI-INSERT.  VI IS EQUIVALENT TO VI-COMMAND; EMACS IS
              EQUIVALENT TO EMACS-STANDARD.  THE DEFAULT VALUE IS  EMACS;  THE
              VALUE OF EDITING-MODE ALSO AFFECTS THE DEFAULT KEYMAP.
       KEYSEQ-TIMEOUT (500)
              SPECIFIES  THE  DURATION READLINE WILL WAIT FOR A CHARACTER WHEN
              READING AN AMBIGUOUS KEY SEQUENCE (ONE THAT CAN FORM A  COMPLETE
              KEY SEQUENCE USING THE INPUT READ SO FAR, OR CAN TAKE ADDITIONAL
              INPUT TO COMPLETE A  LONGER  KEY  SEQUENCE).   IF  NO  INPUT  IS
              RECEIVED  WITHIN  THE TIMEOUT, READLINE WILL USE THE SHORTER BUT
              COMPLETE KEY SEQUENCE.  THE VALUE IS SPECIFIED IN  MILLISECONDS,
              SO  A VALUE OF 1000 MEANS THAT READLINE WILL WAIT ONE SECOND FOR
              ADDITIONAL INPUT.  IF THIS VARIABLE IS SET TO A VALUE LESS  THAN
              OR  EQUAL TO ZERO, OR TO A NON-NUMERIC VALUE, READLINE WILL WAIT
              UNTIL ANOTHER KEY IS PRESSED TO DECIDE  WHICH  KEY  SEQUENCE  TO
              COMPLETE.
       MARK-DIRECTORIES (ON)
              IF SET TO ON, COMPLETED DIRECTORY NAMES HAVE A SLASH APPENDED.
       MARK-MODIFIED-LINES (OFF)
              IF  SET  TO  ON,  HISTORY LINES THAT HAVE BEEN MODIFIED ARE DIS‐
              PLAYED WITH A PRECEDING ASTERISK (*).
       MARK-SYMLINKED-DIRECTORIES (OFF)
              IF SET TO ON, COMPLETED NAMES WHICH ARE SYMBOLIC LINKS TO DIREC‐
              TORIES   HAVE   A  SLASH  APPENDED  (SUBJECT  TO  THE  VALUE  OF
              MARK-DIRECTORIES).
       MATCH-HIDDEN-FILES (ON)
              THIS VARIABLE, WHEN SET TO ON, CAUSES READLINE  TO  MATCH  FILES
              WHOSE  NAMES  BEGIN  WITH  A  `.' (HIDDEN FILES) WHEN PERFORMING
              FILENAME COMPLETION.  IF SET TO OFF, THE  LEADING  `.'  MUST  BE
              SUPPLIED BY THE USER IN THE FILENAME TO BE COMPLETED.
       MENU-COMPLETE-DISPLAY-PREFIX (OFF)
              IF  SET TO ON, MENU COMPLETION DISPLAYS THE COMMON PREFIX OF THE
              LIST OF POSSIBLE COMPLETIONS (WHICH MAY BE EMPTY) BEFORE CYCLING
              THROUGH THE LIST.
       OUTPUT-META (OFF)
              IF  SET  TO ON, READLINE WILL DISPLAY CHARACTERS WITH THE EIGHTH
              BIT SET DIRECTLY RATHER THAN AS A META-PREFIXED ESCAPE SEQUENCE.
       PAGE-COMPLETIONS (ON)
              IF SET TO ON, READLINE USES AN INTERNAL MORE-LIKE PAGER TO  DIS‐
              PLAY A SCREENFUL OF POSSIBLE COMPLETIONS AT A TIME.
       PRINT-COMPLETIONS-HORIZONTALLY (OFF)
              IF  SET  TO  ON,  READLINE WILL DISPLAY COMPLETIONS WITH MATCHES
              SORTED HORIZONTALLY IN ALPHABETICAL ORDER, RATHER THAN DOWN  THE
              SCREEN.
       REVERT-ALL-AT-NEWLINE (OFF)
              IF  SET  TO  ON, READLINE WILL UNDO ALL CHANGES TO HISTORY LINES
              BEFORE RETURNING WHEN ACCEPT-LINE IS EXECUTED.  BY DEFAULT, HIS‐
              TORY  LINES  MAY  BE  MODIFIED  AND RETAIN INDIVIDUAL UNDO LISTS
              ACROSS CALLS TO READLINE.
       SHOW-ALL-IF-AMBIGUOUS (OFF)
              THIS ALTERS THE DEFAULT BEHAVIOR OF  THE  COMPLETION  FUNCTIONS.
              IF SET TO ON, WORDS WHICH HAVE MORE THAN ONE POSSIBLE COMPLETION
              CAUSE THE MATCHES TO BE LISTED IMMEDIATELY  INSTEAD  OF  RINGING
              THE BELL.
       SHOW-ALL-IF-UNMODIFIED (OFF)
              THIS  ALTERS THE DEFAULT BEHAVIOR OF THE COMPLETION FUNCTIONS IN
              A FASHION SIMILAR TO SHOW-ALL-IF-AMBIGUOUS.  IF SET TO ON, WORDS
              WHICH  HAVE MORE THAN ONE POSSIBLE COMPLETION WITHOUT ANY POSSI‐
              BLE PARTIAL COMPLETION (THE POSSIBLE COMPLETIONS DON'T  SHARE  A
              COMMON  PREFIX)  CAUSE  THE  MATCHES  TO  BE  LISTED IMMEDIATELY
              INSTEAD OF RINGING THE BELL.
       SHOW-MODE-IN-PROMPT (OFF)
              IF SET TO ON, ADD A CHARACTER TO THE  BEGINNING  OF  THE  PROMPT
              INDICATING  THE  EDITING  MODE:  EMACS (@), VI COMMAND (:) OR VI
              INSERTION (+).
       SKIP-COMPLETED-TEXT (OFF)
              IF SET TO ON, THIS ALTERS THE DEFAULT COMPLETION  BEHAVIOR  WHEN
              INSERTING  A  SINGLE MATCH INTO THE LINE.  IT'S ONLY ACTIVE WHEN
              PERFORMING COMPLETION IN THE MIDDLE  OF  A  WORD.   IF  ENABLED,
              READLINE  DOES  NOT  INSERT  CHARACTERS FROM THE COMPLETION THAT
              MATCH CHARACTERS AFTER POINT IN THE  WORD  BEING  COMPLETED,  SO
              PORTIONS OF THE WORD FOLLOWING THE CURSOR ARE NOT DUPLICATED.
       VISIBLE-STATS (OFF)
              IF  SET TO ON, A CHARACTER DENOTING A FILE'S TYPE AS REPORTED BY
              STAT(2) IS APPENDED TO THE FILENAME WHEN LISTING  POSSIBLE  COM‐
              PLETIONS.

   READLINE CONDITIONAL CONSTRUCTS
       READLINE  IMPLEMENTS  A  FACILITY  SIMILAR IN SPIRIT TO THE CONDITIONAL
       COMPILATION FEATURES OF THE C PREPROCESSOR WHICH  ALLOWS  KEY  BINDINGS
       AND  VARIABLE  SETTINGS  TO BE PERFORMED AS THE RESULT OF TESTS.  THERE
       ARE FOUR PARSER DIRECTIVES USED.

       $IF    THE $IF CONSTRUCT ALLOWS BINDINGS TO BE MADE BASED ON THE  EDIT‐
              ING  MODE,  THE  TERMINAL  BEING  USED, OR THE APPLICATION USING
              READLINE.  THE TEXT OF THE TEST EXTENDS TO THE END OF THE  LINE;
              NO CHARACTERS ARE REQUIRED TO ISOLATE IT.

              MODE   THE  MODE=  FORM  OF  THE  $IF  DIRECTIVE IS USED TO TEST
                     WHETHER READLINE IS IN EMACS OR VI  MODE.   THIS  MAY  BE
                     USED  IN  CONJUNCTION  WITH  THE  SET KEYMAP COMMAND, FOR
                     INSTANCE, TO  SET  BINDINGS  IN  THE  EMACS-STANDARD  AND
                     EMACS-CTLX  KEYMAPS  ONLY  IF READLINE IS STARTING OUT IN
                     EMACS MODE.

              TERM   THE TERM= FORM MAY BE USED TO  INCLUDE  TERMINAL-SPECIFIC
                     KEY BINDINGS, PERHAPS TO BIND THE KEY SEQUENCES OUTPUT BY
                     THE TERMINAL'S FUNCTION KEYS.  THE WORD ON THE RIGHT SIDE
                     OF THE = IS TESTED AGAINST THE BOTH FULL NAME OF THE TER‐
                     MINAL AND THE PORTION OF THE  TERMINAL  NAME  BEFORE  THE
                     FIRST  -.  THIS ALLOWS SUN TO MATCH BOTH SUN AND SUN-CMD,
                     FOR INSTANCE.

              APPLICATION
                     THE APPLICATION CONSTRUCT IS USED TO INCLUDE APPLICATION-
                     SPECIFIC  SETTINGS.   EACH  PROGRAM  USING  THE  READLINE
                     LIBRARY SETS THE APPLICATION NAME, AND AN  INITIALIZATION
                     FILE CAN TEST FOR A PARTICULAR VALUE.  THIS COULD BE USED
                     TO BIND KEY SEQUENCES TO FUNCTIONS USEFUL FOR A  SPECIFIC
                     PROGRAM.   FOR INSTANCE, THE FOLLOWING COMMAND ADDS A KEY
                     SEQUENCE THAT QUOTES THE  CURRENT  OR  PREVIOUS  WORD  IN
                     BASH:

                     $IF BASH
                     # QUOTE THE CURRENT OR PREVIOUS WORD
                     "\C-XQ": "\EB\"\EF\""
                     $ENDIF

       $ENDIF THIS COMMAND, AS SEEN IN THE PREVIOUS EXAMPLE, TERMINATES AN $IF
              COMMAND.

       $ELSE  COMMANDS IN THIS BRANCH OF THE $IF DIRECTIVE ARE EXECUTED IF THE
              TEST FAILS.

       $INCLUDE
              THIS  DIRECTIVE TAKES A SINGLE FILENAME AS AN ARGUMENT AND READS
              COMMANDS AND BINDINGS FROM THAT FILE.  FOR EXAMPLE, THE  FOLLOW‐
              ING DIRECTIVE WOULD READ /ETC/INPUTRC:

              $INCLUDE  /ETC/INPUTRC

   SEARCHING
       READLINE  PROVIDES  COMMANDS  FOR SEARCHING THROUGH THE COMMAND HISTORY
       (SEE HISTORY BELOW) FOR LINES CONTAINING A SPECIFIED STRING.  THERE ARE
       TWO SEARCH MODES: INCREMENTAL AND NON-INCREMENTAL.

       INCREMENTAL  SEARCHES  BEGIN  BEFORE  THE  USER HAS FINISHED TYPING THE
       SEARCH STRING.  AS EACH CHARACTER OF THE SEARCH STRING IS TYPED,  READ‐
       LINE DISPLAYS THE NEXT ENTRY FROM THE HISTORY MATCHING THE STRING TYPED
       SO FAR.  AN INCREMENTAL SEARCH REQUIRES  ONLY  AS  MANY  CHARACTERS  AS
       NEEDED  TO  FIND  THE DESIRED HISTORY ENTRY.  THE CHARACTERS PRESENT IN
       THE VALUE OF THE ISEARCH-TERMINATORS VARIABLE ARE USED TO TERMINATE  AN
       INCREMENTAL SEARCH.  IF THAT VARIABLE HAS NOT BEEN ASSIGNED A VALUE THE
       ESCAPE AND CONTROL-J CHARACTERS WILL TERMINATE AN  INCREMENTAL  SEARCH.
       CONTROL-G  WILL  ABORT  AN  INCREMENTAL SEARCH AND RESTORE THE ORIGINAL
       LINE.  WHEN THE SEARCH IS TERMINATED, THE HISTORY ENTRY CONTAINING  THE
       SEARCH STRING BECOMES THE CURRENT LINE.

       TO  FIND  OTHER MATCHING ENTRIES IN THE HISTORY LIST, TYPE CONTROL-S OR
       CONTROL-R AS APPROPRIATE.  THIS WILL SEARCH BACKWARD OR FORWARD IN  THE
       HISTORY  FOR  THE  NEXT  ENTRY MATCHING THE SEARCH STRING TYPED SO FAR.
       ANY OTHER KEY SEQUENCE BOUND TO A READLINE COMMAND WILL  TERMINATE  THE
       SEARCH  AND  EXECUTE THAT COMMAND.  FOR INSTANCE, A NEWLINE WILL TERMI‐
       NATE THE SEARCH AND ACCEPT THE LINE, THEREBY EXECUTING THE COMMAND FROM
       THE HISTORY LIST.

       READLINE REMEMBERS THE LAST INCREMENTAL SEARCH STRING.  IF TWO CONTROL-
       RS ARE TYPED WITHOUT ANY INTERVENING CHARACTERS DEFINING A  NEW  SEARCH
       STRING, ANY REMEMBERED SEARCH STRING IS USED.

       NON-INCREMENTAL  SEARCHES READ THE ENTIRE SEARCH STRING BEFORE STARTING
       TO SEARCH FOR MATCHING HISTORY LINES.  THE SEARCH STRING MAY  BE  TYPED
       BY THE USER OR BE PART OF THE CONTENTS OF THE CURRENT LINE.

   READLINE COMMAND NAMES
       THE  FOLLOWING  IS  A LIST OF THE NAMES OF THE COMMANDS AND THE DEFAULT
       KEY SEQUENCES TO WHICH THEY ARE BOUND.  COMMAND NAMES WITHOUT AN ACCOM‐
       PANYING KEY SEQUENCE ARE UNBOUND BY DEFAULT.  IN THE FOLLOWING DESCRIP‐
       TIONS, POINT REFERS TO THE CURRENT CURSOR POSITION, AND MARK REFERS  TO
       A  CURSOR POSITION SAVED BY THE SET-MARK COMMAND.  THE TEXT BETWEEN THE
       POINT AND MARK IS REFERRED TO AS THE REGION.

   COMMANDS FOR MOVING
       BEGINNING-OF-LINE (C-A)
              MOVE TO THE START OF THE CURRENT LINE.
       END-OF-LINE (C-E)
              MOVE TO THE END OF THE LINE.
       FORWARD-CHAR (C-F)
              MOVE FORWARD A CHARACTER.
       BACKWARD-CHAR (C-B)
              MOVE BACK A CHARACTER.
       FORWARD-WORD (M-F)
              MOVE FORWARD TO THE END OF THE NEXT WORD.  WORDS ARE COMPOSED OF
              ALPHANUMERIC CHARACTERS (LETTERS AND DIGITS).
       BACKWARD-WORD (M-B)
              MOVE  BACK  TO THE START OF THE CURRENT OR PREVIOUS WORD.  WORDS
              ARE COMPOSED OF ALPHANUMERIC CHARACTERS (LETTERS AND DIGITS).
       SHELL-FORWARD-WORD
              MOVE FORWARD TO THE END OF THE NEXT WORD.  WORDS  ARE  DELIMITED
              BY NON-QUOTED SHELL METACHARACTERS.
       SHELL-BACKWARD-WORD
              MOVE  BACK  TO THE START OF THE CURRENT OR PREVIOUS WORD.  WORDS
              ARE DELIMITED BY NON-QUOTED SHELL METACHARACTERS.
       CLEAR-SCREEN (C-L)
              CLEAR THE SCREEN LEAVING THE CURRENT LINE  AT  THE  TOP  OF  THE
              SCREEN.   WITH  AN  ARGUMENT,  REFRESH  THE CURRENT LINE WITHOUT
              CLEARING THE SCREEN.
       REDRAW-CURRENT-LINE
              REFRESH THE CURRENT LINE.

   COMMANDS FOR MANIPULATING THE HISTORY
       ACCEPT-LINE (NEWLINE, RETURN)
              ACCEPT THE LINE REGARDLESS OF WHERE THE CURSOR IS.  IF THIS LINE
              IS  NON-EMPTY, ADD IT TO THE HISTORY LIST ACCORDING TO THE STATE
              OF THE HISTCONTROL VARIABLE.  IF THE LINE IS A MODIFIED  HISTORY
              LINE, THEN RESTORE THE HISTORY LINE TO ITS ORIGINAL STATE.
       PREVIOUS-HISTORY (C-P)
              FETCH THE PREVIOUS COMMAND FROM THE HISTORY LIST, MOVING BACK IN
              THE LIST.
       NEXT-HISTORY (C-N)
              FETCH THE NEXT COMMAND FROM THE HISTORY LIST, MOVING FORWARD  IN
              THE LIST.
       BEGINNING-OF-HISTORY (M-<)
              MOVE TO THE FIRST LINE IN THE HISTORY.
       END-OF-HISTORY (M->)
              MOVE  TO  THE END OF THE INPUT HISTORY, I.E., THE LINE CURRENTLY
              BEING ENTERED.
       REVERSE-SEARCH-HISTORY (C-R)
              SEARCH BACKWARD STARTING AT THE CURRENT  LINE  AND  MOVING  `UP'
              THROUGH  THE  HISTORY  AS  NECESSARY.   THIS  IS  AN INCREMENTAL
              SEARCH.
       FORWARD-SEARCH-HISTORY (C-S)
              SEARCH FORWARD STARTING AT THE CURRENT LINE  AND  MOVING  `DOWN'
              THROUGH  THE  HISTORY  AS  NECESSARY.   THIS  IS  AN INCREMENTAL
              SEARCH.
       NON-INCREMENTAL-REVERSE-SEARCH-HISTORY (M-P)
              SEARCH BACKWARD THROUGH THE HISTORY STARTING AT THE CURRENT LINE
              USING  A  NON-INCREMENTAL  SEARCH  FOR  A STRING SUPPLIED BY THE
              USER.
       NON-INCREMENTAL-FORWARD-SEARCH-HISTORY (M-N)
              SEARCH FORWARD  THROUGH  THE  HISTORY  USING  A  NON-INCREMENTAL
              SEARCH FOR A STRING SUPPLIED BY THE USER.
       HISTORY-SEARCH-FORWARD
              SEARCH  FORWARD THROUGH THE HISTORY FOR THE STRING OF CHARACTERS
              BETWEEN THE START OF THE CURRENT LINE AND THE POINT.  THIS IS  A
              NON-INCREMENTAL SEARCH.
       HISTORY-SEARCH-BACKWARD
              SEARCH BACKWARD THROUGH THE HISTORY FOR THE STRING OF CHARACTERS
              BETWEEN THE START OF THE CURRENT LINE AND THE POINT.  THIS IS  A
              NON-INCREMENTAL SEARCH.
       YANK-NTH-ARG (M-C-Y)
              INSERT  THE  FIRST ARGUMENT TO THE PREVIOUS COMMAND (USUALLY THE
              SECOND WORD ON THE PREVIOUS LINE) AT POINT.  WITH AN ARGUMENT N,
              INSERT  THE NTH WORD FROM THE PREVIOUS COMMAND (THE WORDS IN THE
              PREVIOUS COMMAND  BEGIN  WITH  WORD  0).   A  NEGATIVE  ARGUMENT
              INSERTS THE NTH WORD FROM THE END OF THE PREVIOUS COMMAND.  ONCE
              THE ARGUMENT N IS COMPUTED, THE ARGUMENT IS EXTRACTED AS IF  THE
              "!N" HISTORY EXPANSION HAD BEEN SPECIFIED.
       YANK-LAST-ARG (M-., M-_)
              INSERT  THE LAST ARGUMENT TO THE PREVIOUS COMMAND (THE LAST WORD
              OF THE PREVIOUS HISTORY ENTRY).  WITH A NUMERIC ARGUMENT, BEHAVE
              EXACTLY  LIKE  YANK-NTH-ARG.   SUCCESSIVE CALLS TO YANK-LAST-ARG
              MOVE BACK THROUGH THE HISTORY LIST, INSERTING THE LAST WORD  (OR
              THE  WORD  SPECIFIED  BY THE ARGUMENT TO THE FIRST CALL) OF EACH
              LINE IN TURN.  ANY NUMERIC ARGUMENT SUPPLIED TO THESE SUCCESSIVE
              CALLS  DETERMINES  THE DIRECTION TO MOVE THROUGH THE HISTORY.  A
              NEGATIVE ARGUMENT SWITCHES THE  DIRECTION  THROUGH  THE  HISTORY
              (BACK OR FORWARD).  THE HISTORY EXPANSION FACILITIES ARE USED TO
              EXTRACT THE LAST WORD, AS IF THE "!$" HISTORY EXPANSION HAD BEEN
              SPECIFIED.
       SHELL-EXPAND-LINE (M-C-E)
              EXPAND THE LINE AS THE SHELL DOES.  THIS PERFORMS ALIAS AND HIS‐
              TORY EXPANSION AS WELL AS ALL OF THE SHELL WORD EXPANSIONS.  SEE
              HISTORY EXPANSION BELOW FOR A DESCRIPTION OF HISTORY EXPANSION.
       HISTORY-EXPAND-LINE (M-^)
              PERFORM  HISTORY  EXPANSION  ON  THE  CURRENT LINE.  SEE HISTORY
              EXPANSION BELOW FOR A DESCRIPTION OF HISTORY EXPANSION.
       MAGIC-SPACE
              PERFORM HISTORY EXPANSION ON  THE  CURRENT  LINE  AND  INSERT  A
              SPACE.  SEE HISTORY EXPANSION BELOW FOR A DESCRIPTION OF HISTORY
              EXPANSION.
       ALIAS-EXPAND-LINE
              PERFORM ALIAS EXPANSION ON THE CURRENT LINE.  SEE ALIASES  ABOVE
              FOR A DESCRIPTION OF ALIAS EXPANSION.
       HISTORY-AND-ALIAS-EXPAND-LINE
              PERFORM HISTORY AND ALIAS EXPANSION ON THE CURRENT LINE.
       INSERT-LAST-ARGUMENT (M-., M-_)
              A SYNONYM FOR YANK-LAST-ARG.
       OPERATE-AND-GET-NEXT (C-O)
              ACCEPT  THE  CURRENT  LINE FOR EXECUTION AND FETCH THE NEXT LINE
              RELATIVE TO THE CURRENT LINE FROM THE HISTORY FOR EDITING.   ANY
              ARGUMENT IS IGNORED.
       EDIT-AND-EXECUTE-COMMAND (C-XC-E)
              INVOKE  AN  EDITOR  ON THE CURRENT COMMAND LINE, AND EXECUTE THE
              RESULT AS SHELL COMMANDS.   BASH  ATTEMPTS  TO  INVOKE  $VISUAL,
              $EDITOR, AND EMACS AS THE EDITOR, IN THAT ORDER.

   COMMANDS FOR CHANGING TEXT
       END-OF-FILE (USUALLY C-D)
              THE  CHARACTER  INDICATING  END-OF-FILE  AS SET, FOR EXAMPLE, BY
              ``STTY''.  IF THIS CHARACTER IS READ WHEN THERE ARE  NO  CHARAC‐
              TERS  ON  THE  LINE,  AND POINT IS AT THE BEGINNING OF THE LINE,
              READLINE INTERPRETS IT AS THE END OF INPUT AND RETURNS EOF.
       DELETE-CHAR (C-D)
              DELETE THE CHARACTER AT POINT.  IF THIS FUNCTION IS BOUND TO THE
              SAME CHARACTER AS THE TTY EOF CHARACTER, AS C-D COMMONLY IS, SEE
              ABOVE FOR THE EFFECTS.
       BACKWARD-DELETE-CHAR (RUBOUT)
              DELETE THE CHARACTER BEHIND THE CURSOR.  WHEN  GIVEN  A  NUMERIC
              ARGUMENT, SAVE THE DELETED TEXT ON THE KILL RING.
       FORWARD-BACKWARD-DELETE-CHAR
              DELETE  THE  CHARACTER UNDER THE CURSOR, UNLESS THE CURSOR IS AT
              THE END OF THE LINE, IN WHICH CASE THE CHARACTER BEHIND THE CUR‐
              SOR IS DELETED.
       QUOTED-INSERT (C-Q, C-V)
              ADD  THE NEXT CHARACTER TYPED TO THE LINE VERBATIM.  THIS IS HOW
              TO INSERT CHARACTERS LIKE C-Q, FOR EXAMPLE.
       TAB-INSERT (C-V TAB)
              INSERT A TAB CHARACTER.
       SELF-INSERT (A, B, A, 1, !, ...)
              INSERT THE CHARACTER TYPED.
       TRANSPOSE-CHARS (C-T)
              DRAG THE CHARACTER BEFORE POINT FORWARD OVER  THE  CHARACTER  AT
              POINT,  MOVING POINT FORWARD AS WELL.  IF POINT IS AT THE END OF
              THE LINE, THEN THIS TRANSPOSES THE TWO CHARACTERS BEFORE  POINT.
              NEGATIVE ARGUMENTS HAVE NO EFFECT.
       TRANSPOSE-WORDS (M-T)
              DRAG  THE  WORD  BEFORE  POINT PAST THE WORD AFTER POINT, MOVING
              POINT OVER THAT WORD AS WELL.  IF POINT IS AT  THE  END  OF  THE
              LINE, THIS TRANSPOSES THE LAST TWO WORDS ON THE LINE.
       UPCASE-WORD (M-U)
              UPPERCASE  THE  CURRENT  (OR  FOLLOWING)  WORD.  WITH A NEGATIVE
              ARGUMENT, UPPERCASE THE PREVIOUS WORD, BUT DO NOT MOVE POINT.
       DOWNCASE-WORD (M-L)
              LOWERCASE THE CURRENT (OR  FOLLOWING)  WORD.   WITH  A  NEGATIVE
              ARGUMENT, LOWERCASE THE PREVIOUS WORD, BUT DO NOT MOVE POINT.
       CAPITALIZE-WORD (M-C)
              CAPITALIZE  THE  CURRENT  (OR  FOLLOWING) WORD.  WITH A NEGATIVE
              ARGUMENT, CAPITALIZE THE PREVIOUS WORD, BUT DO NOT MOVE POINT.
       OVERWRITE-MODE
              TOGGLE OVERWRITE MODE.  WITH AN EXPLICIT POSITIVE NUMERIC  ARGU‐
              MENT, SWITCHES TO OVERWRITE MODE.  WITH AN EXPLICIT NON-POSITIVE
              NUMERIC ARGUMENT, SWITCHES TO INSERT MODE.  THIS COMMAND AFFECTS
              ONLY  EMACS MODE; VI MODE DOES OVERWRITE DIFFERENTLY.  EACH CALL
              TO READLINE() STARTS IN INSERT MODE.  IN OVERWRITE MODE, CHARAC‐
              TERS  BOUND TO SELF-INSERT REPLACE THE TEXT AT POINT RATHER THAN
              PUSHING THE TEXT  TO  THE  RIGHT.   CHARACTERS  BOUND  TO  BACK‐
              WARD-DELETE-CHAR  REPLACE  THE  CHARACTER  BEFORE  POINT  WITH A
              SPACE.  BY DEFAULT, THIS COMMAND IS UNBOUND.

   KILLING AND YANKING
       KILL-LINE (C-K)
              KILL THE TEXT FROM POINT TO THE END OF THE LINE.
       BACKWARD-KILL-LINE (C-X RUBOUT)
              KILL BACKWARD TO THE BEGINNING OF THE LINE.
       UNIX-LINE-DISCARD (C-U)
              KILL BACKWARD FROM POINT TO THE  BEGINNING  OF  THE  LINE.   THE
              KILLED TEXT IS SAVED ON THE KILL-RING.
       KILL-WHOLE-LINE
              KILL  ALL  CHARACTERS ON THE CURRENT LINE, NO MATTER WHERE POINT
              IS.
       KILL-WORD (M-D)
              KILL FROM POINT TO THE END OF THE CURRENT WORD,  OR  IF  BETWEEN
              WORDS,  TO  THE  END  OF THE NEXT WORD.  WORD BOUNDARIES ARE THE
              SAME AS THOSE USED BY FORWARD-WORD.
       BACKWARD-KILL-WORD (M-RUBOUT)
              KILL THE WORD BEHIND POINT.  WORD BOUNDARIES  ARE  THE  SAME  AS
              THOSE USED BY BACKWARD-WORD.
       SHELL-KILL-WORD (M-D)
              KILL  FROM  POINT  TO THE END OF THE CURRENT WORD, OR IF BETWEEN
              WORDS, TO THE END OF THE NEXT WORD.   WORD  BOUNDARIES  ARE  THE
              SAME AS THOSE USED BY SHELL-FORWARD-WORD.
       SHELL-BACKWARD-KILL-WORD (M-RUBOUT)
              KILL  THE  WORD  BEHIND  POINT.  WORD BOUNDARIES ARE THE SAME AS
              THOSE USED BY SHELL-BACKWARD-WORD.
       UNIX-WORD-RUBOUT (C-W)
              KILL THE WORD BEHIND POINT, USING WHITE SPACE AS A  WORD  BOUND‐
              ARY.  THE KILLED TEXT IS SAVED ON THE KILL-RING.
       UNIX-FILENAME-RUBOUT
              KILL  THE  WORD  BEHIND  POINT,  USING WHITE SPACE AND THE SLASH
              CHARACTER AS THE WORD BOUNDARIES.  THE KILLED TEXT IS  SAVED  ON
              THE KILL-RING.
       DELETE-HORIZONTAL-SPACE (M-\)
              DELETE ALL SPACES AND TABS AROUND POINT.
       KILL-REGION
              KILL THE TEXT IN THE CURRENT REGION.
       COPY-REGION-AS-KILL
              COPY THE TEXT IN THE REGION TO THE KILL BUFFER.
       COPY-BACKWARD-WORD
              COPY  THE WORD BEFORE POINT TO THE KILL BUFFER.  THE WORD BOUND‐
              ARIES ARE THE SAME AS BACKWARD-WORD.
       COPY-FORWARD-WORD
              COPY THE WORD FOLLOWING POINT TO  THE  KILL  BUFFER.   THE  WORD
              BOUNDARIES ARE THE SAME AS FORWARD-WORD.
       YANK (C-Y)
              YANK THE TOP OF THE KILL RING INTO THE BUFFER AT POINT.
       YANK-POP (M-Y)
              ROTATE  THE KILL RING, AND YANK THE NEW TOP.  ONLY WORKS FOLLOW‐
              ING YANK OR YANK-POP.

   NUMERIC ARGUMENTS
       DIGIT-ARGUMENT (M-0, M-1, ..., M--)
              ADD THIS DIGIT TO THE ARGUMENT ALREADY ACCUMULATING, OR START  A
              NEW ARGUMENT.  M-- STARTS A NEGATIVE ARGUMENT.
       UNIVERSAL-ARGUMENT
              THIS  IS ANOTHER WAY TO SPECIFY AN ARGUMENT.  IF THIS COMMAND IS
              FOLLOWED BY ONE OR MORE DIGITS, OPTIONALLY WITH A LEADING  MINUS
              SIGN,  THOSE DIGITS DEFINE THE ARGUMENT.  IF THE COMMAND IS FOL‐
              LOWED BY DIGITS, EXECUTING  UNIVERSAL-ARGUMENT  AGAIN  ENDS  THE
              NUMERIC  ARGUMENT, BUT IS OTHERWISE IGNORED.  AS A SPECIAL CASE,
              IF THIS COMMAND IS IMMEDIATELY FOLLOWED BY A CHARACTER  THAT  IS
              NEITHER  A  DIGIT OR MINUS SIGN, THE ARGUMENT COUNT FOR THE NEXT
              COMMAND IS MULTIPLIED BY FOUR.  THE ARGUMENT COUNT IS  INITIALLY
              ONE,  SO  EXECUTING THIS FUNCTION THE FIRST TIME MAKES THE ARGU‐
              MENT COUNT FOUR, A SECOND TIME MAKES THE ARGUMENT COUNT SIXTEEN,
              AND SO ON.

   COMPLETING
       COMPLETE (TAB)
              ATTEMPT  TO  PERFORM  COMPLETION ON THE TEXT BEFORE POINT.  BASH
              ATTEMPTS COMPLETION TREATING THE TEXT AS A VARIABLE (IF THE TEXT
              BEGINS  WITH  $), USERNAME (IF THE TEXT BEGINS WITH ~), HOSTNAME
              (IF THE TEXT BEGINS WITH @), OR COMMAND (INCLUDING  ALIASES  AND
              FUNCTIONS) IN TURN.  IF NONE OF THESE PRODUCES A MATCH, FILENAME
              COMPLETION IS ATTEMPTED.
       POSSIBLE-COMPLETIONS (M-?)
              LIST THE POSSIBLE COMPLETIONS OF THE TEXT BEFORE POINT.
       INSERT-COMPLETIONS (M-*)
              INSERT ALL COMPLETIONS OF THE TEXT BEFORE POINT THAT WOULD  HAVE
              BEEN GENERATED BY POSSIBLE-COMPLETIONS.
       MENU-COMPLETE
              SIMILAR  TO COMPLETE, BUT REPLACES THE WORD TO BE COMPLETED WITH
              A SINGLE MATCH FROM THE LIST OF POSSIBLE COMPLETIONS.   REPEATED
              EXECUTION  OF  MENU-COMPLETE  STEPS THROUGH THE LIST OF POSSIBLE
              COMPLETIONS, INSERTING EACH MATCH IN TURN.  AT THE  END  OF  THE
              LIST OF COMPLETIONS, THE BELL IS RUNG (SUBJECT TO THE SETTING OF
              BELL-STYLE) AND THE ORIGINAL TEXT IS RESTORED.  AN ARGUMENT OF N
              MOVES  N  POSITIONS  FORWARD  IN THE LIST OF MATCHES; A NEGATIVE
              ARGUMENT MAY BE USED TO MOVE BACKWARD THROUGH  THE  LIST.   THIS
              COMMAND  IS  INTENDED  TO  BE  BOUND  TO  TAB, BUT IS UNBOUND BY
              DEFAULT.
       MENU-COMPLETE-BACKWARD
              IDENTICAL TO MENU-COMPLETE, BUT MOVES BACKWARD THROUGH THE  LIST
              OF  POSSIBLE  COMPLETIONS,  AS IF MENU-COMPLETE HAD BEEN GIVEN A
              NEGATIVE ARGUMENT.  THIS COMMAND IS UNBOUND BY DEFAULT.
       DELETE-CHAR-OR-LIST
              DELETES THE CHARACTER UNDER THE CURSOR IF NOT AT  THE  BEGINNING
              OR  END  OF  THE  LINE (LIKE DELETE-CHAR).  IF AT THE END OF THE
              LINE, BEHAVES IDENTICALLY TO POSSIBLE-COMPLETIONS.  THIS COMMAND
              IS UNBOUND BY DEFAULT.
       COMPLETE-FILENAME (M-/)
              ATTEMPT FILENAME COMPLETION ON THE TEXT BEFORE POINT.
       POSSIBLE-FILENAME-COMPLETIONS (C-X /)
              LIST THE POSSIBLE COMPLETIONS OF THE TEXT BEFORE POINT, TREATING
              IT AS A FILENAME.
       COMPLETE-USERNAME (M-~)
              ATTEMPT COMPLETION ON THE TEXT BEFORE POINT, TREATING  IT  AS  A
              USERNAME.
       POSSIBLE-USERNAME-COMPLETIONS (C-X ~)
              LIST THE POSSIBLE COMPLETIONS OF THE TEXT BEFORE POINT, TREATING
              IT AS A USERNAME.
       COMPLETE-VARIABLE (M-$)
              ATTEMPT COMPLETION ON THE TEXT BEFORE POINT, TREATING  IT  AS  A
              SHELL VARIABLE.
       POSSIBLE-VARIABLE-COMPLETIONS (C-X $)
              LIST THE POSSIBLE COMPLETIONS OF THE TEXT BEFORE POINT, TREATING
              IT AS A SHELL VARIABLE.
       COMPLETE-HOSTNAME (M-@)
              ATTEMPT COMPLETION ON THE TEXT BEFORE POINT, TREATING  IT  AS  A
              HOSTNAME.
       POSSIBLE-HOSTNAME-COMPLETIONS (C-X @)
              LIST THE POSSIBLE COMPLETIONS OF THE TEXT BEFORE POINT, TREATING
              IT AS A HOSTNAME.
       COMPLETE-COMMAND (M-!)
              ATTEMPT COMPLETION ON THE TEXT BEFORE POINT, TREATING  IT  AS  A
              COMMAND  NAME.   COMMAND  COMPLETION  ATTEMPTS TO MATCH THE TEXT
              AGAINST  ALIASES,  RESERVED  WORDS,   SHELL   FUNCTIONS,   SHELL
              BUILTINS, AND FINALLY EXECUTABLE FILENAMES, IN THAT ORDER.
       POSSIBLE-COMMAND-COMPLETIONS (C-X !)
              LIST THE POSSIBLE COMPLETIONS OF THE TEXT BEFORE POINT, TREATING
              IT AS A COMMAND NAME.
       DYNAMIC-COMPLETE-HISTORY (M-TAB)
              ATTEMPT COMPLETION ON THE TEXT BEFORE POINT, COMPARING THE  TEXT
              AGAINST  LINES  FROM  THE  HISTORY  LIST FOR POSSIBLE COMPLETION
              MATCHES.
       DABBREV-EXPAND
              ATTEMPT MENU COMPLETION ON THE TEXT BEFORE POINT, COMPARING  THE
              TEXT AGAINST LINES FROM THE HISTORY LIST FOR POSSIBLE COMPLETION
              MATCHES.
       COMPLETE-INTO-BRACES (M-{)
              PERFORM FILENAME COMPLETION AND INSERT THE LIST OF POSSIBLE COM‐
              PLETIONS  ENCLOSED WITHIN BRACES SO THE LIST IS AVAILABLE TO THE
              SHELL (SEE BRACE EXPANSION ABOVE).

   KEYBOARD MACROS
       START-KBD-MACRO (C-X ()
              BEGIN SAVING THE CHARACTERS  TYPED  INTO  THE  CURRENT  KEYBOARD
              MACRO.
       END-KBD-MACRO (C-X ))
              STOP SAVING THE CHARACTERS TYPED INTO THE CURRENT KEYBOARD MACRO
              AND STORE THE DEFINITION.
       CALL-LAST-KBD-MACRO (C-X E)
              RE-EXECUTE THE LAST KEYBOARD MACRO DEFINED, BY MAKING THE  CHAR‐
              ACTERS IN THE MACRO APPEAR AS IF TYPED AT THE KEYBOARD.
       PRINT-LAST-KBD-MACRO ()
              PRINT  THE  LAST KEYBOARD MACRO DEFINED IN A FORMAT SUITABLE FOR
              THE INPUTRC FILE.

   MISCELLANEOUS
       RE-READ-INIT-FILE (C-X C-R)
              READ IN THE CONTENTS OF THE INPUTRC FILE,  AND  INCORPORATE  ANY
              BINDINGS OR VARIABLE ASSIGNMENTS FOUND THERE.
       ABORT (C-G)
              ABORT  THE  CURRENT EDITING COMMAND AND RING THE TERMINAL'S BELL
              (SUBJECT TO THE SETTING OF BELL-STYLE).
       DO-UPPERCASE-VERSION (M-A, M-B, M-X, ...)
              IF THE METAFIED CHARACTER X IS LOWERCASE, RUN THE  COMMAND  THAT
              IS BOUND TO THE CORRESPONDING UPPERCASE CHARACTER.
       PREFIX-META (ESC)
              METAFY THE NEXT CHARACTER TYPED.  ESC F IS EQUIVALENT TO META-F.
       UNDO (C-_, C-X C-U)
              INCREMENTAL UNDO, SEPARATELY REMEMBERED FOR EACH LINE.
       REVERT-LINE (M-R)
              UNDO  ALL CHANGES MADE TO THIS LINE.  THIS IS LIKE EXECUTING THE
              UNDO COMMAND ENOUGH TIMES TO RETURN  THE  LINE  TO  ITS  INITIAL
              STATE.
       TILDE-EXPAND (M-&)
              PERFORM TILDE EXPANSION ON THE CURRENT WORD.
       SET-MARK (C-@, M-<SPACE>)
              SET  THE  MARK TO THE POINT.  IF A NUMERIC ARGUMENT IS SUPPLIED,
              THE MARK IS SET TO THAT POSITION.
       EXCHANGE-POINT-AND-MARK (C-X C-X)
              SWAP THE POINT WITH THE MARK.  THE CURRENT  CURSOR  POSITION  IS
              SET  TO THE SAVED POSITION, AND THE OLD CURSOR POSITION IS SAVED
              AS THE MARK.
       CHARACTER-SEARCH (C-])
              A CHARACTER IS READ AND POINT IS MOVED TO THE NEXT OCCURRENCE OF
              THAT  CHARACTER.   A NEGATIVE COUNT SEARCHES FOR PREVIOUS OCCUR‐
              RENCES.
       CHARACTER-SEARCH-BACKWARD (M-C-])
              A CHARACTER IS READ AND POINT IS MOVED TO  THE  PREVIOUS  OCCUR‐
              RENCE  OF  THAT CHARACTER.  A NEGATIVE COUNT SEARCHES FOR SUBSE‐
              QUENT OCCURRENCES.
       SKIP-CSI-SEQUENCE
              READ ENOUGH CHARACTERS TO CONSUME A MULTI-KEY SEQUENCE  SUCH  AS
              THOSE  DEFINED FOR KEYS LIKE HOME AND END.  SUCH SEQUENCES BEGIN
              WITH A CONTROL SEQUENCE INDICATOR (CSI), USUALLY ESC-[.  IF THIS
              SEQUENCE  IS  BOUND  TO "\[", KEYS PRODUCING SUCH SEQUENCES WILL
              HAVE NO EFFECT UNLESS EXPLICITLY BOUND TO  A  READLINE  COMMAND,
              INSTEAD  OF  INSERTING STRAY CHARACTERS INTO THE EDITING BUFFER.
              THIS IS UNBOUND BY DEFAULT, BUT USUALLY BOUND TO ESC-[.
       INSERT-COMMENT (M-#)
              WITHOUT A NUMERIC ARGUMENT,  THE  VALUE  OF  THE  READLINE  COM‐
              MENT-BEGIN  VARIABLE IS INSERTED AT THE BEGINNING OF THE CURRENT
              LINE.  IF A NUMERIC ARGUMENT IS SUPPLIED, THIS COMMAND ACTS AS A
              TOGGLE:   IF  THE CHARACTERS AT THE BEGINNING OF THE LINE DO NOT
              MATCH THE VALUE OF COMMENT-BEGIN, THE VALUE IS INSERTED,  OTHER‐
              WISE THE CHARACTERS IN COMMENT-BEGIN ARE DELETED FROM THE BEGIN‐
              NING OF THE LINE.  IN EITHER CASE, THE LINE IS ACCEPTED AS IF  A
              NEWLINE  HAD  BEEN  TYPED.   THE  DEFAULT VALUE OF COMMENT-BEGIN
              CAUSES THIS COMMAND TO MAKE THE CURRENT LINE  A  SHELL  COMMENT.
              IF  A  NUMERIC  ARGUMENT  CAUSES  THE  COMMENT  CHARACTER  TO BE
              REMOVED, THE LINE WILL BE EXECUTED BY THE SHELL.
       GLOB-COMPLETE-WORD (M-G)
              THE WORD BEFORE POINT IS  TREATED  AS  A  PATTERN  FOR  PATHNAME
              EXPANSION,  WITH  AN ASTERISK IMPLICITLY APPENDED.  THIS PATTERN
              IS USED TO GENERATE A LIST OF MATCHING  FILENAMES  FOR  POSSIBLE
              COMPLETIONS.
       GLOB-EXPAND-WORD (C-X *)
              THE  WORD  BEFORE  POINT  IS  TREATED  AS A PATTERN FOR PATHNAME
              EXPANSION, AND THE  LIST  OF  MATCHING  FILENAMES  IS  INSERTED,
              REPLACING  THE  WORD.   IF  A  NUMERIC  ARGUMENT IS SUPPLIED, AN
              ASTERISK IS APPENDED BEFORE PATHNAME EXPANSION.
       GLOB-LIST-EXPANSIONS (C-X G)
              THE LIST  OF  EXPANSIONS  THAT  WOULD  HAVE  BEEN  GENERATED  BY
              GLOB-EXPAND-WORD  IS  DISPLAYED,  AND THE LINE IS REDRAWN.  IF A
              NUMERIC ARGUMENT IS SUPPLIED, AN  ASTERISK  IS  APPENDED  BEFORE
              PATHNAME EXPANSION.
       DUMP-FUNCTIONS
              PRINT  ALL  OF THE FUNCTIONS AND THEIR KEY BINDINGS TO THE READ‐
              LINE OUTPUT STREAM.  IF A NUMERIC ARGUMENT IS SUPPLIED, THE OUT‐
              PUT  IS  FORMATTED  IN SUCH A WAY THAT IT CAN BE MADE PART OF AN
              INPUTRC FILE.
       DUMP-VARIABLES
              PRINT ALL OF THE SETTABLE READLINE VARIABLES AND THEIR VALUES TO
              THE  READLINE OUTPUT STREAM.  IF A NUMERIC ARGUMENT IS SUPPLIED,
              THE OUTPUT IS FORMATTED IN SUCH A WAY THAT IT CAN BE  MADE  PART
              OF AN INPUTRC FILE.
       DUMP-MACROS
              PRINT  ALL OF THE READLINE KEY SEQUENCES BOUND TO MACROS AND THE
              STRINGS THEY OUTPUT.  IF A NUMERIC  ARGUMENT  IS  SUPPLIED,  THE
              OUTPUT IS FORMATTED IN SUCH A WAY THAT IT CAN BE MADE PART OF AN
              INPUTRC FILE.
       DISPLAY-SHELL-VERSION (C-X C-V)
              DISPLAY VERSION INFORMATION ABOUT THE CURRENT INSTANCE OF BASH.

   PROGRAMMABLE COMPLETION
       WHEN WORD COMPLETION IS ATTEMPTED FOR AN  ARGUMENT  TO  A  COMMAND  FOR
       WHICH  A  COMPLETION  SPECIFICATION (A COMPSPEC) HAS BEEN DEFINED USING
       THE COMPLETE BUILTIN (SEE SHELL BUILTIN COMMANDS BELOW),  THE  PROGRAM‐
       MABLE COMPLETION FACILITIES ARE INVOKED.

       FIRST,  THE  COMMAND  NAME  IS  IDENTIFIED.  IF THE COMMAND WORD IS THE
       EMPTY STRING (COMPLETION ATTEMPTED AT THE BEGINNING OF AN EMPTY  LINE),
       ANY  COMPSPEC  DEFINED  WITH  THE  -E OPTION TO COMPLETE IS USED.  IF A
       COMPSPEC HAS BEEN DEFINED FOR THAT COMMAND, THE  COMPSPEC  IS  USED  TO
       GENERATE THE LIST OF POSSIBLE COMPLETIONS FOR THE WORD.  IF THE COMMAND
       WORD IS A FULL PATHNAME, A COMPSPEC FOR THE FULL PATHNAME  IS  SEARCHED
       FOR  FIRST.   IF NO COMPSPEC IS FOUND FOR THE FULL PATHNAME, AN ATTEMPT
       IS MADE TO FIND A COMPSPEC FOR THE PORTION FOLLOWING THE  FINAL  SLASH.
       IF  THOSE  SEARCHES  DO  NOT RESULT IN A COMPSPEC, ANY COMPSPEC DEFINED
       WITH THE -D OPTION TO COMPLETE IS USED AS THE DEFAULT.

       ONCE A COMPSPEC HAS BEEN FOUND, IT IS USED  TO  GENERATE  THE  LIST  OF
       MATCHING  WORDS.   IF A COMPSPEC IS NOT FOUND, THE DEFAULT BASH COMPLE‐
       TION AS DESCRIBED ABOVE UNDER COMPLETING IS PERFORMED.

       FIRST, THE ACTIONS SPECIFIED BY THE COMPSPEC ARE  USED.   ONLY  MATCHES
       WHICH  ARE PREFIXED BY THE WORD BEING COMPLETED ARE RETURNED.  WHEN THE
       -F OR -D OPTION IS USED FOR FILENAME OR DIRECTORY NAME COMPLETION,  THE
       SHELL VARIABLE FIGNORE IS USED TO FILTER THE MATCHES.

       ANY  COMPLETIONS  SPECIFIED  BY  A PATHNAME EXPANSION PATTERN TO THE -G
       OPTION ARE GENERATED NEXT.  THE WORDS GENERATED BY THE PATTERN NEED NOT
       MATCH  THE  WORD BEING COMPLETED.  THE GLOBIGNORE SHELL VARIABLE IS NOT
       USED TO FILTER THE MATCHES, BUT THE FIGNORE VARIABLE IS USED.

       NEXT, THE STRING SPECIFIED AS THE ARGUMENT TO THE -W OPTION IS  CONSID‐
       ERED.   THE  STRING IS FIRST SPLIT USING THE CHARACTERS IN THE IFS SPE‐
       CIAL VARIABLE AS DELIMITERS.  SHELL QUOTING IS HONORED.  EACH  WORD  IS
       THEN  EXPANDED  USING  BRACE  EXPANSION, TILDE EXPANSION, PARAMETER AND
       VARIABLE EXPANSION, COMMAND SUBSTITUTION, AND ARITHMETIC EXPANSION,  AS
       DESCRIBED ABOVE UNDER EXPANSION.  THE RESULTS ARE SPLIT USING THE RULES
       DESCRIBED ABOVE UNDER WORD SPLITTING.  THE RESULTS OF THE EXPANSION ARE
       PREFIX-MATCHED AGAINST THE WORD BEING COMPLETED, AND THE MATCHING WORDS
       BECOME THE POSSIBLE COMPLETIONS.

       AFTER THESE MATCHES HAVE BEEN GENERATED, ANY SHELL FUNCTION OR  COMMAND
       SPECIFIED  WITH  THE -F AND -C OPTIONS IS INVOKED.  WHEN THE COMMAND OR
       FUNCTION IS INVOKED, THE COMP_LINE, COMP_POINT, COMP_KEY, AND COMP_TYPE
       VARIABLES ARE ASSIGNED VALUES AS DESCRIBED ABOVE UNDER SHELL VARIABLES.
       IF A SHELL FUNCTION IS BEING INVOKED,  THE  COMP_WORDS  AND  COMP_CWORD
       VARIABLES  ARE  ALSO SET.  WHEN THE FUNCTION OR COMMAND IS INVOKED, THE
       FIRST ARGUMENT ($1) IS THE NAME OF  THE  COMMAND  WHOSE  ARGUMENTS  ARE
       BEING  COMPLETED, THE SECOND ARGUMENT ($2) IS THE WORD BEING COMPLETED,
       AND THE THIRD ARGUMENT ($3) IS THE WORD PRECEDING THE WORD  BEING  COM‐
       PLETED ON THE CURRENT COMMAND LINE.  NO FILTERING OF THE GENERATED COM‐
       PLETIONS AGAINST THE WORD BEING COMPLETED IS PERFORMED; THE FUNCTION OR
       COMMAND HAS COMPLETE FREEDOM IN GENERATING THE MATCHES.

       ANY  FUNCTION SPECIFIED WITH -F IS INVOKED FIRST.  THE FUNCTION MAY USE
       ANY OF THE SHELL FACILITIES, INCLUDING THE  COMPGEN  BUILTIN  DESCRIBED
       BELOW,  TO  GENERATE THE MATCHES.  IT MUST PUT THE POSSIBLE COMPLETIONS
       IN THE COMPREPLY ARRAY VARIABLE, ONE PER ARRAY ELEMENT.

       NEXT, ANY COMMAND SPECIFIED WITH THE -C OPTION IS INVOKED IN  AN  ENVI‐
       RONMENT  EQUIVALENT TO COMMAND SUBSTITUTION.  IT SHOULD PRINT A LIST OF
       COMPLETIONS, ONE PER LINE, TO THE STANDARD OUTPUT.   BACKSLASH  MAY  BE
       USED TO ESCAPE A NEWLINE, IF NECESSARY.

       AFTER  ALL OF THE POSSIBLE COMPLETIONS ARE GENERATED, ANY FILTER SPECI‐
       FIED WITH THE -X OPTION IS APPLIED TO THE LIST.  THE FILTER IS  A  PAT‐
       TERN  AS  USED  FOR  PATHNAME EXPANSION; A & IN THE PATTERN IS REPLACED
       WITH THE TEXT OF THE WORD BEING COMPLETED.  A LITERAL & MAY BE  ESCAPED
       WITH  A  BACKSLASH; THE BACKSLASH IS REMOVED BEFORE ATTEMPTING A MATCH.
       ANY COMPLETION THAT MATCHES THE PATTERN WILL BE REMOVED FROM THE  LIST.
       A LEADING ! NEGATES THE PATTERN; IN THIS CASE ANY COMPLETION NOT MATCH‐
       ING THE PATTERN WILL BE REMOVED.

       FINALLY, ANY PREFIX AND SUFFIX SPECIFIED WITH THE -P AND -S OPTIONS ARE
       ADDED TO EACH MEMBER OF THE COMPLETION LIST, AND THE RESULT IS RETURNED
       TO THE READLINE COMPLETION CODE AS THE LIST OF POSSIBLE COMPLETIONS.

       IF THE PREVIOUSLY-APPLIED ACTIONS DO NOT GENERATE ANY MATCHES, AND  THE
       -O  DIRNAMES  OPTION  WAS  SUPPLIED  TO  COMPLETE WHEN THE COMPSPEC WAS
       DEFINED, DIRECTORY NAME COMPLETION IS ATTEMPTED.

       IF THE -O PLUSDIRS OPTION WAS SUPPLIED TO COMPLETE  WHEN  THE  COMPSPEC
       WAS DEFINED, DIRECTORY NAME COMPLETION IS ATTEMPTED AND ANY MATCHES ARE
       ADDED TO THE RESULTS OF THE OTHER ACTIONS.

       BY DEFAULT, IF A COMPSPEC IS FOUND, WHATEVER IT GENERATES  IS  RETURNED
       TO  THE  COMPLETION  CODE AS THE FULL SET OF POSSIBLE COMPLETIONS.  THE
       DEFAULT BASH COMPLETIONS ARE NOT ATTEMPTED, AND THE READLINE DEFAULT OF
       FILENAME COMPLETION IS DISABLED.  IF THE -O BASHDEFAULT OPTION WAS SUP‐
       PLIED TO COMPLETE WHEN THE COMPSPEC WAS DEFINED, THE BASH DEFAULT  COM‐
       PLETIONS ARE ATTEMPTED IF THE COMPSPEC GENERATES NO MATCHES.  IF THE -O
       DEFAULT OPTION WAS SUPPLIED TO COMPLETE WHEN THE COMPSPEC WAS  DEFINED,
       READLINE'S  DEFAULT  COMPLETION WILL BE PERFORMED IF THE COMPSPEC (AND,
       IF ATTEMPTED, THE DEFAULT BASH COMPLETIONS) GENERATE NO MATCHES.

       WHEN A COMPSPEC INDICATES THAT DIRECTORY NAME  COMPLETION  IS  DESIRED,
       THE  PROGRAMMABLE COMPLETION FUNCTIONS FORCE READLINE TO APPEND A SLASH
       TO COMPLETED NAMES WHICH ARE SYMBOLIC LINKS TO DIRECTORIES, SUBJECT  TO
       THE  VALUE OF THE MARK-DIRECTORIES READLINE VARIABLE, REGARDLESS OF THE
       SETTING OF THE MARK-SYMLINKED-DIRECTORIES READLINE VARIABLE.

       THERE IS SOME SUPPORT FOR DYNAMICALLY MODIFYING COMPLETIONS.   THIS  IS
       MOST  USEFUL  WHEN USED IN COMBINATION WITH A DEFAULT COMPLETION SPECI‐
       FIED WITH COMPLETE -D.  IT'S POSSIBLE FOR SHELL FUNCTIONS  EXECUTED  AS
       COMPLETION  HANDLERS  TO  INDICATE THAT COMPLETION SHOULD BE RETRIED BY
       RETURNING AN EXIT STATUS OF 124.  IF A SHELL FUNCTION RETURNS 124,  AND
       CHANGES THE COMPSPEC ASSOCIATED WITH THE COMMAND ON WHICH COMPLETION IS
       BEING ATTEMPTED (SUPPLIED AS THE FIRST ARGUMENT WHEN  THE  FUNCTION  IS
       EXECUTED), PROGRAMMABLE COMPLETION RESTARTS FROM THE BEGINNING, WITH AN
       ATTEMPT TO FIND A NEW COMPSPEC FOR THAT COMMAND.  THIS ALLOWS A SET  OF
       COMPLETIONS  TO BE BUILT DYNAMICALLY AS COMPLETION IS ATTEMPTED, RATHER
       THAN BEING LOADED ALL AT ONCE.

       FOR INSTANCE, ASSUMING THAT THERE IS A LIBRARY OF COMPSPECS, EACH  KEPT
       IN  A  FILE  CORRESPONDING  TO  THE  NAME OF THE COMMAND, THE FOLLOWING
       DEFAULT COMPLETION FUNCTION WOULD LOAD COMPLETIONS DYNAMICALLY:

       _COMPLETION_LOADER()
       {
            . "/ETC/BASH_COMPLETION.D/$1.SH" >/DEV/NULL 2>&1 && RETURN 124
       }
       COMPLETE -D -F _COMPLETION_LOADER -O BASHDEFAULT -O DEFAULT


HISTORY
       WHEN THE -O HISTORY OPTION TO THE SET BUILTIN  IS  ENABLED,  THE  SHELL
       PROVIDES ACCESS TO THE COMMAND HISTORY, THE LIST OF COMMANDS PREVIOUSLY
       TYPED.  THE VALUE OF THE HISTSIZE VARIABLE IS USED  AS  THE  NUMBER  OF
       COMMANDS TO SAVE IN A HISTORY LIST.  THE TEXT OF THE LAST HISTSIZE COM‐
       MANDS (DEFAULT 500) IS SAVED.  THE SHELL STORES  EACH  COMMAND  IN  THE
       HISTORY  LIST  PRIOR TO PARAMETER AND VARIABLE EXPANSION (SEE EXPANSION
       ABOVE) BUT AFTER HISTORY EXPANSION IS PERFORMED, SUBJECT TO THE  VALUES
       OF THE SHELL VARIABLES HISTIGNORE AND HISTCONTROL.

       ON STARTUP, THE HISTORY IS INITIALIZED FROM THE FILE NAMED BY THE VARI‐
       ABLE HISTFILE (DEFAULT ~/.BASH_HISTORY).  THE FILE NAMED BY  THE  VALUE
       OF  HISTFILE  IS  TRUNCATED,  IF NECESSARY, TO CONTAIN NO MORE THAN THE
       NUMBER OF LINES SPECIFIED BY THE VALUE OF HISTFILESIZE.   IF  HISTFILE‐
       SIZE  IS UNSET, OR SET TO NULL, A NON-NUMERIC VALUE, OR A NUMERIC VALUE
       LESS THAN ZERO, THE HISTORY FILE IS NOT TRUNCATED.   WHEN  THE  HISTORY
       FILE  IS  READ, LINES BEGINNING WITH THE HISTORY COMMENT CHARACTER FOL‐
       LOWED IMMEDIATELY BY A DIGIT ARE INTERPRETED AS TIMESTAMPS FOR THE PRE‐
       CEDING HISTORY LINE.  THESE TIMESTAMPS ARE OPTIONALLY DISPLAYED DEPEND‐
       ING ON THE VALUE OF THE HISTTIMEFORMAT VARIABLE.   WHEN  A  SHELL  WITH
       HISTORY  ENABLED  EXITS,  THE  LAST $HISTSIZE LINES ARE COPIED FROM THE
       HISTORY LIST TO $HISTFILE.  IF THE HISTAPPEND SHELL OPTION  IS  ENABLED
       (SEE  THE DESCRIPTION OF SHOPT UNDER SHELL BUILTIN COMMANDS BELOW), THE
       LINES ARE APPENDED TO THE HISTORY FILE, OTHERWISE THE HISTORY  FILE  IS
       OVERWRITTEN.   IF  HISTFILE  IS  UNSET,  OR  IF  THE  HISTORY  FILE  IS
       UNWRITABLE, THE HISTORY IS NOT SAVED.  IF THE  HISTTIMEFORMAT  VARIABLE
       IS  SET,  TIME  STAMPS ARE WRITTEN TO THE HISTORY FILE, MARKED WITH THE
       HISTORY COMMENT CHARACTER, SO THEY MAY BE PRESERVED ACROSS  SHELL  SES‐
       SIONS.   THIS  USES  THE HISTORY COMMENT CHARACTER TO DISTINGUISH TIME‐
       STAMPS FROM OTHER HISTORY LINES.  AFTER SAVING THE HISTORY, THE HISTORY
       FILE IS TRUNCATED TO CONTAIN NO MORE THAN HISTFILESIZE LINES.  IF HIST‐
       FILESIZE IS UNSET, OR SET TO NULL, A NON-NUMERIC VALUE,  OR  A  NUMERIC
       VALUE LESS THAN ZERO, THE HISTORY FILE IS NOT TRUNCATED.

       THE  BUILTIN  COMMAND FC (SEE SHELL BUILTIN COMMANDS BELOW) MAY BE USED
       TO LIST OR EDIT AND RE-EXECUTE A PORTION OF THE HISTORY LIST.  THE HIS‐
       TORY  BUILTIN  MAY  BE  USED  TO DISPLAY OR MODIFY THE HISTORY LIST AND
       MANIPULATE THE HISTORY FILE.  WHEN USING COMMAND-LINE  EDITING,  SEARCH
       COMMANDS  ARE AVAILABLE IN EACH EDITING MODE THAT PROVIDE ACCESS TO THE
       HISTORY LIST.

       THE SHELL ALLOWS CONTROL OVER WHICH COMMANDS ARE SAVED ON  THE  HISTORY
       LIST.  THE HISTCONTROL AND HISTIGNORE VARIABLES MAY BE SET TO CAUSE THE
       SHELL TO SAVE ONLY A SUBSET OF THE COMMANDS ENTERED.  THE CMDHIST SHELL
       OPTION,  IF ENABLED, CAUSES THE SHELL TO ATTEMPT TO SAVE EACH LINE OF A
       MULTI-LINE COMMAND IN THE SAME HISTORY ENTRY, ADDING  SEMICOLONS  WHERE
       NECESSARY  TO PRESERVE SYNTACTIC CORRECTNESS.  THE LITHIST SHELL OPTION
       CAUSES THE SHELL TO SAVE THE COMMAND WITH EMBEDDED NEWLINES INSTEAD  OF
       SEMICOLONS.  SEE THE DESCRIPTION OF THE SHOPT BUILTIN BELOW UNDER SHELL
       BUILTIN  COMMANDS  FOR  INFORMATION  ON  SETTING  AND  UNSETTING  SHELL
       OPTIONS.

HISTORY EXPANSION
       THE  SHELL  SUPPORTS A HISTORY EXPANSION FEATURE THAT IS SIMILAR TO THE
       HISTORY EXPANSION IN CSH.  THIS SECTION DESCRIBES WHAT SYNTAX  FEATURES
       ARE  AVAILABLE.   THIS  FEATURE  IS  ENABLED BY DEFAULT FOR INTERACTIVE
       SHELLS, AND CAN BE DISABLED USING THE +H OPTION TO THE SET BUILTIN COM‐
       MAND (SEE SHELL BUILTIN COMMANDS BELOW).  NON-INTERACTIVE SHELLS DO NOT
       PERFORM HISTORY EXPANSION BY DEFAULT.

       HISTORY EXPANSIONS INTRODUCE WORDS FROM THE HISTORY LIST INTO THE INPUT
       STREAM,  MAKING  IT  EASY TO REPEAT COMMANDS, INSERT THE ARGUMENTS TO A
       PREVIOUS COMMAND INTO THE CURRENT INPUT LINE, OR FIX ERRORS IN PREVIOUS
       COMMANDS QUICKLY.

       HISTORY  EXPANSION  IS  PERFORMED  IMMEDIATELY AFTER A COMPLETE LINE IS
       READ, BEFORE THE SHELL BREAKS IT INTO WORDS.  IT  TAKES  PLACE  IN  TWO
       PARTS.   THE  FIRST IS TO DETERMINE WHICH LINE FROM THE HISTORY LIST TO
       USE DURING SUBSTITUTION.  THE SECOND IS TO SELECT PORTIONS OF THAT LINE
       FOR INCLUSION INTO THE CURRENT ONE.  THE LINE SELECTED FROM THE HISTORY
       IS THE EVENT, AND THE PORTIONS OF THAT LINE THAT  ARE  ACTED  UPON  ARE
       WORDS.   VARIOUS  MODIFIERS  ARE  AVAILABLE  TO MANIPULATE THE SELECTED
       WORDS.  THE LINE IS BROKEN INTO WORDS IN THE SAME FASHION AS WHEN READ‐
       ING  INPUT, SO THAT SEVERAL METACHARACTER-SEPARATED WORDS SURROUNDED BY
       QUOTES ARE CONSIDERED ONE WORD.  HISTORY EXPANSIONS ARE  INTRODUCED  BY
       THE  APPEARANCE  OF  THE  HISTORY  EXPANSION  CHARACTER,  WHICH IS ! BY
       DEFAULT.  ONLY BACKSLASH (\) AND SINGLE QUOTES CAN  QUOTE  THE  HISTORY
       EXPANSION CHARACTER.

       SEVERAL  CHARACTERS INHIBIT HISTORY EXPANSION IF FOUND IMMEDIATELY FOL‐
       LOWING THE HISTORY EXPANSION CHARACTER, EVEN IF IT IS UNQUOTED:  SPACE,
       TAB,  NEWLINE,  CARRIAGE RETURN, AND =.  IF THE EXTGLOB SHELL OPTION IS
       ENABLED, ( WILL ALSO INHIBIT EXPANSION.

       SEVERAL SHELL OPTIONS SETTABLE WITH THE SHOPT BUILTIN MAY  BE  USED  TO
       TAILOR  THE  BEHAVIOR  OF  HISTORY  EXPANSION.  IF THE HISTVERIFY SHELL
       OPTION IS ENABLED (SEE THE DESCRIPTION OF THE SHOPT BUILTIN BELOW), AND
       READLINE  IS  BEING  USED,  HISTORY  SUBSTITUTIONS  ARE NOT IMMEDIATELY
       PASSED TO THE SHELL PARSER.  INSTEAD, THE  EXPANDED  LINE  IS  RELOADED
       INTO THE READLINE EDITING BUFFER FOR FURTHER MODIFICATION.  IF READLINE
       IS BEING USED, AND THE HISTREEDIT SHELL OPTION  IS  ENABLED,  A  FAILED
       HISTORY  SUBSTITUTION WILL BE RELOADED INTO THE READLINE EDITING BUFFER
       FOR CORRECTION.  THE -P OPTION TO THE HISTORY BUILTIN  COMMAND  MAY  BE
       USED  TO  SEE WHAT A HISTORY EXPANSION WILL DO BEFORE USING IT.  THE -S
       OPTION TO THE HISTORY BUILTIN MAY BE USED TO ADD COMMANDS TO THE END OF
       THE  HISTORY  LIST  WITHOUT  ACTUALLY  EXECUTING THEM, SO THAT THEY ARE
       AVAILABLE FOR SUBSEQUENT RECALL.

       THE SHELL ALLOWS CONTROL OF THE VARIOUS CHARACTERS USED BY THE  HISTORY
       EXPANSION MECHANISM (SEE THE DESCRIPTION OF HISTCHARS ABOVE UNDER SHELL
       VARIABLES).  THE SHELL USES THE HISTORY COMMENT CHARACTER TO MARK  HIS‐
       TORY TIMESTAMPS WHEN WRITING THE HISTORY FILE.

   EVENT DESIGNATORS
       AN  EVENT DESIGNATOR IS A REFERENCE TO A COMMAND LINE ENTRY IN THE HIS‐
       TORY LIST.  UNLESS THE REFERENCE IS ABSOLUTE, EVENTS  ARE  RELATIVE  TO
       THE CURRENT POSITION IN THE HISTORY LIST.

       !      START  A  HISTORY SUBSTITUTION, EXCEPT WHEN FOLLOWED BY A BLANK,
              NEWLINE, CARRIAGE RETURN, = OR ( (WHEN THE EXTGLOB SHELL  OPTION
              IS ENABLED USING THE SHOPT BUILTIN).
       !N     REFER TO COMMAND LINE N.
       !-N    REFER TO THE CURRENT COMMAND MINUS N.
       !!     REFER TO THE PREVIOUS COMMAND.  THIS IS A SYNONYM FOR `!-1'.
       !STRING
              REFER  TO THE MOST RECENT COMMAND PRECEDING THE CURRENT POSITION
              IN THE HISTORY LIST STARTING WITH STRING.
       !?STRING[?]
              REFER TO THE MOST RECENT COMMAND PRECEDING THE CURRENT  POSITION
              IN  THE  HISTORY  LIST CONTAINING STRING.  THE TRAILING ? MAY BE
              OMITTED IF STRING IS FOLLOWED IMMEDIATELY BY A NEWLINE.
       ^STRING1^STRING2^
              QUICK SUBSTITUTION.   REPEAT  THE  PREVIOUS  COMMAND,  REPLACING
              STRING1  WITH  STRING2.  EQUIVALENT TO ``!!:S/STRING1/STRING2/''
              (SEE MODIFIERS BELOW).
       !#     THE ENTIRE COMMAND LINE TYPED SO FAR.

   WORD DESIGNATORS
       WORD DESIGNATORS ARE USED TO SELECT DESIRED WORDS FROM THE EVENT.  A  :
       SEPARATES  THE EVENT SPECIFICATION FROM THE WORD DESIGNATOR.  IT MAY BE
       OMITTED IF THE WORD DESIGNATOR BEGINS WITH A ^, $, *, -, OR  %.   WORDS
       ARE  NUMBERED FROM THE BEGINNING OF THE LINE, WITH THE FIRST WORD BEING
       DENOTED BY 0 (ZERO).  WORDS ARE INSERTED INTO THE  CURRENT  LINE  SEPA‐
       RATED BY SINGLE SPACES.

       0 (ZERO)
              THE ZEROTH WORD.  FOR THE SHELL, THIS IS THE COMMAND WORD.
       N      THE NTH WORD.
       ^      THE FIRST ARGUMENT.  THAT IS, WORD 1.
       $      THE  LAST  WORD.   THIS  IS  USUALLY THE LAST ARGUMENT, BUT WILL
              EXPAND TO THE ZEROTH WORD IF THERE IS ONLY ONE WORD IN THE LINE.
       %      THE WORD MATCHED BY THE MOST RECENT `?STRING?' SEARCH.
       X-Y    A RANGE OF WORDS; `-Y' ABBREVIATES `0-Y'.
       *      ALL OF THE WORDS BUT THE ZEROTH.  THIS IS A SYNONYM  FOR  `1-$'.
              IT  IS  NOT  AN  ERROR TO USE * IF THERE IS JUST ONE WORD IN THE
              EVENT; THE EMPTY STRING IS RETURNED IN THAT CASE.
       X*     ABBREVIATES X-$.
       X-     ABBREVIATES X-$ LIKE X*, BUT OMITS THE LAST WORD.

       IF A WORD DESIGNATOR IS SUPPLIED WITHOUT AN  EVENT  SPECIFICATION,  THE
       PREVIOUS COMMAND IS USED AS THE EVENT.

   MODIFIERS
       AFTER  THE OPTIONAL WORD DESIGNATOR, THERE MAY APPEAR A SEQUENCE OF ONE
       OR MORE OF THE FOLLOWING MODIFIERS, EACH PRECEDED BY A `:'.

       H      REMOVE A TRAILING FILENAME COMPONENT, LEAVING ONLY THE HEAD.
       T      REMOVE ALL LEADING FILENAME COMPONENTS, LEAVING THE TAIL.
       R      REMOVE A TRAILING SUFFIX OF THE FORM .XXX, LEAVING THE BASENAME.
       E      REMOVE ALL BUT THE TRAILING SUFFIX.
       P      PRINT THE NEW COMMAND BUT DO NOT EXECUTE IT.
       Q      QUOTE THE SUBSTITUTED WORDS, ESCAPING FURTHER SUBSTITUTIONS.
       X      QUOTE THE SUBSTITUTED WORDS AS WITH Q, BUT BREAK INTO  WORDS  AT
              BLANKS AND NEWLINES.
       S/OLD/NEW/
              SUBSTITUTE  NEW  FOR  THE  FIRST  OCCURRENCE OF OLD IN THE EVENT
              LINE.  ANY DELIMITER CAN BE USED  IN  PLACE  OF  /.   THE  FINAL
              DELIMITER  IS  OPTIONAL IF IT IS THE LAST CHARACTER OF THE EVENT
              LINE.  THE DELIMITER MAY BE QUOTED IN OLD AND NEW WITH A  SINGLE
              BACKSLASH.   IF & APPEARS IN NEW, IT IS REPLACED BY OLD.  A SIN‐
              GLE BACKSLASH WILL QUOTE THE &.  IF OLD IS NULL, IT  IS  SET  TO
              THE  LAST  OLD SUBSTITUTED, OR, IF NO PREVIOUS HISTORY SUBSTITU‐
              TIONS TOOK PLACE, THE LAST STRING IN A !?STRING[?]  SEARCH.
       &      REPEAT THE PREVIOUS SUBSTITUTION.
       G      CAUSE CHANGES TO BE APPLIED OVER THE ENTIRE EVENT LINE.  THIS IS
              USED  IN  CONJUNCTION  WITH `:S' (E.G., `:GS/OLD/NEW/') OR `:&'.
              IF USED WITH `:S', ANY DELIMITER CAN BE USED IN PLACE OF /,  AND
              THE  FINAL  DELIMITER IS OPTIONAL IF IT IS THE LAST CHARACTER OF
              THE EVENT LINE.  AN A MAY BE USED AS A SYNONYM FOR G.
       G      APPLY THE FOLLOWING `S' MODIFIER ONCE TO EACH WORD IN THE  EVENT
              LINE.

SHELL BUILTIN COMMANDS
       UNLESS OTHERWISE NOTED, EACH BUILTIN COMMAND DOCUMENTED IN THIS SECTION
       AS ACCEPTING OPTIONS PRECEDED BY - ACCEPTS -- TO SIGNIFY THE END OF THE
       OPTIONS.   THE  :, TRUE, FALSE, AND TEST BUILTINS DO NOT ACCEPT OPTIONS
       AND DO NOT TREAT -- SPECIALLY.  THE EXIT, LOGOUT, BREAK, CONTINUE, LET,
       AND  SHIFT BUILTINS ACCEPT AND PROCESS ARGUMENTS BEGINNING WITH - WITH‐
       OUT REQUIRING --.  OTHER BUILTINS THAT ACCEPT  ARGUMENTS  BUT  ARE  NOT
       SPECIFIED  AS ACCEPTING OPTIONS INTERPRET ARGUMENTS BEGINNING WITH - AS
       INVALID OPTIONS AND REQUIRE -- TO PREVENT THIS INTERPRETATION.
       : [ARGUMENTS]
              NO EFFECT; THE COMMAND DOES NOTHING BEYOND  EXPANDING  ARGUMENTS
              AND  PERFORMING ANY SPECIFIED REDIRECTIONS.  A ZERO EXIT CODE IS
              RETURNED.

        .  FILENAME [ARGUMENTS]
       SOURCE FILENAME [ARGUMENTS]
              READ AND EXECUTE COMMANDS FROM FILENAME  IN  THE  CURRENT  SHELL
              ENVIRONMENT  AND RETURN THE EXIT STATUS OF THE LAST COMMAND EXE‐
              CUTED FROM FILENAME.  IF FILENAME  DOES  NOT  CONTAIN  A  SLASH,
              FILENAMES  IN  PATH  ARE  USED  TO FIND THE DIRECTORY CONTAINING
              FILENAME.  THE FILE SEARCHED FOR IN PATH NEED NOT BE EXECUTABLE.
              WHEN  BASH  IS  NOT  IN  POSIX  MODE,  THE  CURRENT DIRECTORY IS
              SEARCHED IF NO FILE IS FOUND IN PATH.  IF THE SOURCEPATH  OPTION
              TO  THE  SHOPT  BUILTIN  COMMAND  IS TURNED OFF, THE PATH IS NOT
              SEARCHED.  IF ANY ARGUMENTS ARE SUPPLIED, THEY BECOME THE  POSI‐
              TIONAL  PARAMETERS  WHEN  FILENAME  IS  EXECUTED.  OTHERWISE THE
              POSITIONAL PARAMETERS ARE UNCHANGED.  THE RETURN STATUS  IS  THE
              STATUS  OF  THE  LAST  COMMAND EXITED WITHIN THE SCRIPT (0 IF NO
              COMMANDS ARE EXECUTED), AND FALSE IF FILENAME IS  NOT  FOUND  OR
              CANNOT BE READ.

       ALIAS [-P] [NAME[=VALUE] ...]
              ALIAS WITH NO ARGUMENTS OR WITH THE -P OPTION PRINTS THE LIST OF
              ALIASES IN THE FORM ALIAS NAME=VALUE ON STANDARD  OUTPUT.   WHEN
              ARGUMENTS  ARE SUPPLIED, AN ALIAS IS DEFINED FOR EACH NAME WHOSE
              VALUE IS GIVEN.  A TRAILING SPACE IN  VALUE CAUSES THE NEXT WORD
              TO BE CHECKED FOR ALIAS SUBSTITUTION WHEN THE ALIAS IS EXPANDED.
              FOR EACH NAME IN THE ARGUMENT LIST FOR WHICH NO  VALUE  IS  SUP‐
              PLIED,  THE  NAME  AND  VALUE  OF  THE  ALIAS IS PRINTED.  ALIAS
              RETURNS TRUE UNLESS A NAME IS GIVEN FOR WHICH NO ALIAS HAS  BEEN
              DEFINED.

       BG [JOBSPEC ...]
              RESUME  EACH  SUSPENDED  JOB JOBSPEC IN THE BACKGROUND, AS IF IT
              HAD BEEN STARTED WITH &.  IF JOBSPEC IS NOT PRESENT, THE SHELL'S
              NOTION  OF THE CURRENT JOB IS USED.  BG JOBSPEC RETURNS 0 UNLESS
              RUN WHEN JOB CONTROL IS DISABLED OR, WHEN RUN WITH  JOB  CONTROL
              ENABLED,  ANY  SPECIFIED  JOBSPEC  WAS  NOT FOUND OR WAS STARTED
              WITHOUT JOB CONTROL.

       BIND [-M KEYMAP] [-LPSVPSVX]
       BIND [-M KEYMAP] [-Q FUNCTION] [-U FUNCTION] [-R KEYSEQ]
       BIND [-M KEYMAP] -F FILENAME
       BIND [-M KEYMAP] -X KEYSEQ:SHELL-COMMAND
       BIND [-M KEYMAP] KEYSEQ:FUNCTION-NAME
       BIND READLINE-COMMAND
              DISPLAY CURRENT READLINE KEY AND FUNCTION BINDINGS, BIND  A  KEY
              SEQUENCE  TO  A  READLINE  FUNCTION  OR MACRO, OR SET A READLINE
              VARIABLE.  EACH NON-OPTION ARGUMENT IS A  COMMAND  AS  IT  WOULD
              APPEAR  IN  .INPUTRC, BUT EACH BINDING OR COMMAND MUST BE PASSED
              AS A SEPARATE ARGUMENT; E.G.,  '"\C-X\C-R":  RE-READ-INIT-FILE'.
              OPTIONS, IF SUPPLIED, HAVE THE FOLLOWING MEANINGS:
              -M KEYMAP
                     USE KEYMAP AS THE KEYMAP TO BE AFFECTED BY THE SUBSEQUENT
                     BINDINGS.  ACCEPTABLE KEYMAP NAMES ARE EMACS, EMACS-STAN‐
                     DARD,  EMACS-META,  EMACS-CTLX,  VI, VI-MOVE, VI-COMMAND,
                     AND VI-INSERT.  VI IS EQUIVALENT TO VI-COMMAND; EMACS  IS
                     EQUIVALENT TO EMACS-STANDARD.
              -L     LIST THE NAMES OF ALL READLINE FUNCTIONS.
              -P     DISPLAY  READLINE  FUNCTION  NAMES AND BINDINGS IN SUCH A
                     WAY THAT THEY CAN BE RE-READ.
              -P     LIST CURRENT READLINE FUNCTION NAMES AND BINDINGS.
              -S     DISPLAY READLINE KEY SEQUENCES BOUND TO  MACROS  AND  THE
                     STRINGS  THEY  OUTPUT  IN SUCH A WAY THAT THEY CAN BE RE-
                     READ.
              -S     DISPLAY READLINE KEY SEQUENCES BOUND TO  MACROS  AND  THE
                     STRINGS THEY OUTPUT.
              -V     DISPLAY  READLINE VARIABLE NAMES AND VALUES IN SUCH A WAY
                     THAT THEY CAN BE RE-READ.
              -V     LIST CURRENT READLINE VARIABLE NAMES AND VALUES.
              -F FILENAME
                     READ KEY BINDINGS FROM FILENAME.
              -Q FUNCTION
                     QUERY ABOUT WHICH KEYS INVOKE THE NAMED FUNCTION.
              -U FUNCTION
                     UNBIND ALL KEYS BOUND TO THE NAMED FUNCTION.
              -R KEYSEQ
                     REMOVE ANY CURRENT BINDING FOR KEYSEQ.
              -X KEYSEQ:SHELL-COMMAND
                     CAUSE SHELL-COMMAND TO BE  EXECUTED  WHENEVER  KEYSEQ  IS
                     ENTERED.   WHEN SHELL-COMMAND IS EXECUTED, THE SHELL SETS
                     THE READLINE_LINE VARIABLE TO THE CONTENTS OF  THE  READ‐
                     LINE  LINE  BUFFER AND THE READLINE_POINT VARIABLE TO THE
                     CURRENT LOCATION OF THE INSERTION POINT.  IF THE EXECUTED
                     COMMAND  CHANGES  THE  VALUE  OF  READLINE_LINE  OR READ‐
                     LINE_POINT, THOSE NEW VALUES WILL  BE  REFLECTED  IN  THE
                     EDITING STATE.
              -X     LIST  ALL  KEY  SEQUENCES BOUND TO SHELL COMMANDS AND THE
                     ASSOCIATED COMMANDS IN A FORMAT THAT  CAN  BE  REUSED  AS
                     INPUT.

              THE  RETURN VALUE IS 0 UNLESS AN UNRECOGNIZED OPTION IS GIVEN OR
              AN ERROR OCCURRED.

       BREAK [N]
              EXIT FROM WITHIN A FOR, WHILE, UNTIL, OR SELECT LOOP.  IF  N  IS
              SPECIFIED, BREAK N LEVELS.  N MUST BE ≥ 1.  IF N IS GREATER THAN
              THE NUMBER OF ENCLOSING LOOPS, ALL ENCLOSING LOOPS  ARE  EXITED.
              THE  RETURN  VALUE IS 0 UNLESS N IS NOT GREATER THAN OR EQUAL TO
              1.

       BUILTIN SHELL-BUILTIN [ARGUMENTS]
              EXECUTE THE SPECIFIED SHELL BUILTIN, PASSING IT  ARGUMENTS,  AND
              RETURN ITS EXIT STATUS.  THIS IS USEFUL WHEN DEFINING A FUNCTION
              WHOSE NAME IS THE SAME AS A SHELL BUILTIN, RETAINING  THE  FUNC‐
              TIONALITY OF THE BUILTIN WITHIN THE FUNCTION.  THE CD BUILTIN IS
              COMMONLY REDEFINED THIS WAY.  THE  RETURN  STATUS  IS  FALSE  IF
              SHELL-BUILTIN IS NOT A SHELL BUILTIN COMMAND.

       CALLER [EXPR]
              RETURNS THE CONTEXT OF ANY ACTIVE SUBROUTINE CALL (A SHELL FUNC‐
              TION OR A SCRIPT EXECUTED WITH THE . OR SOURCE BUILTINS).  WITH‐
              OUT EXPR, CALLER DISPLAYS THE LINE NUMBER AND SOURCE FILENAME OF
              THE CURRENT SUBROUTINE CALL.  IF A NON-NEGATIVE INTEGER IS  SUP‐
              PLIED AS EXPR, CALLER DISPLAYS THE LINE NUMBER, SUBROUTINE NAME,
              AND SOURCE FILE CORRESPONDING TO THAT POSITION  IN  THE  CURRENT
              EXECUTION  CALL  STACK.  THIS EXTRA INFORMATION MAY BE USED, FOR
              EXAMPLE, TO PRINT A STACK TRACE.  THE CURRENT FRAME IS FRAME  0.
              THE  RETURN  VALUE IS 0 UNLESS THE SHELL IS NOT EXECUTING A SUB‐
              ROUTINE CALL OR EXPR DOES NOT CORRESPOND TO A VALID POSITION  IN
              THE CALL STACK.

       CD [-L|[-P [-E]] [-@]] [DIR]
              CHANGE  THE  CURRENT  DIRECTORY TO DIR.  IF DIR IS NOT SUPPLIED,
              THE VALUE OF THE HOME SHELL VARIABLE IS THE DEFAULT.  ANY  ADDI‐
              TIONAL ARGUMENTS FOLLOWING DIR ARE IGNORED.  THE VARIABLE CDPATH
              DEFINES THE SEARCH PATH FOR THE DIRECTORY CONTAINING  DIR:  EACH
              DIRECTORY  NAME  IN  CDPATH  IS  SEARCHED  FOR DIR.  ALTERNATIVE
              DIRECTORY NAMES IN CDPATH ARE SEPARATED BY A COLON (:).  A  NULL
              DIRECTORY  NAME  IN CDPATH IS THE SAME AS THE CURRENT DIRECTORY,
              I.E., ``.''.  IF DIR BEGINS WITH A SLASH (/), THEN CDPATH IS NOT
              USED.  THE  -P  OPTION  CAUSES  CD TO USE THE PHYSICAL DIRECTORY
              STRUCTURE BY RESOLVING SYMBOLIC LINKS WHILE TRAVERSING  DIR  AND
              BEFORE PROCESSING INSTANCES OF .. IN DIR (SEE ALSO THE -P OPTION
              TO THE SET BUILTIN COMMAND); THE -L OPTION FORCES SYMBOLIC LINKS
              TO  BE FOLLOWED BY RESOLVING THE LINK AFTER PROCESSING INSTANCES
              OF .. IN DIR.  IF .. APPEARS IN DIR, IT IS PROCESSED BY REMOVING
              THE  IMMEDIATELY PREVIOUS PATHNAME COMPONENT FROM DIR, BACK TO A
              SLASH OR THE BEGINNING OF DIR.  IF THE  -E  OPTION  IS  SUPPLIED
              WITH  -P,  AND  THE CURRENT WORKING DIRECTORY CANNOT BE SUCCESS‐
              FULLY DETERMINED AFTER A SUCCESSFUL DIRECTORY  CHANGE,  CD  WILL
              RETURN  AN UNSUCCESSFUL STATUS.  ON SYSTEMS THAT SUPPORT IT, THE
              -@ OPTION PRESENTS THE EXTENDED  ATTRIBUTES  ASSOCIATED  WITH  A
              FILE  AS  A DIRECTORY.  AN ARGUMENT OF - IS CONVERTED TO $OLDPWD
              BEFORE THE DIRECTORY CHANGE IS ATTEMPTED.  IF A NON-EMPTY DIREC‐
              TORY  NAME  FROM  CDPATH IS USED, OR IF - IS THE FIRST ARGUMENT,
              AND THE DIRECTORY CHANGE IS SUCCESSFUL, THE ABSOLUTE PATHNAME OF
              THE  NEW  WORKING  DIRECTORY  IS WRITTEN TO THE STANDARD OUTPUT.
              THE RETURN VALUE IS  TRUE  IF  THE  DIRECTORY  WAS  SUCCESSFULLY
              CHANGED; FALSE OTHERWISE.

       COMMAND [-PVV] COMMAND [ARG ...]
              RUN  COMMAND  WITH  ARGS  SUPPRESSING  THE NORMAL SHELL FUNCTION
              LOOKUP. ONLY BUILTIN COMMANDS OR COMMANDS FOUND IN THE PATH  ARE
              EXECUTED.   IF THE -P OPTION IS GIVEN, THE SEARCH FOR COMMAND IS
              PERFORMED USING A DEFAULT VALUE FOR PATH THAT IS  GUARANTEED  TO
              FIND  ALL  OF  THE  STANDARD  UTILITIES.  IF EITHER THE -V OR -V
              OPTION IS SUPPLIED, A DESCRIPTION OF COMMAND IS PRINTED.  THE -V
              OPTION  CAUSES  A SINGLE WORD INDICATING THE COMMAND OR FILENAME
              USED TO INVOKE COMMAND TO BE DISPLAYED; THE -V OPTION PRODUCES A
              MORE  VERBOSE  DESCRIPTION.  IF THE -V OR -V OPTION IS SUPPLIED,
              THE EXIT STATUS IS 0 IF COMMAND WAS FOUND, AND  1  IF  NOT.   IF
              NEITHER OPTION IS SUPPLIED AND AN ERROR OCCURRED OR COMMAND CAN‐
              NOT BE FOUND, THE EXIT STATUS IS 127.  OTHERWISE, THE EXIT  STA‐
              TUS OF THE COMMAND BUILTIN IS THE EXIT STATUS OF COMMAND.

       COMPGEN [OPTION] [WORD]
              GENERATE  POSSIBLE  COMPLETION MATCHES FOR WORD ACCORDING TO THE
              OPTIONS, WHICH MAY  BE  ANY  OPTION  ACCEPTED  BY  THE  COMPLETE
              BUILTIN  WITH  THE EXCEPTION OF -P AND -R, AND WRITE THE MATCHES
              TO THE STANDARD OUTPUT.  WHEN USING THE -F OR  -C  OPTIONS,  THE
              VARIOUS  SHELL  VARIABLES  SET  BY  THE  PROGRAMMABLE COMPLETION
              FACILITIES, WHILE AVAILABLE, WILL NOT HAVE USEFUL VALUES.

              THE MATCHES WILL BE GENERATED IN THE SAME WAY AS IF THE PROGRAM‐
              MABLE COMPLETION CODE HAD GENERATED THEM DIRECTLY FROM A COMPLE‐
              TION SPECIFICATION WITH THE SAME FLAGS.  IF WORD  IS  SPECIFIED,
              ONLY THOSE COMPLETIONS MATCHING WORD WILL BE DISPLAYED.

              THE  RETURN  VALUE IS TRUE UNLESS AN INVALID OPTION IS SUPPLIED,
              OR NO MATCHES WERE GENERATED.

       COMPLETE [-ABCDEFGJKSUV] [-O COMP-OPTION] [-DE] [-A ACTION]  [-G  GLOB‐
       PAT] [-W WORDLIST] [-F FUNCTION] [-C COMMAND]
              [-X FILTERPAT] [-P PREFIX] [-S SUFFIX] NAME [NAME ...]
       COMPLETE -PR [-DE] [NAME ...]
              SPECIFY  HOW ARGUMENTS TO EACH NAME SHOULD BE COMPLETED.  IF THE
              -P OPTION IS SUPPLIED, OR IF NO OPTIONS ARE  SUPPLIED,  EXISTING
              COMPLETION  SPECIFICATIONS ARE PRINTED IN A WAY THAT ALLOWS THEM
              TO BE REUSED AS INPUT.  THE -R OPTION REMOVES A COMPLETION SPEC‐
              IFICATION  FOR EACH NAME, OR, IF NO NAMES ARE SUPPLIED, ALL COM‐
              PLETION  SPECIFICATIONS.   THE  -D  OPTION  INDICATES  THAT  THE
              REMAINING  OPTIONS  AND  ACTIONS SHOULD APPLY TO THE ``DEFAULT''
              COMMAND COMPLETION; THAT IS, COMPLETION ATTEMPTED ON  A  COMMAND
              FOR  WHICH  NO  COMPLETION  HAS PREVIOUSLY BEEN DEFINED.  THE -E
              OPTION INDICATES THAT THE REMAINING OPTIONS AND  ACTIONS  SHOULD
              APPLY  TO  ``EMPTY''  COMMAND  COMPLETION;  THAT  IS, COMPLETION
              ATTEMPTED ON A BLANK LINE.

              THE PROCESS OF APPLYING  THESE  COMPLETION  SPECIFICATIONS  WHEN
              WORD  COMPLETION  IS ATTEMPTED IS DESCRIBED ABOVE UNDER PROGRAM‐
              MABLE COMPLETION.

              OTHER OPTIONS, IF SPECIFIED, HAVE THE FOLLOWING  MEANINGS.   THE
              ARGUMENTS  TO THE -G, -W, AND -X OPTIONS (AND, IF NECESSARY, THE
              -P AND -S OPTIONS) SHOULD BE QUOTED TO PROTECT THEM FROM  EXPAN‐
              SION BEFORE THE COMPLETE BUILTIN IS INVOKED.
              -O COMP-OPTION
                      THE  COMP-OPTION  CONTROLS  SEVERAL ASPECTS OF THE COMP‐
                      SPEC'S BEHAVIOR BEYOND THE SIMPLE GENERATION OF  COMPLE‐
                      TIONS.  COMP-OPTION MAY BE ONE OF:
                      BASHDEFAULT
                              PERFORM THE REST OF THE DEFAULT BASH COMPLETIONS
                              IF THE COMPSPEC GENERATES NO MATCHES.
                      DEFAULT USE READLINE'S DEFAULT  FILENAME  COMPLETION  IF
                              THE COMPSPEC GENERATES NO MATCHES.
                      DIRNAMES
                              PERFORM  DIRECTORY  NAME COMPLETION IF THE COMP‐
                              SPEC GENERATES NO MATCHES.
                      FILENAMES
                              TELL READLINE THAT THE COMPSPEC GENERATES  FILE‐
                              NAMES,  SO  IT CAN PERFORM ANY FILENAME-SPECIFIC
                              PROCESSING (LIKE ADDING  A  SLASH  TO  DIRECTORY
                              NAMES,  QUOTING SPECIAL CHARACTERS, OR SUPPRESS‐
                              ING TRAILING SPACES).  INTENDED TO BE USED  WITH
                              SHELL FUNCTIONS.
                      NOQUOTE TELL  READLINE  NOT TO QUOTE THE COMPLETED WORDS
                              IF THEY ARE FILENAMES (QUOTING FILENAMES IS  THE
                              DEFAULT).
                      NOSPACE TELL   READLINE  NOT  TO  APPEND  A  SPACE  (THE
                              DEFAULT) TO WORDS COMPLETED AT THE  END  OF  THE
                              LINE.
                      PLUSDIRS
                              AFTER  ANY  MATCHES  DEFINED BY THE COMPSPEC ARE
                              GENERATED,   DIRECTORY   NAME   COMPLETION    IS
                              ATTEMPTED  AND  ANY  MATCHES  ARE  ADDED  TO THE
                              RESULTS OF THE OTHER ACTIONS.
              -A ACTION
                      THE ACTION MAY BE ONE OF THE  FOLLOWING  TO  GENERATE  A
                      LIST OF POSSIBLE COMPLETIONS:
                      ALIAS   ALIAS NAMES.  MAY ALSO BE SPECIFIED AS -A.
                      ARRAYVAR
                              ARRAY VARIABLE NAMES.
                      BINDING READLINE KEY BINDING NAMES.
                      BUILTIN NAMES  OF  SHELL  BUILTIN COMMANDS.  MAY ALSO BE
                              SPECIFIED AS -B.
                      COMMAND COMMAND NAMES.  MAY ALSO BE SPECIFIED AS -C.
                      DIRECTORY
                              DIRECTORY NAMES.  MAY ALSO BE SPECIFIED AS -D.
                      DISABLED
                              NAMES OF DISABLED SHELL BUILTINS.
                      ENABLED NAMES OF ENABLED SHELL BUILTINS.
                      EXPORT  NAMES OF EXPORTED SHELL VARIABLES.  MAY ALSO  BE
                              SPECIFIED AS -E.
                      FILE    FILE NAMES.  MAY ALSO BE SPECIFIED AS -F.
                      FUNCTION
                              NAMES OF SHELL FUNCTIONS.
                      GROUP   GROUP NAMES.  MAY ALSO BE SPECIFIED AS -G.
                      HELPTOPIC
                              HELP TOPICS AS ACCEPTED BY THE HELP BUILTIN.
                      HOSTNAME
                              HOSTNAMES,  AS  TAKEN FROM THE FILE SPECIFIED BY
                              THE HOSTFILE SHELL VARIABLE.
                      JOB     JOB NAMES, IF JOB CONTROL IS ACTIVE.   MAY  ALSO
                              BE SPECIFIED AS -J.
                      KEYWORD SHELL  RESERVED WORDS.  MAY ALSO BE SPECIFIED AS
                              -K.
                      RUNNING NAMES OF RUNNING JOBS, IF JOB CONTROL IS ACTIVE.
                      SERVICE SERVICE NAMES.  MAY ALSO BE SPECIFIED AS -S.
                      SETOPT  VALID ARGUMENTS FOR THE -O  OPTION  TO  THE  SET
                              BUILTIN.
                      SHOPT   SHELL  OPTION  NAMES  AS  ACCEPTED  BY THE SHOPT
                              BUILTIN.
                      SIGNAL  SIGNAL NAMES.
                      STOPPED NAMES OF STOPPED JOBS, IF JOB CONTROL IS ACTIVE.
                      USER    USER NAMES.  MAY ALSO BE SPECIFIED AS -U.
                      VARIABLE
                              NAMES OF ALL SHELL VARIABLES.  MAY ALSO BE SPEC‐
                              IFIED AS -V.
              -C COMMAND
                      COMMAND  IS  EXECUTED IN A SUBSHELL ENVIRONMENT, AND ITS
                      OUTPUT IS USED AS THE POSSIBLE COMPLETIONS.
              -F FUNCTION
                      THE SHELL FUNCTION FUNCTION IS EXECUTED IN  THE  CURRENT
                      SHELL  ENVIRONMENT.   WHEN THE FUNCTION IS EXECUTED, THE
                      FIRST ARGUMENT ($1) IS THE NAME  OF  THE  COMMAND  WHOSE
                      ARGUMENTS  ARE BEING COMPLETED, THE SECOND ARGUMENT ($2)
                      IS THE WORD BEING COMPLETED, AND THE THIRD ARGUMENT ($3)
                      IS  THE  WORD  PRECEDING THE WORD BEING COMPLETED ON THE
                      CURRENT COMMAND LINE.  WHEN IT  FINISHES,  THE  POSSIBLE
                      COMPLETIONS  ARE RETRIEVED FROM THE VALUE OF THE COMPRE‐
                      PLY ARRAY VARIABLE.
              -G GLOBPAT
                      THE PATHNAME EXPANSION PATTERN GLOBPAT  IS  EXPANDED  TO
                      GENERATE THE POSSIBLE COMPLETIONS.
              -P PREFIX
                      PREFIX  IS  ADDED AT THE BEGINNING OF EACH POSSIBLE COM‐
                      PLETION AFTER ALL OTHER OPTIONS HAVE BEEN APPLIED.
              -S SUFFIX
                      SUFFIX IS APPENDED TO EACH POSSIBLE COMPLETION AFTER ALL
                      OTHER OPTIONS HAVE BEEN APPLIED.
              -W WORDLIST
                      THE  WORDLIST  IS  SPLIT USING THE CHARACTERS IN THE IFS
                      SPECIAL VARIABLE AS DELIMITERS, AND EACH RESULTANT  WORD
                      IS  EXPANDED.   THE POSSIBLE COMPLETIONS ARE THE MEMBERS
                      OF THE RESULTANT LIST WHICH MATCH THE  WORD  BEING  COM‐
                      PLETED.
              -X FILTERPAT
                      FILTERPAT  IS  A PATTERN AS USED FOR PATHNAME EXPANSION.
                      IT IS APPLIED TO THE LIST OF POSSIBLE COMPLETIONS GENER‐
                      ATED  BY  THE  PRECEDING OPTIONS AND ARGUMENTS, AND EACH
                      COMPLETION MATCHING FILTERPAT IS REMOVED FROM THE  LIST.
                      A  LEADING  !  IN FILTERPAT NEGATES THE PATTERN; IN THIS
                      CASE, ANY COMPLETION NOT MATCHING FILTERPAT IS REMOVED.

              THE RETURN VALUE IS TRUE UNLESS AN INVALID OPTION  IS  SUPPLIED,
              AN  OPTION  OTHER THAN -P OR -R IS SUPPLIED WITHOUT A NAME ARGU‐
              MENT, AN ATTEMPT IS MADE TO REMOVE  A  COMPLETION  SPECIFICATION
              FOR A NAME FOR WHICH NO SPECIFICATION EXISTS, OR AN ERROR OCCURS
              ADDING A COMPLETION SPECIFICATION.

       COMPOPT [-O OPTION] [-DE] [+O OPTION] [NAME]
              MODIFY  COMPLETION  OPTIONS  FOR  EACH  NAME  ACCORDING  TO  THE
              OPTIONS,  OR  FOR THE CURRENTLY-EXECUTING COMPLETION IF NO NAMES
              ARE SUPPLIED.  IF NO OPTIONS ARE GIVEN, DISPLAY  THE  COMPLETION
              OPTIONS  FOR  EACH NAME OR THE CURRENT COMPLETION.  THE POSSIBLE
              VALUES OF OPTION  ARE  THOSE  VALID  FOR  THE  COMPLETE  BUILTIN
              DESCRIBED  ABOVE.   THE  -D  OPTION INDICATES THAT THE REMAINING
              OPTIONS SHOULD APPLY TO THE ``DEFAULT'' COMMAND COMPLETION; THAT
              IS,  COMPLETION  ATTEMPTED  ON A COMMAND FOR WHICH NO COMPLETION
              HAS PREVIOUSLY BEEN DEFINED.  THE -E OPTION INDICATES  THAT  THE
              REMAINING  OPTIONS SHOULD APPLY TO ``EMPTY'' COMMAND COMPLETION;
              THAT IS, COMPLETION ATTEMPTED ON A BLANK LINE.

              THE RETURN VALUE IS TRUE UNLESS AN INVALID OPTION  IS  SUPPLIED,
              AN ATTEMPT IS MADE TO MODIFY THE OPTIONS FOR A NAME FOR WHICH NO
              COMPLETION SPECIFICATION EXISTS, OR AN OUTPUT ERROR OCCURS.

       CONTINUE [N]
              RESUME THE NEXT ITERATION OF THE ENCLOSING FOR, WHILE, UNTIL, OR
              SELECT  LOOP.   IF  N  IS SPECIFIED, RESUME AT THE NTH ENCLOSING
              LOOP.  N MUST BE ≥ 1.  IF  N  IS  GREATER  THAN  THE  NUMBER  OF
              ENCLOSING  LOOPS,  THE  LAST  ENCLOSING  LOOP (THE ``TOP-LEVEL''
              LOOP) IS RESUMED.  THE RETURN VALUE IS 0 UNLESS N IS NOT GREATER
              THAN OR EQUAL TO 1.

       DECLARE [-AAFFGILNRTUX] [-P] [NAME[=VALUE] ...]
       TYPESET [-AAFFGILNRTUX] [-P] [NAME[=VALUE] ...]
              DECLARE  VARIABLES AND/OR GIVE THEM ATTRIBUTES.  IF NO NAMES ARE
              GIVEN THEN DISPLAY THE VALUES OF VARIABLES.  THE -P OPTION  WILL
              DISPLAY THE ATTRIBUTES AND VALUES OF EACH NAME.  WHEN -P IS USED
              WITH NAME ARGUMENTS, ADDITIONAL OPTIONS, OTHER THAN -F  AND  -F,
              ARE  IGNORED.   WHEN  -P  IS SUPPLIED WITHOUT NAME ARGUMENTS, IT
              WILL DISPLAY THE ATTRIBUTES AND VALUES OF ALL  VARIABLES  HAVING
              THE ATTRIBUTES SPECIFIED BY THE ADDITIONAL OPTIONS.  IF NO OTHER
              OPTIONS  ARE  SUPPLIED  WITH  -P,  DECLARE  WILL   DISPLAY   THE
              ATTRIBUTES  AND  VALUES  OF  ALL SHELL VARIABLES.  THE -F OPTION
              WILL RESTRICT THE DISPLAY TO SHELL  FUNCTIONS.   THE  -F  OPTION
              INHIBITS  THE DISPLAY OF FUNCTION DEFINITIONS; ONLY THE FUNCTION
              NAME AND ATTRIBUTES ARE PRINTED.  IF THE EXTDEBUG  SHELL  OPTION
              IS  ENABLED  USING  SHOPT,  THE SOURCE FILE NAME AND LINE NUMBER
              WHERE THE FUNCTION IS DEFINED ARE DISPLAYED  AS  WELL.   THE  -F
              OPTION IMPLIES -F.  THE -G OPTION FORCES VARIABLES TO BE CREATED
              OR MODIFIED AT THE GLOBAL SCOPE, EVEN WHEN DECLARE  IS  EXECUTED
              IN  A  SHELL  FUNCTION.   IT IS IGNORED IN ALL OTHER CASES.  THE
              FOLLOWING OPTIONS CAN BE USED TO RESTRICT  OUTPUT  TO  VARIABLES
              WITH THE SPECIFIED ATTRIBUTE OR TO GIVE VARIABLES ATTRIBUTES:
              -A     EACH  NAME  IS  AN  INDEXED  ARRAY  VARIABLE  (SEE ARRAYS
                     ABOVE).
              -A     EACH NAME IS AN ASSOCIATIVE ARRAY  VARIABLE  (SEE  ARRAYS
                     ABOVE).
              -F     USE FUNCTION NAMES ONLY.
              -I     THE VARIABLE IS TREATED AS AN INTEGER; ARITHMETIC EVALUA‐
                     TION (SEE ARITHMETIC EVALUATION ABOVE) IS PERFORMED  WHEN
                     THE VARIABLE IS ASSIGNED A VALUE.
              -L     WHEN  THE  VARIABLE  IS  ASSIGNED A VALUE, ALL UPPER-CASE
                     CHARACTERS ARE CONVERTED TO LOWER-CASE.   THE  UPPER-CASE
                     ATTRIBUTE IS DISABLED.
              -N     GIVE  EACH  NAME  THE NAMEREF ATTRIBUTE, MAKING IT A NAME
                     REFERENCE TO ANOTHER VARIABLE.  THAT  OTHER  VARIABLE  IS
                     DEFINED BY THE VALUE OF NAME.  ALL REFERENCES AND ASSIGN‐
                     MENTS TO NAME,  EXCEPT  FOR  CHANGING  THE  -N  ATTRIBUTE
                     ITSELF,  ARE  PERFORMED  ON  THE  VARIABLE  REFERENCED BY
                     NAME'S VALUE.  THE -N  ATTRIBUTE  CANNOT  BE  APPLIED  TO
                     ARRAY VARIABLES.
              -R     MAKE NAMES READONLY.  THESE NAMES CANNOT THEN BE ASSIGNED
                     VALUES BY SUBSEQUENT ASSIGNMENT STATEMENTS OR UNSET.
              -T     GIVE EACH NAME THE  TRACE  ATTRIBUTE.   TRACED  FUNCTIONS
                     INHERIT  THE  DEBUG  AND  RETURN  TRAPS  FROM THE CALLING
                     SHELL.  THE TRACE ATTRIBUTE HAS NO  SPECIAL  MEANING  FOR
                     VARIABLES.
              -U     WHEN  THE  VARIABLE  IS  ASSIGNED A VALUE, ALL LOWER-CASE
                     CHARACTERS ARE CONVERTED TO UPPER-CASE.   THE  LOWER-CASE
                     ATTRIBUTE IS DISABLED.
              -X     MARK  NAMES  FOR  EXPORT  TO  SUBSEQUENT COMMANDS VIA THE
                     ENVIRONMENT.

              USING `+' INSTEAD OF `-' TURNS OFF THE ATTRIBUTE  INSTEAD,  WITH
              THE EXCEPTIONS THAT +A MAY NOT BE USED TO DESTROY AN ARRAY VARI‐
              ABLE AND +R WILL NOT REMOVE THE READONLY ATTRIBUTE.   WHEN  USED
              IN A FUNCTION, DECLARE AND TYPESET MAKE EACH NAME LOCAL, AS WITH
              THE LOCAL COMMAND, UNLESS THE -G OPTION IS SUPPLIED.  IF A VARI‐
              ABLE  NAME  IS  FOLLOWED BY =VALUE, THE VALUE OF THE VARIABLE IS
              SET TO VALUE.  WHEN USING -A OR -A AND THE  COMPOUND  ASSIGNMENT
              SYNTAX  TO  CREATE ARRAY VARIABLES, ADDITIONAL ATTRIBUTES DO NOT
              TAKE EFFECT UNTIL SUBSEQUENT ASSIGNMENTS.  THE RETURN VALUE IS 0
              UNLESS  AN  INVALID OPTION IS ENCOUNTERED, AN ATTEMPT IS MADE TO
              DEFINE A FUNCTION USING ``-F FOO=BAR'', AN ATTEMPT  IS  MADE  TO
              ASSIGN  A  VALUE  TO  A READONLY VARIABLE, AN ATTEMPT IS MADE TO
              ASSIGN A VALUE TO AN ARRAY VARIABLE WITHOUT USING  THE  COMPOUND
              ASSIGNMENT  SYNTAX (SEE ARRAYS ABOVE), ONE OF THE NAMES IS NOT A
              VALID SHELL VARIABLE NAME, AN ATTEMPT IS MADE TO TURN OFF  READ‐
              ONLY  STATUS FOR A READONLY VARIABLE, AN ATTEMPT IS MADE TO TURN
              OFF ARRAY STATUS FOR AN ARRAY VARIABLE, OR AN ATTEMPT IS MADE TO
              DISPLAY A NON-EXISTENT FUNCTION WITH -F.

       DIRS [-CLPV] [+N] [-N]
              WITHOUT  OPTIONS,  DISPLAYS  THE  LIST  OF  CURRENTLY REMEMBERED
              DIRECTORIES.  THE DEFAULT DISPLAY  IS  ON  A  SINGLE  LINE  WITH
              DIRECTORY  NAMES  SEPARATED BY SPACES.  DIRECTORIES ARE ADDED TO
              THE LIST WITH  THE  PUSHD  COMMAND;  THE  POPD  COMMAND  REMOVES
              ENTRIES FROM THE LIST.
              -C     CLEARS  THE  DIRECTORY  STACK  BY  DELETING  ALL  OF  THE
                     ENTRIES.
              -L     PRODUCES A LISTING  USING  FULL  PATHNAMES;  THE  DEFAULT
                     LISTING FORMAT USES A TILDE TO DENOTE THE HOME DIRECTORY.
              -P     PRINT THE DIRECTORY STACK WITH ONE ENTRY PER LINE.
              -V     PRINT  THE  DIRECTORY STACK WITH ONE ENTRY PER LINE, PRE‐
                     FIXING EACH ENTRY WITH ITS INDEX IN THE STACK.
              +N     DISPLAYS THE NTH ENTRY COUNTING FROM THE LEFT OF THE LIST
                     SHOWN BY DIRS WHEN INVOKED WITHOUT OPTIONS, STARTING WITH
                     ZERO.
              -N     DISPLAYS THE NTH ENTRY COUNTING FROM  THE  RIGHT  OF  THE
                     LIST SHOWN BY DIRS WHEN INVOKED WITHOUT OPTIONS, STARTING
                     WITH ZERO.

              THE RETURN VALUE IS 0 UNLESS AN INVALID OPTION IS SUPPLIED OR  N
              INDEXES BEYOND THE END OF THE DIRECTORY STACK.

       DISOWN [-AR] [-H] [JOBSPEC ...]
              WITHOUT  OPTIONS,  REMOVE  EACH JOBSPEC FROM THE TABLE OF ACTIVE
              JOBS.  IF JOBSPEC IS NOT PRESENT, AND NEITHER THE -A NOR THE  -R
              OPTION  IS  SUPPLIED, THE CURRENT JOB IS USED.  IF THE -H OPTION
              IS GIVEN, EACH JOBSPEC IS NOT REMOVED FROM  THE  TABLE,  BUT  IS
              MARKED  SO  THAT  SIGHUP  IS  NOT  SENT  TO THE JOB IF THE SHELL
              RECEIVES A SIGHUP.  IF NO JOBSPEC IS  SUPPLIED,  THE  -A  OPTION
              MEANS  TO  REMOVE OR MARK ALL JOBS; THE -R OPTION WITHOUT A JOB‐
              SPEC ARGUMENT RESTRICTS OPERATION TO RUNNING JOBS.   THE  RETURN
              VALUE IS 0 UNLESS A JOBSPEC DOES NOT SPECIFY A VALID JOB.

       ECHO [-NEE] [ARG ...]
              OUTPUT  THE  ARGS,  SEPARATED  BY SPACES, FOLLOWED BY A NEWLINE.
              THE RETURN STATUS IS 0 UNLESS A WRITE ERROR OCCURS.   IF  -N  IS
              SPECIFIED, THE TRAILING NEWLINE IS SUPPRESSED.  IF THE -E OPTION
              IS GIVEN,  INTERPRETATION  OF  THE  FOLLOWING  BACKSLASH-ESCAPED
              CHARACTERS  IS  ENABLED.  THE -E OPTION DISABLES THE INTERPRETA‐
              TION OF THESE ESCAPE CHARACTERS, EVEN ON SYSTEMS WHERE THEY  ARE
              INTERPRETED  BY  DEFAULT.  THE XPG_ECHO SHELL OPTION MAY BE USED
              TO DYNAMICALLY DETERMINE  WHETHER  OR  NOT  ECHO  EXPANDS  THESE
              ESCAPE  CHARACTERS  BY  DEFAULT.   ECHO DOES NOT INTERPRET -- TO
              MEAN THE END OF OPTIONS.  ECHO INTERPRETS THE  FOLLOWING  ESCAPE
              SEQUENCES:
              \A     ALERT (BELL)
              \B     BACKSPACE
              \C     SUPPRESS FURTHER OUTPUT
              \E
              \E     AN ESCAPE CHARACTER
              \F     FORM FEED
              \N     NEW LINE
              \R     CARRIAGE RETURN
              \T     HORIZONTAL TAB
              \V     VERTICAL TAB
              \\     BACKSLASH
              \0NNN  THE  EIGHT-BIT  CHARACTER  WHOSE VALUE IS THE OCTAL VALUE
                     NNN (ZERO TO THREE OCTAL DIGITS)
              \XHH   THE EIGHT-BIT CHARACTER WHOSE VALUE  IS  THE  HEXADECIMAL
                     VALUE HH (ONE OR TWO HEX DIGITS)
              \UHHHH THE  UNICODE (ISO/IEC 10646) CHARACTER WHOSE VALUE IS THE
                     HEXADECIMAL VALUE HHHH (ONE TO FOUR HEX DIGITS)
              \UHHHHHHHH
                     THE UNICODE (ISO/IEC 10646) CHARACTER WHOSE VALUE IS  THE
                     HEXADECIMAL VALUE HHHHHHHH (ONE TO EIGHT HEX DIGITS)

       ENABLE [-A] [-DNPS] [-F FILENAME] [NAME ...]
              ENABLE  AND DISABLE BUILTIN SHELL COMMANDS.  DISABLING A BUILTIN
              ALLOWS A DISK COMMAND WHICH HAS THE SAME NAME AS A SHELL BUILTIN
              TO  BE  EXECUTED WITHOUT SPECIFYING A FULL PATHNAME, EVEN THOUGH
              THE SHELL NORMALLY SEARCHES FOR BUILTINS BEFORE  DISK  COMMANDS.
              IF  -N  IS  USED,  EACH  NAME  IS DISABLED; OTHERWISE, NAMES ARE
              ENABLED.  FOR EXAMPLE, TO USE THE TEST BINARY FOUND VIA THE PATH
              INSTEAD  OF  THE  SHELL BUILTIN VERSION, RUN ``ENABLE -N TEST''.
              THE -F OPTION MEANS TO LOAD THE NEW BUILTIN  COMMAND  NAME  FROM
              SHARED OBJECT FILENAME, ON SYSTEMS THAT SUPPORT DYNAMIC LOADING.
              THE -D OPTION WILL DELETE A BUILTIN PREVIOUSLY LOADED  WITH  -F.
              IF NO NAME ARGUMENTS ARE GIVEN, OR IF THE -P OPTION IS SUPPLIED,
              A LIST OF SHELL BUILTINS IS PRINTED.  WITH NO OTHER OPTION ARGU‐
              MENTS,  THE  LIST CONSISTS OF ALL ENABLED SHELL BUILTINS.  IF -N
              IS SUPPLIED, ONLY DISABLED BUILTINS ARE PRINTED.  IF -A IS  SUP‐
              PLIED,  THE  LIST PRINTED INCLUDES ALL BUILTINS, WITH AN INDICA‐
              TION OF WHETHER OR NOT EACH IS ENABLED.  IF -S IS SUPPLIED,  THE
              OUTPUT  IS RESTRICTED TO THE POSIX SPECIAL BUILTINS.  THE RETURN
              VALUE IS 0 UNLESS A NAME IS NOT A SHELL BUILTIN OR THERE  IS  AN
              ERROR LOADING A NEW BUILTIN FROM A SHARED OBJECT.

       EVAL [ARG ...]
              THE  ARGS  ARE READ AND CONCATENATED TOGETHER INTO A SINGLE COM‐
              MAND.  THIS COMMAND IS THEN READ AND EXECUTED BY THE SHELL,  AND
              ITS  EXIT STATUS IS RETURNED AS THE VALUE OF EVAL.  IF THERE ARE
              NO ARGS, OR ONLY NULL ARGUMENTS, EVAL RETURNS 0.

       EXEC [-CL] [-A NAME] [COMMAND [ARGUMENTS]]
              IF COMMAND IS SPECIFIED, IT REPLACES THE SHELL.  NO NEW  PROCESS
              IS  CREATED.  THE ARGUMENTS BECOME THE ARGUMENTS TO COMMAND.  IF
              THE -L OPTION IS SUPPLIED, THE SHELL PLACES A DASH AT THE BEGIN‐
              NING  OF  THE  ZEROTH  ARGUMENT PASSED TO COMMAND.  THIS IS WHAT
              LOGIN(1) DOES.  THE -C OPTION CAUSES COMMAND TO BE EXECUTED WITH
              AN  EMPTY ENVIRONMENT.  IF -A IS SUPPLIED, THE SHELL PASSES NAME
              AS THE ZEROTH ARGUMENT TO THE EXECUTED COMMAND.  IF COMMAND CAN‐
              NOT  BE EXECUTED FOR SOME REASON, A NON-INTERACTIVE SHELL EXITS,
              UNLESS THE EXECFAIL SHELL OPTION IS ENABLED.  IN THAT  CASE,  IT
              RETURNS  FAILURE.   AN  INTERACTIVE SHELL RETURNS FAILURE IF THE
              FILE CANNOT BE EXECUTED.  IF COMMAND IS NOT SPECIFIED, ANY REDI‐
              RECTIONS TAKE EFFECT IN THE CURRENT SHELL, AND THE RETURN STATUS
              IS 0.  IF THERE IS A REDIRECTION ERROR, THE RETURN STATUS IS 1.

       EXIT [N]
              CAUSE THE SHELL TO EXIT WITH A STATUS OF N.  IF  N  IS  OMITTED,
              THE EXIT STATUS IS THAT OF THE LAST COMMAND EXECUTED.  A TRAP ON
              EXIT IS EXECUTED BEFORE THE SHELL TERMINATES.

       EXPORT [-FN] [NAME[=WORD]] ...
       EXPORT -P
              THE SUPPLIED NAMES ARE MARKED FOR AUTOMATIC EXPORT TO THE  ENVI‐
              RONMENT  OF SUBSEQUENTLY EXECUTED COMMANDS.  IF THE -F OPTION IS
              GIVEN, THE NAMES REFER TO FUNCTIONS.  IF NO NAMES ARE GIVEN,  OR
              IF  THE  -P  OPTION IS SUPPLIED, A LIST OF NAMES OF ALL EXPORTED
              VARIABLES IS PRINTED.  THE -N OPTION CAUSES THE EXPORT  PROPERTY
              TO BE REMOVED FROM EACH NAME.  IF A VARIABLE NAME IS FOLLOWED BY
              =WORD, THE VALUE OF THE VARIABLE IS SET TO WORD.  EXPORT RETURNS
              AN EXIT STATUS OF 0 UNLESS AN INVALID OPTION IS ENCOUNTERED, ONE
              OF THE NAMES IS NOT A VALID SHELL VARIABLE NAME, OR -F  IS  SUP‐
              PLIED WITH A NAME THAT IS NOT A FUNCTION.

       FC [-E ENAME] [-LNR] [FIRST] [LAST]
       FC -S [PAT=REP] [CMD]
              THE  FIRST  FORM  SELECTS A RANGE OF COMMANDS FROM FIRST TO LAST
              FROM THE HISTORY LIST AND  DISPLAYS  OR  EDITS  AND  RE-EXECUTES
              THEM.   FIRST  AND  LAST MAY BE SPECIFIED AS A STRING (TO LOCATE
              THE LAST COMMAND BEGINNING WITH THAT STRING) OR AS A NUMBER  (AN
              INDEX  INTO THE HISTORY LIST, WHERE A NEGATIVE NUMBER IS USED AS
              AN OFFSET FROM THE CURRENT COMMAND  NUMBER).   IF  LAST  IS  NOT
              SPECIFIED  IT IS SET TO THE CURRENT COMMAND FOR LISTING (SO THAT
              ``FC -L -10'' PRINTS THE LAST 10 COMMANDS) AND TO  FIRST  OTHER‐
              WISE.   IF FIRST IS NOT SPECIFIED IT IS SET TO THE PREVIOUS COM‐
              MAND FOR EDITING AND -16 FOR LISTING.

              THE -N OPTION SUPPRESSES THE COMMAND NUMBERS WHEN LISTING.   THE
              -R  OPTION REVERSES THE ORDER OF THE COMMANDS.  IF THE -L OPTION
              IS GIVEN, THE COMMANDS ARE LISTED ON  STANDARD  OUTPUT.   OTHER‐
              WISE,  THE EDITOR GIVEN BY ENAME IS INVOKED ON A FILE CONTAINING
              THOSE COMMANDS.  IF ENAME IS NOT GIVEN, THE VALUE OF THE  FCEDIT
              VARIABLE  IS USED, AND THE VALUE OF EDITOR IF FCEDIT IS NOT SET.
              IF NEITHER VARIABLE IS SET, VI IS USED.  WHEN  EDITING  IS  COM‐
              PLETE, THE EDITED COMMANDS ARE ECHOED AND EXECUTED.

              IN  THE  SECOND FORM, COMMAND IS RE-EXECUTED AFTER EACH INSTANCE
              OF PAT IS REPLACED BY REP.  COMMAND IS INTEPRETED  THE  SAME  AS
              FIRST  ABOVE.  A USEFUL ALIAS TO USE WITH THIS IS ``R="FC -S"'',
              SO THAT TYPING ``R CC'' RUNS THE  LAST  COMMAND  BEGINNING  WITH
              ``CC'' AND TYPING ``R'' RE-EXECUTES THE LAST COMMAND.

              IF  THE  FIRST  FORM  IS  USED,  THE RETURN VALUE IS 0 UNLESS AN
              INVALID OPTION IS ENCOUNTERED OR FIRST OR LAST  SPECIFY  HISTORY
              LINES  OUT  OF  RANGE.  IF THE -E OPTION IS SUPPLIED, THE RETURN
              VALUE IS THE VALUE OF THE LAST COMMAND EXECUTED OR FAILURE IF AN
              ERROR OCCURS WITH THE TEMPORARY FILE OF COMMANDS.  IF THE SECOND
              FORM IS USED, THE RETURN STATUS IS THAT OF THE  COMMAND  RE-EXE‐
              CUTED,  UNLESS  CMD  DOES  NOT  SPECIFY A VALID HISTORY LINE, IN
              WHICH CASE FC RETURNS FAILURE.

       FG [JOBSPEC]
              RESUME JOBSPEC IN THE FOREGROUND, AND MAKE IT THE  CURRENT  JOB.
              IF JOBSPEC IS NOT PRESENT, THE SHELL'S NOTION OF THE CURRENT JOB
              IS USED.  THE RETURN VALUE IS THAT OF THE  COMMAND  PLACED  INTO
              THE  FOREGROUND,  OR FAILURE IF RUN WHEN JOB CONTROL IS DISABLED
              OR, WHEN RUN WITH JOB CONTROL ENABLED, IF JOBSPEC DOES NOT SPEC‐
              IFY  A  VALID  JOB  OR  JOBSPEC SPECIFIES A JOB THAT WAS STARTED
              WITHOUT JOB CONTROL.

       GETOPTS OPTSTRING NAME [ARGS]
              GETOPTS IS USED BY SHELL PROCEDURES TO PARSE POSITIONAL  PARAME‐
              TERS.   OPTSTRING  CONTAINS  THE  OPTION CHARACTERS TO BE RECOG‐
              NIZED; IF A CHARACTER IS FOLLOWED BY  A  COLON,  THE  OPTION  IS
              EXPECTED  TO HAVE AN ARGUMENT, WHICH SHOULD BE SEPARATED FROM IT
              BY WHITE SPACE.  THE COLON AND QUESTION MARK CHARACTERS MAY  NOT
              BE  USED AS OPTION CHARACTERS.  EACH TIME IT IS INVOKED, GETOPTS
              PLACES THE NEXT OPTION IN THE SHELL VARIABLE NAME,  INITIALIZING
              NAME IF IT DOES NOT EXIST, AND THE INDEX OF THE NEXT ARGUMENT TO
              BE PROCESSED INTO THE VARIABLE OPTIND.  OPTIND IS INITIALIZED TO
              1  EACH  TIME  THE  SHELL OR A SHELL SCRIPT IS INVOKED.  WHEN AN
              OPTION REQUIRES AN ARGUMENT, GETOPTS PLACES THAT  ARGUMENT  INTO
              THE  VARIABLE OPTARG.  THE SHELL DOES NOT RESET OPTIND AUTOMATI‐
              CALLY; IT MUST BE  MANUALLY  RESET  BETWEEN  MULTIPLE  CALLS  TO
              GETOPTS WITHIN THE SAME SHELL INVOCATION IF A NEW SET OF PARAME‐
              TERS IS TO BE USED.

              WHEN THE END OF OPTIONS IS ENCOUNTERED,  GETOPTS  EXITS  WITH  A
              RETURN  VALUE  GREATER THAN ZERO.  OPTIND IS SET TO THE INDEX OF
              THE FIRST NON-OPTION ARGUMENT, AND NAME IS SET TO ?.

              GETOPTS NORMALLY PARSES THE POSITIONAL PARAMETERS, BUT  IF  MORE
              ARGUMENTS ARE GIVEN IN ARGS, GETOPTS PARSES THOSE INSTEAD.

              GETOPTS  CAN  REPORT ERRORS IN TWO WAYS.  IF THE FIRST CHARACTER
              OF OPTSTRING IS A COLON, SILENT ERROR  REPORTING  IS  USED.   IN
              NORMAL  OPERATION,  DIAGNOSTIC MESSAGES ARE PRINTED WHEN INVALID
              OPTIONS OR MISSING OPTION ARGUMENTS  ARE  ENCOUNTERED.   IF  THE
              VARIABLE  OPTERR  IS  SET  TO  0, NO ERROR MESSAGES WILL BE DIS‐
              PLAYED, EVEN IF THE FIRST CHARACTER OF OPTSTRING IS NOT A COLON.

              IF AN INVALID OPTION IS SEEN, GETOPTS PLACES ? INTO NAME AND, IF
              NOT  SILENT,  PRINTS  AN  ERROR  MESSAGE  AND UNSETS OPTARG.  IF
              GETOPTS IS SILENT, THE  OPTION  CHARACTER  FOUND  IS  PLACED  IN
              OPTARG AND NO DIAGNOSTIC MESSAGE IS PRINTED.

              IF  A REQUIRED ARGUMENT IS NOT FOUND, AND GETOPTS IS NOT SILENT,
              A QUESTION MARK (?) IS PLACED IN NAME, OPTARG IS  UNSET,  AND  A
              DIAGNOSTIC  MESSAGE  IS  PRINTED.   IF GETOPTS IS SILENT, THEN A
              COLON (:) IS PLACED IN NAME AND OPTARG  IS  SET  TO  THE  OPTION
              CHARACTER FOUND.

              GETOPTS  RETURNS TRUE IF AN OPTION, SPECIFIED OR UNSPECIFIED, IS
              FOUND.  IT RETURNS FALSE IF THE END OF OPTIONS IS ENCOUNTERED OR
              AN ERROR OCCURS.

       HASH [-LR] [-P FILENAME] [-DT] [NAME]
              EACH TIME HASH IS INVOKED, THE FULL PATHNAME OF THE COMMAND NAME
              IS DETERMINED BY SEARCHING THE DIRECTORIES IN $PATH  AND  REMEM‐
              BERED.  ANY PREVIOUSLY-REMEMBERED PATHNAME IS DISCARDED.  IF THE
              -P OPTION IS SUPPLIED, NO PATH SEARCH IS PERFORMED, AND FILENAME
              IS  USED  AS  THE  FULL  FILENAME OF THE COMMAND.  THE -R OPTION
              CAUSES THE SHELL TO FORGET ALL  REMEMBERED  LOCATIONS.   THE  -D
              OPTION  CAUSES  THE  SHELL  TO FORGET THE REMEMBERED LOCATION OF
              EACH NAME.  IF THE -T OPTION IS SUPPLIED, THE FULL  PATHNAME  TO
              WHICH  EACH NAME CORRESPONDS IS PRINTED.  IF MULTIPLE NAME ARGU‐
              MENTS ARE SUPPLIED WITH -T,  THE  NAME  IS  PRINTED  BEFORE  THE
              HASHED  FULL  PATHNAME.   THE -L OPTION CAUSES OUTPUT TO BE DIS‐
              PLAYED IN A FORMAT THAT MAY BE REUSED AS INPUT.  IF NO ARGUMENTS
              ARE  GIVEN,  OR IF ONLY -L IS SUPPLIED, INFORMATION ABOUT REMEM‐
              BERED COMMANDS IS PRINTED.  THE RETURN STATUS IS TRUE  UNLESS  A
              NAME IS NOT FOUND OR AN INVALID OPTION IS SUPPLIED.

       HELP [-DMS] [PATTERN]
              DISPLAY  HELPFUL INFORMATION ABOUT BUILTIN COMMANDS.  IF PATTERN
              IS SPECIFIED, HELP GIVES DETAILED HELP ON ALL COMMANDS  MATCHING
              PATTERN;  OTHERWISE  HELP FOR ALL THE BUILTINS AND SHELL CONTROL
              STRUCTURES IS PRINTED.
              -D     DISPLAY A SHORT DESCRIPTION OF EACH PATTERN
              -M     DISPLAY THE DESCRIPTION OF EACH PATTERN IN A MANPAGE-LIKE
                     FORMAT
              -S     DISPLAY ONLY A SHORT USAGE SYNOPSIS FOR EACH PATTERN

              THE RETURN STATUS IS 0 UNLESS NO COMMAND MATCHES PATTERN.

       HISTORY [N]
       HISTORY -C
       HISTORY -D OFFSET
       HISTORY -ANRW [FILENAME]
       HISTORY -P ARG [ARG ...]
       HISTORY -S ARG [ARG ...]
              WITH NO OPTIONS, DISPLAY THE COMMAND HISTORY LIST WITH LINE NUM‐
              BERS.  LINES LISTED WITH A * HAVE BEEN MODIFIED.  AN ARGUMENT OF
              N  LISTS ONLY THE LAST N LINES.  IF THE SHELL VARIABLE HISTTIME‐
              FORMAT IS SET AND NOT NULL, IT IS USED AS A  FORMAT  STRING  FOR
              STRFTIME(3)  TO DISPLAY THE TIME STAMP ASSOCIATED WITH EACH DIS‐
              PLAYED HISTORY ENTRY.  NO INTERVENING BLANK IS  PRINTED  BETWEEN
              THE  FORMATTED  TIME STAMP AND THE HISTORY LINE.  IF FILENAME IS
              SUPPLIED, IT IS USED AS THE NAME OF THE HISTORY  FILE;  IF  NOT,
              THE  VALUE  OF HISTFILE IS USED.  OPTIONS, IF SUPPLIED, HAVE THE
              FOLLOWING MEANINGS:
              -C     CLEAR THE HISTORY LIST BY DELETING ALL THE ENTRIES.
              -D OFFSET
                     DELETE THE HISTORY ENTRY AT POSITION OFFSET.
              -A     APPEND THE ``NEW'' HISTORY LINES (HISTORY  LINES  ENTERED
                     SINCE  THE  BEGINNING OF THE CURRENT BASH SESSION) TO THE
                     HISTORY FILE.
              -N     READ THE HISTORY LINES NOT ALREADY READ FROM THE  HISTORY
                     FILE  INTO  THE  CURRENT  HISTORY  LIST.  THESE ARE LINES
                     APPENDED TO THE HISTORY FILE SINCE THE BEGINNING  OF  THE
                     CURRENT BASH SESSION.
              -R     READ  THE CONTENTS OF THE HISTORY FILE AND APPEND THEM TO
                     THE CURRENT HISTORY LIST.
              -W     WRITE THE CURRENT HISTORY LIST TO THE HISTORY FILE, OVER‐
                     WRITING THE HISTORY FILE'S CONTENTS.
              -P     PERFORM  HISTORY  SUBSTITUTION  ON THE FOLLOWING ARGS AND
                     DISPLAY THE RESULT ON  THE  STANDARD  OUTPUT.   DOES  NOT
                     STORE  THE RESULTS IN THE HISTORY LIST.  EACH ARG MUST BE
                     QUOTED TO DISABLE NORMAL HISTORY EXPANSION.
              -S     STORE THE ARGS IN THE HISTORY LIST  AS  A  SINGLE  ENTRY.
                     THE  LAST  COMMAND  IN THE HISTORY LIST IS REMOVED BEFORE
                     THE ARGS ARE ADDED.

              IF THE HISTTIMEFORMAT VARIABLE IS SET, THE TIME  STAMP  INFORMA‐
              TION  ASSOCIATED  WITH EACH HISTORY ENTRY IS WRITTEN TO THE HIS‐
              TORY FILE, MARKED WITH THE HISTORY COMMENT CHARACTER.  WHEN  THE
              HISTORY  FILE  IS READ, LINES BEGINNING WITH THE HISTORY COMMENT
              CHARACTER FOLLOWED IMMEDIATELY BY A  DIGIT  ARE  INTERPRETED  AS
              TIMESTAMPS FOR THE PREVIOUS HISTORY LINE.  THE RETURN VALUE IS 0
              UNLESS AN INVALID OPTION IS ENCOUNTERED, AN ERROR  OCCURS  WHILE
              READING  OR  WRITING THE HISTORY FILE, AN INVALID OFFSET IS SUP‐
              PLIED AS AN ARGUMENT TO -D, OR THE HISTORY EXPANSION SUPPLIED AS
              AN ARGUMENT TO -P FAILS.

       JOBS [-LNPRS] [ JOBSPEC ... ]
       JOBS -X COMMAND [ ARGS ... ]
              THE FIRST FORM LISTS THE ACTIVE JOBS.  THE OPTIONS HAVE THE FOL‐
              LOWING MEANINGS:
              -L     LIST PROCESS IDS IN ADDITION TO THE NORMAL INFORMATION.
              -N     DISPLAY INFORMATION ONLY ABOUT  JOBS  THAT  HAVE  CHANGED
                     STATUS SINCE THE USER WAS LAST NOTIFIED OF THEIR STATUS.
              -P     LIST  ONLY  THE  PROCESS  ID  OF  THE JOB'S PROCESS GROUP
                     LEADER.
              -R     DISPLAY ONLY RUNNING JOBS.
              -S     DISPLAY ONLY STOPPED JOBS.

              IF JOBSPEC IS GIVEN, OUTPUT IS RESTRICTED TO  INFORMATION  ABOUT
              THAT  JOB.   THE  RETURN STATUS IS 0 UNLESS AN INVALID OPTION IS
              ENCOUNTERED OR AN INVALID JOBSPEC IS SUPPLIED.

              IF THE -X OPTION IS SUPPLIED, JOBS REPLACES ANY JOBSPEC FOUND IN
              COMMAND  OR  ARGS  WITH  THE CORRESPONDING PROCESS GROUP ID, AND
              EXECUTES COMMAND PASSING IT ARGS, RETURNING ITS EXIT STATUS.

       KILL [-S SIGSPEC | -N SIGNUM | -SIGSPEC] [PID | JOBSPEC] ...
       KILL -L [SIGSPEC | EXIT_STATUS]
              SEND THE SIGNAL NAMED BY SIGSPEC  OR  SIGNUM  TO  THE  PROCESSES
              NAMED  BY  PID OR JOBSPEC.  SIGSPEC IS EITHER A CASE-INSENSITIVE
              SIGNAL NAME SUCH AS SIGKILL (WITH OR WITHOUT THE SIG PREFIX)  OR
              A  SIGNAL  NUMBER; SIGNUM IS A SIGNAL NUMBER.  IF SIGSPEC IS NOT
              PRESENT, THEN SIGTERM IS ASSUMED.  AN ARGUMENT OF -L  LISTS  THE
              SIGNAL  NAMES.   IF ANY ARGUMENTS ARE SUPPLIED WHEN -L IS GIVEN,
              THE NAMES OF THE SIGNALS  CORRESPONDING  TO  THE  ARGUMENTS  ARE
              LISTED, AND THE RETURN STATUS IS 0.  THE EXIT_STATUS ARGUMENT TO
              -L IS A NUMBER SPECIFYING EITHER A SIGNAL  NUMBER  OR  THE  EXIT
              STATUS  OF  A PROCESS TERMINATED BY A SIGNAL.  KILL RETURNS TRUE
              IF AT LEAST ONE SIGNAL WAS SUCCESSFULLY SENT,  OR  FALSE  IF  AN
              ERROR OCCURS OR AN INVALID OPTION IS ENCOUNTERED.

       LET ARG [ARG ...]
              EACH ARG IS AN ARITHMETIC EXPRESSION TO BE EVALUATED (SEE ARITH‐
              METIC EVALUATION ABOVE).  IF THE LAST ARG EVALUATES  TO  0,  LET
              RETURNS 1; 0 IS RETURNED OTHERWISE.

       LOCAL [OPTION] [NAME[=VALUE] ...]
              FOR  EACH  ARGUMENT, A LOCAL VARIABLE NAMED NAME IS CREATED, AND
              ASSIGNED VALUE.  THE OPTION CAN BE ANY OF THE  OPTIONS  ACCEPTED
              BY DECLARE.  WHEN LOCAL IS USED WITHIN A FUNCTION, IT CAUSES THE
              VARIABLE NAME TO HAVE A VISIBLE SCOPE RESTRICTED TO  THAT  FUNC‐
              TION AND ITS CHILDREN.  WITH NO OPERANDS, LOCAL WRITES A LIST OF
              LOCAL VARIABLES TO THE STANDARD OUTPUT.  IT IS AN ERROR  TO  USE
              LOCAL WHEN NOT WITHIN A FUNCTION.  THE RETURN STATUS IS 0 UNLESS
              LOCAL IS USED OUTSIDE A FUNCTION, AN INVALID NAME  IS  SUPPLIED,
              OR NAME IS A READONLY VARIABLE.

       LOGOUT EXIT A LOGIN SHELL.

       MAPFILE  [-N  COUNT]  [-O ORIGIN] [-S COUNT] [-T] [-U FD] [-C CALLBACK]
       [-C QUANTUM] [ARRAY]
       READARRAY [-N COUNT] [-O ORIGIN] [-S COUNT] [-T] [-U FD] [-C  CALLBACK]
       [-C QUANTUM] [ARRAY]
              READ  LINES FROM THE STANDARD INPUT INTO THE INDEXED ARRAY VARI‐
              ABLE ARRAY, OR FROM FILE DESCRIPTOR FD IF THE -U OPTION IS  SUP‐
              PLIED.   THE VARIABLE MAPFILE IS THE DEFAULT ARRAY.  OPTIONS, IF
              SUPPLIED, HAVE THE FOLLOWING MEANINGS:
              -N     COPY AT MOST COUNT LINES.  IF COUNT IS 0, ALL  LINES  ARE
                     COPIED.
              -O     BEGIN  ASSIGNING  TO  ARRAY AT INDEX ORIGIN.  THE DEFAULT
                     INDEX IS 0.
              -S     DISCARD THE FIRST COUNT LINES READ.
              -T     REMOVE A TRAILING NEWLINE FROM EACH LINE READ.
              -U     READ LINES FROM FILE DESCRIPTOR FD INSTEAD OF  THE  STAN‐
                     DARD INPUT.
              -C     EVALUATE  CALLBACK EACH TIME QUANTUM LINES ARE READ.  THE
                     -C OPTION SPECIFIES QUANTUM.
              -C     SPECIFY THE NUMBER OF LINES READ  BETWEEN  EACH  CALL  TO
                     CALLBACK.

              IF  -C  IS  SPECIFIED  WITHOUT  -C, THE DEFAULT QUANTUM IS 5000.
              WHEN CALLBACK IS EVALUATED, IT IS SUPPLIED THE INDEX OF THE NEXT
              ARRAY ELEMENT TO BE ASSIGNED AND THE LINE TO BE ASSIGNED TO THAT
              ELEMENT AS ADDITIONAL ARGUMENTS.  CALLBACK  IS  EVALUATED  AFTER
              THE LINE IS READ BUT BEFORE THE ARRAY ELEMENT IS ASSIGNED.

              IF  NOT  SUPPLIED  WITH  AN  EXPLICIT ORIGIN, MAPFILE WILL CLEAR
              ARRAY BEFORE ASSIGNING TO IT.

              MAPFILE RETURNS SUCCESSFULLY UNLESS AN INVALID OPTION OR  OPTION
              ARGUMENT  IS  SUPPLIED,  ARRAY IS INVALID OR UNASSIGNABLE, OR IF
              ARRAY IS NOT AN INDEXED ARRAY.

       POPD [-N] [+N] [-N]
              REMOVES ENTRIES FROM THE DIRECTORY STACK.   WITH  NO  ARGUMENTS,
              REMOVES  THE  TOP DIRECTORY FROM THE STACK, AND PERFORMS A CD TO
              THE NEW TOP DIRECTORY.  ARGUMENTS, IF SUPPLIED, HAVE THE FOLLOW‐
              ING MEANINGS:
              -N     SUPPRESSES  THE  NORMAL CHANGE OF DIRECTORY WHEN REMOVING
                     DIRECTORIES FROM THE STACK, SO THAT  ONLY  THE  STACK  IS
                     MANIPULATED.
              +N     REMOVES  THE NTH ENTRY COUNTING FROM THE LEFT OF THE LIST
                     SHOWN BY DIRS, STARTING WITH ZERO.  FOR  EXAMPLE:  ``POPD
                     +0'' REMOVES THE FIRST DIRECTORY, ``POPD +1'' THE SECOND.
              -N     REMOVES THE NTH ENTRY COUNTING FROM THE RIGHT OF THE LIST
                     SHOWN BY DIRS, STARTING WITH ZERO.  FOR  EXAMPLE:  ``POPD
                     -0''  REMOVES THE LAST DIRECTORY, ``POPD -1'' THE NEXT TO
                     LAST.

              IF THE POPD COMMAND IS SUCCESSFUL, A DIRS IS PERFORMED AS  WELL,
              AND  THE  RETURN  STATUS IS 0.  POPD RETURNS FALSE IF AN INVALID
              OPTION IS ENCOUNTERED, THE DIRECTORY STACK IS EMPTY, A NON-EXIS‐
              TENT DIRECTORY STACK ENTRY IS SPECIFIED, OR THE DIRECTORY CHANGE
              FAILS.

       PRINTF [-V VAR] FORMAT [ARGUMENTS]
              WRITE THE FORMATTED ARGUMENTS TO THE STANDARD OUTPUT  UNDER  THE
              CONTROL  OF  THE  FORMAT.  THE -V OPTION CAUSES THE OUTPUT TO BE
              ASSIGNED TO THE VARIABLE VAR RATHER THAN BEING  PRINTED  TO  THE
              STANDARD OUTPUT.

              THE  FORMAT  IS A CHARACTER STRING WHICH CONTAINS THREE TYPES OF
              OBJECTS: PLAIN CHARACTERS, WHICH ARE SIMPLY COPIED  TO  STANDARD
              OUTPUT,  CHARACTER  ESCAPE  SEQUENCES,  WHICH  ARE CONVERTED AND
              COPIED TO THE STANDARD OUTPUT, AND FORMAT  SPECIFICATIONS,  EACH
              OF  WHICH  CAUSES  PRINTING OF THE NEXT SUCCESSIVE ARGUMENT.  IN
              ADDITION TO THE STANDARD PRINTF(1) FORMAT SPECIFICATIONS, PRINTF
              INTERPRETS THE FOLLOWING EXTENSIONS:
              %B     CAUSES PRINTF TO EXPAND BACKSLASH ESCAPE SEQUENCES IN THE
                     CORRESPONDING ARGUMENT (EXCEPT THAT \C TERMINATES OUTPUT,
                     BACKSLASHES  IN \', \", AND \? ARE NOT REMOVED, AND OCTAL
                     ESCAPES BEGINNING WITH \0 MAY CONTAIN UP TO FOUR DIGITS).
              %Q     CAUSES PRINTF TO OUTPUT THE CORRESPONDING ARGUMENT  IN  A
                     FORMAT THAT CAN BE REUSED AS SHELL INPUT.
              %(DATEFMT)T
                     CAUSES  PRINTF  TO  OUTPUT THE DATE-TIME STRING RESULTING
                     FROM USING DATEFMT AS A FORMAT  STRING  FOR  STRFTIME(3).
                     THE CORRESPONDING ARGUMENT IS AN INTEGER REPRESENTING THE
                     NUMBER OF SECONDS SINCE THE EPOCH.  TWO SPECIAL  ARGUMENT
                     VALUES  MAY  BE USED: -1 REPRESENTS THE CURRENT TIME, AND
                     -2 REPRESENTS THE TIME THE  SHELL  WAS  INVOKED.   IF  NO
                     ARGUMENT  IS  SPECIFIED,  CONVERSION BEHAVES AS IF -1 HAD
                     BEEN GIVEN.  THIS IS AN EXCEPTION  TO  THE  USUAL  PRINTF
                     BEHAVIOR.

              ARGUMENTS  TO NON-STRING FORMAT SPECIFIERS ARE TREATED AS C CON‐
              STANTS, EXCEPT THAT A LEADING PLUS OR MINUS SIGN IS ALLOWED, AND
              IF  THE LEADING CHARACTER IS A SINGLE OR DOUBLE QUOTE, THE VALUE
              IS THE ASCII VALUE OF THE FOLLOWING CHARACTER.

              THE FORMAT IS REUSED AS NECESSARY TO CONSUME ALL  OF  THE  ARGU‐
              MENTS.  IF THE FORMAT REQUIRES MORE ARGUMENTS THAN ARE SUPPLIED,
              THE EXTRA FORMAT SPECIFICATIONS BEHAVE AS IF  A  ZERO  VALUE  OR
              NULL  STRING,  AS  APPROPRIATE,  HAD  BEEN SUPPLIED.  THE RETURN
              VALUE IS ZERO ON SUCCESS, NON-ZERO ON FAILURE.

       PUSHD [-N] [+N] [-N]
       PUSHD [-N] [DIR]
              ADDS A DIRECTORY TO THE TOP OF THE DIRECTORY STACK,  OR  ROTATES
              THE  STACK,  MAKING THE NEW TOP OF THE STACK THE CURRENT WORKING
              DIRECTORY.  WITH NO ARGUMENTS, EXCHANGES THE TOP TWO DIRECTORIES
              AND  RETURNS 0, UNLESS THE DIRECTORY STACK IS EMPTY.  ARGUMENTS,
              IF SUPPLIED, HAVE THE FOLLOWING MEANINGS:
              -N     SUPPRESSES THE NORMAL CHANGE  OF  DIRECTORY  WHEN  ADDING
                     DIRECTORIES  TO  THE  STACK,  SO  THAT  ONLY THE STACK IS
                     MANIPULATED.
              +N     ROTATES THE STACK SO THAT  THE  NTH  DIRECTORY  (COUNTING
                     FROM  THE  LEFT  OF THE LIST SHOWN BY DIRS, STARTING WITH
                     ZERO) IS AT THE TOP.
              -N     ROTATES THE STACK SO THAT  THE  NTH  DIRECTORY  (COUNTING
                     FROM  THE  RIGHT OF THE LIST SHOWN BY DIRS, STARTING WITH
                     ZERO) IS AT THE TOP.
              DIR    ADDS DIR TO THE DIRECTORY STACK AT THE TOP, MAKING IT THE
                     NEW  CURRENT WORKING DIRECTORY AS IF IT HAD BEEN SUPPLIED
                     AS THE ARGUMENT TO THE CD BUILTIN.

              IF THE PUSHD COMMAND IS SUCCESSFUL, A DIRS IS PERFORMED AS WELL.
              IF  THE FIRST FORM IS USED, PUSHD RETURNS 0 UNLESS THE CD TO DIR
              FAILS.  WITH THE SECOND FORM, PUSHD RETURNS 0 UNLESS THE  DIREC‐
              TORY  STACK  IS EMPTY, A NON-EXISTENT DIRECTORY STACK ELEMENT IS
              SPECIFIED, OR THE DIRECTORY CHANGE TO THE SPECIFIED NEW  CURRENT
              DIRECTORY FAILS.

       PWD [-LP]
              PRINT  THE  ABSOLUTE  PATHNAME OF THE CURRENT WORKING DIRECTORY.
              THE PATHNAME PRINTED CONTAINS NO SYMBOLIC LINKS IF THE -P OPTION
              IS SUPPLIED OR THE -O PHYSICAL OPTION TO THE SET BUILTIN COMMAND
              IS ENABLED.  IF THE -L OPTION IS USED, THE PATHNAME PRINTED  MAY
              CONTAIN  SYMBOLIC LINKS.  THE RETURN STATUS IS 0 UNLESS AN ERROR
              OCCURS WHILE READING THE NAME OF THE  CURRENT  DIRECTORY  OR  AN
              INVALID OPTION IS SUPPLIED.

       READ [-ERS] [-A ANAME] [-D DELIM] [-I TEXT] [-N NCHARS] [-N NCHARS] [-P
       PROMPT] [-T TIMEOUT] [-U FD] [NAME ...]
              ONE LINE IS READ FROM THE  STANDARD  INPUT,  OR  FROM  THE  FILE
              DESCRIPTOR  FD SUPPLIED AS AN ARGUMENT TO THE -U OPTION, AND THE
              FIRST WORD IS ASSIGNED TO THE FIRST NAME, THE SECOND WORD TO THE
              SECOND  NAME, AND SO ON, WITH LEFTOVER WORDS AND THEIR INTERVEN‐
              ING SEPARATORS ASSIGNED TO THE LAST NAME.  IF  THERE  ARE  FEWER
              WORDS READ FROM THE INPUT STREAM THAN NAMES, THE REMAINING NAMES
              ARE ASSIGNED EMPTY VALUES.  THE CHARACTERS IN IFS  ARE  USED  TO
              SPLIT  THE  LINE  INTO WORDS USING THE SAME RULES THE SHELL USES
              FOR EXPANSION (DESCRIBED ABOVE UNDER WORD SPLITTING).  THE BACK‐
              SLASH  CHARACTER  (\)  MAY BE USED TO REMOVE ANY SPECIAL MEANING
              FOR THE NEXT CHARACTER READ AND FOR LINE CONTINUATION.  OPTIONS,
              IF SUPPLIED, HAVE THE FOLLOWING MEANINGS:
              -A ANAME
                     THE WORDS ARE ASSIGNED TO SEQUENTIAL INDICES OF THE ARRAY
                     VARIABLE ANAME, STARTING AT 0.  ANAME IS UNSET BEFORE ANY
                     NEW  VALUES  ARE  ASSIGNED.   OTHER  NAME  ARGUMENTS  ARE
                     IGNORED.
              -D DELIM
                     THE FIRST CHARACTER OF DELIM IS  USED  TO  TERMINATE  THE
                     INPUT LINE, RATHER THAN NEWLINE.
              -E     IF THE STANDARD INPUT IS COMING FROM A TERMINAL, READLINE
                     (SEE READLINE ABOVE) IS USED TO OBTAIN THE  LINE.   READ‐
                     LINE  USES  THE  CURRENT (OR DEFAULT, IF LINE EDITING WAS
                     NOT PREVIOUSLY ACTIVE) EDITING SETTINGS.
              -I TEXT
                     IF READLINE IS BEING USED  TO  READ  THE  LINE,  TEXT  IS
                     PLACED INTO THE EDITING BUFFER BEFORE EDITING BEGINS.
              -N NCHARS
                     READ  RETURNS AFTER READING NCHARS CHARACTERS RATHER THAN
                     WAITING FOR A COMPLETE LINE OF INPUT, BUT HONOR A  DELIM‐
                     ITER  IF FEWER THAN NCHARS CHARACTERS ARE READ BEFORE THE
                     DELIMITER.
              -N NCHARS
                     READ RETURNS  AFTER  READING  EXACTLY  NCHARS  CHARACTERS
                     RATHER  THAN WAITING FOR A COMPLETE LINE OF INPUT, UNLESS
                     EOF IS ENCOUNTERED OR READ TIMES OUT.  DELIMITER  CHARAC‐
                     TERS  ENCOUNTERED  IN THE INPUT ARE NOT TREATED SPECIALLY
                     AND DO NOT CAUSE READ TO RETURN UNTIL  NCHARS  CHARACTERS
                     ARE READ.
              -P PROMPT
                     DISPLAY PROMPT ON STANDARD ERROR, WITHOUT A TRAILING NEW‐
                     LINE, BEFORE ATTEMPTING TO READ ANY INPUT.  THE PROMPT IS
                     DISPLAYED ONLY IF INPUT IS COMING FROM A TERMINAL.
              -R     BACKSLASH DOES NOT ACT AS AN ESCAPE CHARACTER.  THE BACK‐
                     SLASH IS CONSIDERED TO BE PART OF THE LINE.  IN  PARTICU‐
                     LAR,  A  BACKSLASH-NEWLINE PAIR MAY NOT BE USED AS A LINE
                     CONTINUATION.
              -S     SILENT MODE.  IF INPUT IS COMING FROM A TERMINAL, CHARAC‐
                     TERS ARE NOT ECHOED.
              -T TIMEOUT
                     CAUSE  READ  TO TIME OUT AND RETURN FAILURE IF A COMPLETE
                     LINE OF INPUT (OR A SPECIFIED NUMBER  OF  CHARACTERS)  IS
                     NOT  READ WITHIN TIMEOUT SECONDS.  TIMEOUT MAY BE A DECI‐
                     MAL NUMBER WITH A FRACTIONAL PORTION FOLLOWING THE  DECI‐
                     MAL  POINT.   THIS  OPTION  IS  ONLY EFFECTIVE IF READ IS
                     READING INPUT FROM A TERMINAL,  PIPE,  OR  OTHER  SPECIAL
                     FILE;  IT  HAS NO EFFECT WHEN READING FROM REGULAR FILES.
                     IF READ TIMES OUT, READ SAVES ANY PARTIAL INPUT READ INTO
                     THE  SPECIFIED  VARIABLE  NAME.   IF  TIMEOUT  IS 0, READ
                     RETURNS IMMEDIATELY, WITHOUT TRYING  TO  READ  ANY  DATA.
                     THE  EXIT STATUS IS 0 IF INPUT IS AVAILABLE ON THE SPECI‐
                     FIED FILE DESCRIPTOR, NON-ZERO OTHERWISE.  THE EXIT  STA‐
                     TUS IS GREATER THAN 128 IF THE TIMEOUT IS EXCEEDED.
              -U FD  READ INPUT FROM FILE DESCRIPTOR FD.

              IF NO NAMES ARE SUPPLIED, THE LINE READ IS ASSIGNED TO THE VARI‐
              ABLE REPLY.  THE RETURN CODE  IS  ZERO,  UNLESS  END-OF-FILE  IS
              ENCOUNTERED,  READ  TIMES  OUT (IN WHICH CASE THE RETURN CODE IS
              GREATER THAN 128), A VARIABLE ASSIGNMENT ERROR (SUCH AS  ASSIGN‐
              ING  TO A READONLY VARIABLE) OCCURS, OR AN INVALID FILE DESCRIP‐
              TOR IS SUPPLIED AS THE ARGUMENT TO -U.

       READONLY [-AAF] [-P] [NAME[=WORD] ...]
              THE GIVEN NAMES ARE MARKED READONLY; THE VALUES OF  THESE  NAMES
              MAY  NOT  BE CHANGED BY SUBSEQUENT ASSIGNMENT.  IF THE -F OPTION
              IS SUPPLIED, THE FUNCTIONS CORRESPONDING TO  THE  NAMES  ARE  SO
              MARKED.   THE  -A  OPTION  RESTRICTS  THE  VARIABLES  TO INDEXED
              ARRAYS; THE -A OPTION RESTRICTS  THE  VARIABLES  TO  ASSOCIATIVE
              ARRAYS.   IF BOTH OPTIONS ARE SUPPLIED, -A TAKES PRECEDENCE.  IF
              NO NAME ARGUMENTS ARE GIVEN, OR IF THE -P OPTION IS SUPPLIED,  A
              LIST OF ALL READONLY NAMES IS PRINTED.  THE OTHER OPTIONS MAY BE
              USED TO RESTRICT THE OUTPUT TO A SUBSET OF THE SET  OF  READONLY
              NAMES.   THE -P OPTION CAUSES OUTPUT TO BE DISPLAYED IN A FORMAT
              THAT MAY BE REUSED AS INPUT.  IF A VARIABLE NAME IS FOLLOWED  BY
              =WORD,  THE  VALUE  OF  THE VARIABLE IS SET TO WORD.  THE RETURN
              STATUS IS 0 UNLESS AN INVALID OPTION IS ENCOUNTERED, ONE OF  THE
              NAMES IS NOT A VALID SHELL VARIABLE NAME, OR -F IS SUPPLIED WITH
              A NAME THAT IS NOT A FUNCTION.

       RETURN [N]
              CAUSES A FUNCTION TO STOP EXECUTING AND RETURN THE VALUE  SPECI‐
              FIED  BY N TO ITS CALLER.  IF N IS OMITTED, THE RETURN STATUS IS
              THAT OF THE LAST COMMAND EXECUTED  IN  THE  FUNCTION  BODY.   IF
              RETURN  IS  USED  OUTSIDE  A FUNCTION, BUT DURING EXECUTION OF A
              SCRIPT BY THE .  (SOURCE) COMMAND, IT CAUSES THE SHELL  TO  STOP
              EXECUTING  THAT SCRIPT AND RETURN EITHER N OR THE EXIT STATUS OF
              THE LAST COMMAND EXECUTED WITHIN THE SCRIPT AS THE  EXIT  STATUS
              OF  THE SCRIPT.  IF N IS SUPPLIED, THE RETURN VALUE IS ITS LEAST
              SIGNIFICANT 8 BITS.  THE RETURN STATUS IS NON-ZERO IF RETURN  IS
              SUPPLIED  A  NON-NUMERIC ARGUMENT, OR IS USED OUTSIDE A FUNCTION
              AND NOT DURING EXECUTION OF A SCRIPT BY . OR SOURCE.   ANY  COM‐
              MAND  ASSOCIATED  WITH THE RETURN TRAP IS EXECUTED BEFORE EXECU‐
              TION RESUMES AFTER THE FUNCTION OR SCRIPT.

       SET [--ABEFHKMNPTUVXBCEHPT] [-O OPTION-NAME] [ARG ...]
       SET [+ABEFHKMNPTUVXBCEHPT] [+O OPTION-NAME] [ARG ...]
              WITHOUT OPTIONS, THE NAME AND VALUE OF EACH SHELL  VARIABLE  ARE
              DISPLAYED IN A FORMAT THAT CAN BE REUSED AS INPUT FOR SETTING OR
              RESETTING THE CURRENTLY-SET VARIABLES.  READ-ONLY VARIABLES CAN‐
              NOT  BE  RESET.  IN POSIX MODE, ONLY SHELL VARIABLES ARE LISTED.
              THE OUTPUT IS SORTED ACCORDING  TO  THE  CURRENT  LOCALE.   WHEN
              OPTIONS  ARE SPECIFIED, THEY SET OR UNSET SHELL ATTRIBUTES.  ANY
              ARGUMENTS REMAINING AFTER OPTION PROCESSING ARE TREATED AS  VAL‐
              UES FOR THE POSITIONAL PARAMETERS AND ARE ASSIGNED, IN ORDER, TO
              $1, $2, ...  $N.  OPTIONS,  IF  SPECIFIED,  HAVE  THE  FOLLOWING
              MEANINGS:
              -A      AUTOMATICALLY  MARK  VARIABLES  AND  FUNCTIONS WHICH ARE
                      MODIFIED OR CREATED FOR EXPORT  TO  THE  ENVIRONMENT  OF
                      SUBSEQUENT COMMANDS.
              -B      REPORT  THE STATUS OF TERMINATED BACKGROUND JOBS IMMEDI‐
                      ATELY, RATHER THAN BEFORE THE NEXT PRIMARY PROMPT.  THIS
                      IS EFFECTIVE ONLY WHEN JOB CONTROL IS ENABLED.
              -E      EXIT  IMMEDIATELY  IF A PIPELINE (WHICH MAY CONSIST OF A
                      SINGLE SIMPLE COMMAND), A LIST, OR  A  COMPOUND  COMMAND
                      (SEE  SHELL  GRAMMAR ABOVE),  EXITS WITH A NON-ZERO STA‐
                      TUS.  THE SHELL DOES NOT EXIT IF THE COMMAND THAT  FAILS
                      IS  PART  OF  THE  COMMAND  LIST IMMEDIATELY FOLLOWING A
                      WHILE OR UNTIL KEYWORD, PART OF THE TEST  FOLLOWING  THE
                      IF  OR ELIF RESERVED WORDS, PART OF ANY COMMAND EXECUTED
                      IN A && OR || LIST  EXCEPT  THE  COMMAND  FOLLOWING  THE
                      FINAL  && OR ||, ANY COMMAND IN A PIPELINE BUT THE LAST,
                      OR IF THE COMMAND'S RETURN VALUE IS BEING INVERTED  WITH
                      !.   IF A COMPOUND COMMAND OTHER THAN A SUBSHELL RETURNS
                      A NON-ZERO STATUS BECAUSE A COMMAND FAILED WHILE -E  WAS
                      BEING  IGNORED, THE SHELL DOES NOT EXIT.  A TRAP ON ERR,
                      IF SET, IS EXECUTED BEFORE THE SHELL EXITS.  THIS OPTION
                      APPLIES TO THE SHELL ENVIRONMENT AND EACH SUBSHELL ENVI‐
                      RONMENT SEPARATELY (SEE  COMMAND  EXECUTION  ENVIRONMENT
                      ABOVE), AND MAY CAUSE SUBSHELLS TO EXIT BEFORE EXECUTING
                      ALL THE COMMANDS IN THE SUBSHELL.

                      IF A COMPOUND COMMAND OR SHELL FUNCTION  EXECUTES  IN  A
                      CONTEXT  WHERE -E IS BEING IGNORED, NONE OF THE COMMANDS
                      EXECUTED WITHIN THE COMPOUND COMMAND  OR  FUNCTION  BODY
                      WILL  BE  AFFECTED  BY THE -E SETTING, EVEN IF -E IS SET
                      AND A COMMAND RETURNS A FAILURE STATUS.  IF  A  COMPOUND
                      COMMAND  OR  SHELL FUNCTION SETS -E WHILE EXECUTING IN A
                      CONTEXT WHERE -E IS IGNORED, THAT SETTING WILL NOT  HAVE
                      ANY  EFFECT  UNTIL  THE  COMPOUND COMMAND OR THE COMMAND
                      CONTAINING THE FUNCTION CALL COMPLETES.
              -F      DISABLE PATHNAME EXPANSION.
              -H      REMEMBER THE LOCATION OF COMMANDS AS THEY ARE LOOKED  UP
                      FOR EXECUTION.  THIS IS ENABLED BY DEFAULT.
              -K      ALL  ARGUMENTS  IN THE FORM OF ASSIGNMENT STATEMENTS ARE
                      PLACED IN THE ENVIRONMENT FOR A COMMAND, NOT JUST  THOSE
                      THAT PRECEDE THE COMMAND NAME.
              -M      MONITOR  MODE.   JOB CONTROL IS ENABLED.  THIS OPTION IS
                      ON BY DEFAULT FOR INTERACTIVE  SHELLS  ON  SYSTEMS  THAT
                      SUPPORT  IT  (SEE JOB CONTROL ABOVE).  ALL PROCESSES RUN
                      IN A SEPARATE PROCESS GROUP.  WHEN A BACKGROUND JOB COM‐
                      PLETES, THE SHELL PRINTS A LINE CONTAINING ITS EXIT STA‐
                      TUS.
              -N      READ COMMANDS BUT DO NOT EXECUTE THEM.  THIS MAY BE USED
                      TO  CHECK  A  SHELL  SCRIPT  FOR SYNTAX ERRORS.  THIS IS
                      IGNORED BY INTERACTIVE SHELLS.
              -O OPTION-NAME
                      THE OPTION-NAME CAN BE ONE OF THE FOLLOWING:
                      ALLEXPORT
                              SAME AS -A.
                      BRACEEXPAND
                              SAME AS -B.
                      EMACS   USE AN EMACS-STYLE COMMAND LINE  EDITING  INTER‐
                              FACE.  THIS IS ENABLED BY DEFAULT WHEN THE SHELL
                              IS INTERACTIVE, UNLESS THE SHELL IS STARTED WITH
                              THE  --NOEDITING  OPTION.  THIS ALSO AFFECTS THE
                              EDITING INTERFACE USED FOR READ -E.
                      ERREXIT SAME AS -E.
                      ERRTRACE
                              SAME AS -E.
                      FUNCTRACE
                              SAME AS -T.
                      HASHALL SAME AS -H.
                      HISTEXPAND
                              SAME AS -H.
                      HISTORY ENABLE COMMAND HISTORY, AS DESCRIBED ABOVE UNDER
                              HISTORY.  THIS OPTION IS ON BY DEFAULT IN INTER‐
                              ACTIVE SHELLS.
                      IGNOREEOF
                              THE  EFFECT  IS  AS   IF   THE   SHELL   COMMAND
                              ``IGNOREEOF=10''  HAD  BEEN  EXECUTED (SEE SHELL
                              VARIABLES ABOVE).
                      KEYWORD SAME AS -K.
                      MONITOR SAME AS -M.
                      NOCLOBBER
                              SAME AS -C.
                      NOEXEC  SAME AS -N.
                      NOGLOB  SAME AS -F.
                      NOLOG   CURRENTLY IGNORED.
                      NOTIFY  SAME AS -B.
                      NOUNSET SAME AS -U.
                      ONECMD  SAME AS -T.
                      PHYSICAL
                              SAME AS -P.
                      PIPEFAIL
                              IF SET, THE RETURN VALUE OF A  PIPELINE  IS  THE
                              VALUE  OF  THE  LAST (RIGHTMOST) COMMAND TO EXIT
                              WITH A NON-ZERO STATUS, OR ZERO IF ALL  COMMANDS
                              IN  THE PIPELINE EXIT SUCCESSFULLY.  THIS OPTION
                              IS DISABLED BY DEFAULT.
                      POSIX   CHANGE THE BEHAVIOR OF BASH  WHERE  THE  DEFAULT
                              OPERATION  DIFFERS  FROM  THE  POSIX STANDARD TO
                              MATCH THE STANDARD (POSIX MODE).  SEE  SEE  ALSO
                              BELOW FOR A REFERENCE TO A DOCUMENT THAT DETAILS
                              HOW POSIX MODE AFFECTS BASH'S BEHAVIOR.
                      PRIVILEGED
                              SAME AS -P.
                      VERBOSE SAME AS -V.
                      VI      USE A VI-STYLE COMMAND LINE  EDITING  INTERFACE.
                              THIS ALSO AFFECTS THE EDITING INTERFACE USED FOR
                              READ -E.
                      XTRACE  SAME AS -X.
                      IF -O IS SUPPLIED WITH NO OPTION-NAME, THE VALUES OF THE
                      CURRENT  OPTIONS ARE PRINTED.  IF +O IS SUPPLIED WITH NO
                      OPTION-NAME, A SERIES OF SET COMMANDS  TO  RECREATE  THE
                      CURRENT  OPTION  SETTINGS  IS  DISPLAYED ON THE STANDARD
                      OUTPUT.
              -P      TURN ON PRIVILEGED MODE.  IN THIS  MODE,  THE  $ENV  AND
                      $BASH_ENV  FILES  ARE NOT PROCESSED, SHELL FUNCTIONS ARE
                      NOT INHERITED FROM THE ENVIRONMENT, AND  THE  SHELLOPTS,
                      BASHOPTS,  CDPATH,  AND  GLOBIGNORE  VARIABLES,  IF THEY
                      APPEAR IN THE ENVIRONMENT, ARE IGNORED.  IF THE SHELL IS
                      STARTED  WITH THE EFFECTIVE USER (GROUP) ID NOT EQUAL TO
                      THE REAL USER (GROUP) ID, AND THE -P OPTION IS NOT  SUP‐
                      PLIED, THESE ACTIONS ARE TAKEN AND THE EFFECTIVE USER ID
                      IS SET TO THE REAL USER ID.  IF THE -P  OPTION  IS  SUP‐
                      PLIED  AT  STARTUP,  THE EFFECTIVE USER ID IS NOT RESET.
                      TURNING THIS OPTION OFF CAUSES THE  EFFECTIVE  USER  AND
                      GROUP IDS TO BE SET TO THE REAL USER AND GROUP IDS.
              -T      EXIT AFTER READING AND EXECUTING ONE COMMAND.
              -U      TREAT UNSET VARIABLES AND PARAMETERS OTHER THAN THE SPE‐
                      CIAL PARAMETERS "@" AND "*" AS AN ERROR WHEN  PERFORMING
                      PARAMETER  EXPANSION.   IF  EXPANSION IS ATTEMPTED ON AN
                      UNSET VARIABLE OR PARAMETER, THE SHELL PRINTS  AN  ERROR
                      MESSAGE,  AND, IF NOT INTERACTIVE, EXITS WITH A NON-ZERO
                      STATUS.
              -V      PRINT SHELL INPUT LINES AS THEY ARE READ.
              -X      AFTER EXPANDING EACH SIMPLE COMMAND, FOR  COMMAND,  CASE
                      COMMAND, SELECT COMMAND, OR ARITHMETIC FOR COMMAND, DIS‐
                      PLAY THE EXPANDED VALUE OF PS4, FOLLOWED BY THE  COMMAND
                      AND ITS EXPANDED ARGUMENTS OR ASSOCIATED WORD LIST.
              -B      THE  SHELL PERFORMS BRACE EXPANSION (SEE BRACE EXPANSION
                      ABOVE).  THIS IS ON BY DEFAULT.
              -C      IF SET, BASH DOES NOT OVERWRITE AN  EXISTING  FILE  WITH
                      THE  >,  >&,  AND <> REDIRECTION OPERATORS.  THIS MAY BE
                      OVERRIDDEN WHEN CREATING OUTPUT FILES BY USING THE REDI‐
                      RECTION OPERATOR >| INSTEAD OF >.
              -E      IF SET, ANY TRAP ON ERR IS INHERITED BY SHELL FUNCTIONS,
                      COMMAND SUBSTITUTIONS, AND COMMANDS EXECUTED IN  A  SUB‐
                      SHELL  ENVIRONMENT.  THE ERR TRAP IS NORMALLY NOT INHER‐
                      ITED IN SUCH CASES.
              -H      ENABLE !  STYLE HISTORY SUBSTITUTION.  THIS OPTION IS ON
                      BY DEFAULT WHEN THE SHELL IS INTERACTIVE.
              -P      IF  SET,  THE SHELL DOES NOT RESOLVE SYMBOLIC LINKS WHEN
                      EXECUTING COMMANDS SUCH AS CD THAT  CHANGE  THE  CURRENT
                      WORKING  DIRECTORY.   IT  USES  THE  PHYSICAL  DIRECTORY
                      STRUCTURE INSTEAD.  BY DEFAULT, BASH FOLLOWS THE LOGICAL
                      CHAIN  OF  DIRECTORIES  WHEN  PERFORMING  COMMANDS WHICH
                      CHANGE THE CURRENT DIRECTORY.
              -T      IF SET, ANY TRAPS ON DEBUG AND RETURN ARE  INHERITED  BY
                      SHELL  FUNCTIONS,  COMMAND  SUBSTITUTIONS,  AND COMMANDS
                      EXECUTED IN  A  SUBSHELL  ENVIRONMENT.   THE  DEBUG  AND
                      RETURN TRAPS ARE NORMALLY NOT INHERITED IN SUCH CASES.
              --      IF  NO ARGUMENTS FOLLOW THIS OPTION, THEN THE POSITIONAL
                      PARAMETERS ARE UNSET.  OTHERWISE, THE POSITIONAL PARAME‐
                      TERS  ARE  SET  TO  THE ARGS, EVEN IF SOME OF THEM BEGIN
                      WITH A -.
              -       SIGNAL THE END OF OPTIONS, CAUSE ALL REMAINING  ARGS  TO
                      BE ASSIGNED TO THE POSITIONAL PARAMETERS.  THE -X AND -V
                      OPTIONS ARE TURNED OFF.  IF THERE ARE NO ARGS, THE POSI‐
                      TIONAL PARAMETERS REMAIN UNCHANGED.

              THE  OPTIONS ARE OFF BY DEFAULT UNLESS OTHERWISE NOTED.  USING +
              RATHER THAN - CAUSES  THESE  OPTIONS  TO  BE  TURNED  OFF.   THE
              OPTIONS  CAN  ALSO BE SPECIFIED AS ARGUMENTS TO AN INVOCATION OF
              THE SHELL.  THE CURRENT SET OF OPTIONS MAY BE FOUND IN $-.   THE
              RETURN STATUS IS ALWAYS TRUE UNLESS AN INVALID OPTION IS ENCOUN‐
              TERED.

       SHIFT [N]
              THE POSITIONAL PARAMETERS FROM N+1 ... ARE RENAMED  TO  $1  ....
              PARAMETERS  REPRESENTED  BY  THE  NUMBERS  $# DOWN TO $#-N+1 ARE
              UNSET.  N MUST BE A NON-NEGATIVE NUMBER LESS THAN  OR  EQUAL  TO
              $#.   IF  N IS 0, NO PARAMETERS ARE CHANGED.  IF N IS NOT GIVEN,
              IT IS ASSUMED TO BE 1.  IF N IS GREATER THAN $#, THE  POSITIONAL
              PARAMETERS  ARE  NOT CHANGED.  THE RETURN STATUS IS GREATER THAN
              ZERO IF N IS GREATER THAN $# OR LESS THAN ZERO; OTHERWISE 0.

       SHOPT [-PQSU] [-O] [OPTNAME ...]
              TOGGLE THE VALUES OF SETTINGS CONTROLLING OPTIONAL SHELL  BEHAV‐
              IOR.   THE SETTINGS CAN BE EITHER THOSE LISTED BELOW, OR, IF THE
              -O OPTION IS USED, THOSE AVAILABLE WITH THE -O OPTION TO THE SET
              BUILTIN COMMAND.  WITH NO OPTIONS, OR WITH THE -P OPTION, A LIST
              OF ALL SETTABLE OPTIONS IS  DISPLAYED,  WITH  AN  INDICATION  OF
              WHETHER  OR  NOT EACH IS SET.  THE -P OPTION CAUSES OUTPUT TO BE
              DISPLAYED IN A FORM THAT MAY BE REUSED AS INPUT.  OTHER  OPTIONS
              HAVE THE FOLLOWING MEANINGS:
              -S     ENABLE (SET) EACH OPTNAME.
              -U     DISABLE (UNSET) EACH OPTNAME.
              -Q     SUPPRESSES  NORMAL OUTPUT (QUIET MODE); THE RETURN STATUS
                     INDICATES WHETHER THE OPTNAME IS SET OR UNSET.  IF MULTI‐
                     PLE  OPTNAME ARGUMENTS ARE GIVEN WITH -Q, THE RETURN STA‐
                     TUS IS ZERO IF ALL OPTNAMES ARE ENABLED; NON-ZERO  OTHER‐
                     WISE.
              -O     RESTRICTS  THE  VALUES OF OPTNAME TO BE THOSE DEFINED FOR
                     THE -O OPTION TO THE SET BUILTIN.

              IF EITHER -S OR -U IS USED  WITH  NO  OPTNAME  ARGUMENTS,  SHOPT
              SHOWS  ONLY  THOSE OPTIONS WHICH ARE SET OR UNSET, RESPECTIVELY.
              UNLESS OTHERWISE NOTED, THE SHOPT OPTIONS ARE  DISABLED  (UNSET)
              BY DEFAULT.

              THE  RETURN  STATUS WHEN LISTING OPTIONS IS ZERO IF ALL OPTNAMES
              ARE ENABLED, NON-ZERO  OTHERWISE.   WHEN  SETTING  OR  UNSETTING
              OPTIONS,  THE  RETURN  STATUS IS ZERO UNLESS AN OPTNAME IS NOT A
              VALID SHELL OPTION.

              THE LIST OF SHOPT OPTIONS IS:

              AUTOCD  IF SET, A COMMAND NAME THAT IS THE NAME OF  A  DIRECTORY
                      IS  EXECUTED  AS  IF IT WERE THE ARGUMENT TO THE CD COM‐
                      MAND.  THIS OPTION IS ONLY USED BY INTERACTIVE SHELLS.
              CDABLE_VARS
                      IF SET, AN ARGUMENT TO THE CD BUILTIN  COMMAND  THAT  IS
                      NOT  A DIRECTORY IS ASSUMED TO BE THE NAME OF A VARIABLE
                      WHOSE VALUE IS THE DIRECTORY TO CHANGE TO.
              CDSPELL IF SET, MINOR ERRORS IN THE SPELLING OF A DIRECTORY COM‐
                      PONENT  IN  A  CD COMMAND WILL BE CORRECTED.  THE ERRORS
                      CHECKED FOR ARE TRANSPOSED CHARACTERS, A MISSING CHARAC‐
                      TER,  AND  ONE  CHARACTER  TOO MANY.  IF A CORRECTION IS
                      FOUND, THE CORRECTED FILENAME IS PRINTED, AND  THE  COM‐
                      MAND  PROCEEDS.  THIS OPTION IS ONLY USED BY INTERACTIVE
                      SHELLS.
              CHECKHASH
                      IF SET, BASH CHECKS THAT A COMMAND FOUND IN THE HASH TA‐
                      BLE  EXISTS  BEFORE  TRYING  TO EXECUTE IT.  IF A HASHED
                      COMMAND NO LONGER EXISTS, A NORMAL PATH SEARCH  IS  PER‐
                      FORMED.
              CHECKJOBS
                      IF SET, BASH LISTS THE STATUS OF ANY STOPPED AND RUNNING
                      JOBS BEFORE EXITING AN INTERACTIVE SHELL.  IF  ANY  JOBS
                      ARE RUNNING, THIS CAUSES THE EXIT TO BE DEFERRED UNTIL A
                      SECOND EXIT IS ATTEMPTED WITHOUT AN INTERVENING  COMMAND
                      (SEE  JOB  CONTROL  ABOVE).   THE SHELL ALWAYS POSTPONES
                      EXITING IF ANY JOBS ARE STOPPED.
              CHECKWINSIZE
                      IF SET, BASH CHECKS THE WINDOW SIZE AFTER  EACH  COMMAND
                      AND,  IF NECESSARY, UPDATES THE VALUES OF LINES AND COL‐
                      UMNS.
              CMDHIST IF SET, BASH ATTEMPTS TO SAVE ALL LINES OF  A  MULTIPLE-
                      LINE  COMMAND  IN  THE  SAME HISTORY ENTRY.  THIS ALLOWS
                      EASY RE-EDITING OF MULTI-LINE COMMANDS.
              COMPAT31
                      IF SET, BASH CHANGES ITS BEHAVIOR TO THAT OF VERSION 3.1
                      WITH  RESPECT  TO QUOTED ARGUMENTS TO THE [[ CONDITIONAL
                      COMMAND'S =~ OPERATOR AND LOCALE-SPECIFIC STRING COMPAR‐
                      ISON  WHEN  USING  THE  [[ CONDITIONAL COMMAND'S < AND >
                      OPERATORS.  BASH VERSIONS PRIOR TO  BASH-4.1  USE  ASCII
                      COLLATION AND STRCMP(3); BASH-4.1 AND LATER USE THE CUR‐
                      RENT LOCALE'S COLLATION SEQUENCE AND STRCOLL(3).
              COMPAT32
                      IF SET, BASH CHANGES ITS BEHAVIOR TO THAT OF VERSION 3.2
                      WITH  RESPECT  TO LOCALE-SPECIFIC STRING COMPARISON WHEN
                      USING THE [[ CONDITIONAL COMMAND'S  <  AND  >  OPERATORS
                      (SEE PREVIOUS ITEM).
              COMPAT40
                      IF SET, BASH CHANGES ITS BEHAVIOR TO THAT OF VERSION 4.0
                      WITH RESPECT TO LOCALE-SPECIFIC STRING  COMPARISON  WHEN
                      USING  THE  [[  CONDITIONAL  COMMAND'S < AND > OPERATORS
                      (SEE DESCRIPTION OF COMPAT31) AND THE EFFECT  OF  INTER‐
                      RUPTING  A  COMMAND  LIST.   BASH VERSIONS 4.0 AND LATER
                      INTERRUPT THE LIST AS IF THE SHELL RECEIVED  THE  INTER‐
                      RUPT;  PREVIOUS  VERSIONS CONTINUE WITH THE NEXT COMMAND
                      IN THE LIST.
              COMPAT41
                      IF SET, BASH, WHEN IN POSIX MODE, TREATS A SINGLE  QUOTE
                      IN  A  DOUBLE-QUOTED  PARAMETER  EXPANSION  AS A SPECIAL
                      CHARACTER.  THE SINGLE QUOTES MUST MATCH (AN  EVEN  NUM‐
                      BER)  AND  THE  CHARACTERS BETWEEN THE SINGLE QUOTES ARE
                      CONSIDERED QUOTED.  THIS IS THE BEHAVIOR OF  POSIX  MODE
                      THROUGH  VERSION 4.1.  THE DEFAULT BASH BEHAVIOR REMAINS
                      AS IN PREVIOUS VERSIONS.
              COMPAT42
                      IF SET, BASH DOES NOT PROCESS THE REPLACEMENT STRING  IN
                      THE  PATTERN  SUBSTITUTION  WORD  EXPANSION  USING QUOTE
                      REMOVAL.
              COMPLETE_FULLQUOTE
                      IF SET, BASH QUOTES ALL SHELL  METACHARACTERS  IN  FILE‐
                      NAMES  AND  DIRECTORY  NAMES WHEN PERFORMING COMPLETION.
                      IF NOT SET, BASH REMOVES METACHARACTERS SUCH AS THE DOL‐
                      LAR  SIGN FROM THE SET OF CHARACTERS THAT WILL BE QUOTED
                      IN COMPLETED FILENAMES WHEN THESE METACHARACTERS  APPEAR
                      IN  SHELL  VARIABLE REFERENCES IN WORDS TO BE COMPLETED.
                      THIS MEANS THAT DOLLAR  SIGNS  IN  VARIABLE  NAMES  THAT
                      EXPAND  TO  DIRECTORIES WILL NOT BE QUOTED; HOWEVER, ANY
                      DOLLAR SIGNS APPEARING IN FILENAMES WILL NOT BE  QUOTED,
                      EITHER.   THIS  IS  ACTIVE ONLY WHEN BASH IS USING BACK‐
                      SLASHES TO QUOTE COMPLETED FILENAMES.  THIS VARIABLE  IS
                      SET  BY  DEFAULT,  WHICH IS THE DEFAULT BASH BEHAVIOR IN
                      VERSIONS THROUGH 4.2.
              DIREXPAND
                      IF SET, BASH REPLACES DIRECTORY NAMES WITH  THE  RESULTS
                      OF  WORD  EXPANSION WHEN PERFORMING FILENAME COMPLETION.
                      THIS CHANGES THE CONTENTS OF THE READLINE  EDITING  BUF‐
                      FER.   IF  NOT  SET,  BASH ATTEMPTS TO PRESERVE WHAT THE
                      USER TYPED.
              DIRSPELL
                      IF SET, BASH ATTEMPTS SPELLING CORRECTION  ON  DIRECTORY
                      NAMES  DURING WORD COMPLETION IF THE DIRECTORY NAME INI‐
                      TIALLY SUPPLIED DOES NOT EXIST.
              DOTGLOB IF SET, BASH INCLUDES FILENAMES BEGINNING WITH A `.'  IN
                      THE RESULTS OF PATHNAME EXPANSION.
              EXECFAIL
                      IF SET, A NON-INTERACTIVE SHELL WILL NOT EXIT IF IT CAN‐
                      NOT EXECUTE THE FILE SPECIFIED AS  AN  ARGUMENT  TO  THE
                      EXEC  BUILTIN  COMMAND.   AN  INTERACTIVE SHELL DOES NOT
                      EXIT IF EXEC FAILS.
              EXPAND_ALIASES
                      IF SET, ALIASES ARE EXPANDED AS  DESCRIBED  ABOVE  UNDER
                      ALIASES.  THIS OPTION IS ENABLED BY DEFAULT FOR INTERAC‐
                      TIVE SHELLS.
              EXTDEBUG
                      IF SET,  BEHAVIOR  INTENDED  FOR  USE  BY  DEBUGGERS  IS
                      ENABLED:
                      1.     THE -F OPTION TO THE DECLARE BUILTIN DISPLAYS THE
                             SOURCE FILE NAME AND LINE NUMBER CORRESPONDING TO
                             EACH FUNCTION NAME SUPPLIED AS AN ARGUMENT.
                      2.     IF  THE  COMMAND  RUN BY THE DEBUG TRAP RETURNS A
                             NON-ZERO VALUE, THE NEXT COMMAND IS  SKIPPED  AND
                             NOT EXECUTED.
                      3.     IF  THE  COMMAND  RUN BY THE DEBUG TRAP RETURNS A
                             VALUE OF 2, AND THE SHELL IS EXECUTING IN A  SUB‐
                             ROUTINE  (A SHELL FUNCTION OR A SHELL SCRIPT EXE‐
                             CUTED BY THE . OR SOURCE  BUILTINS),  A  CALL  TO
                             RETURN IS SIMULATED.
                      4.     BASH_ARGC  AND BASH_ARGV ARE UPDATED AS DESCRIBED
                             IN THEIR DESCRIPTIONS ABOVE.
                      5.     FUNCTION TRACING IS ENABLED:   COMMAND  SUBSTITU‐
                             TION, SHELL FUNCTIONS, AND SUBSHELLS INVOKED WITH
                             ( COMMAND ) INHERIT THE DEBUG AND RETURN TRAPS.
                      6.     ERROR TRACING IS ENABLED:  COMMAND  SUBSTITUTION,
                             SHELL  FUNCTIONS,  AND  SUBSHELLS  INVOKED WITH (
                             COMMAND ) INHERIT THE ERR TRAP.
              EXTGLOB IF SET, THE EXTENDED PATTERN MATCHING FEATURES DESCRIBED
                      ABOVE UNDER PATHNAME EXPANSION ARE ENABLED.
              EXTQUOTE
                      IF  SET,  $'STRING'  AND  $"STRING" QUOTING IS PERFORMED
                      WITHIN  ${PARAMETER}  EXPANSIONS  ENCLOSED   IN   DOUBLE
                      QUOTES.  THIS OPTION IS ENABLED BY DEFAULT.
              FAILGLOB
                      IF  SET,  PATTERNS  WHICH FAIL TO MATCH FILENAMES DURING
                      PATHNAME EXPANSION RESULT IN AN EXPANSION ERROR.
              FORCE_FIGNORE
                      IF SET, THE SUFFIXES  SPECIFIED  BY  THE  FIGNORE  SHELL
                      VARIABLE  CAUSE WORDS TO BE IGNORED WHEN PERFORMING WORD
                      COMPLETION EVEN IF THE IGNORED WORDS ARE THE ONLY POSSI‐
                      BLE  COMPLETIONS.   SEE  SHELL  VARIABLES  ABOVE  FOR  A
                      DESCRIPTION OF  FIGNORE.   THIS  OPTION  IS  ENABLED  BY
                      DEFAULT.
              GLOBASCIIRANGES
                      IF  SET,  RANGE  EXPRESSIONS  USED  IN  PATTERN MATCHING
                      BRACKET EXPRESSIONS (SEE PATTERN MATCHING ABOVE)  BEHAVE
                      AS  IF  IN THE TRADITIONAL C LOCALE WHEN PERFORMING COM‐
                      PARISONS.   THAT  IS,  THE  CURRENT  LOCALE'S  COLLATING
                      SEQUENCE  IS  NOT TAKEN INTO ACCOUNT, SO B WILL NOT COL‐
                      LATE BETWEEN A AND  B,  AND  UPPER-CASE  AND  LOWER-CASE
                      ASCII CHARACTERS WILL COLLATE TOGETHER.
              GLOBSTAR
                      IF SET, THE PATTERN ** USED IN A PATHNAME EXPANSION CON‐
                      TEXT WILL MATCH ALL FILES AND ZERO OR  MORE  DIRECTORIES
                      AND  SUBDIRECTORIES.  IF THE PATTERN IS FOLLOWED BY A /,
                      ONLY DIRECTORIES AND SUBDIRECTORIES MATCH.
              GNU_ERRFMT
                      IF SET, SHELL ERROR MESSAGES ARE WRITTEN IN THE STANDARD
                      GNU ERROR MESSAGE FORMAT.
              HISTAPPEND
                      IF  SET,  THE HISTORY LIST IS APPENDED TO THE FILE NAMED
                      BY THE VALUE OF THE HISTFILE  VARIABLE  WHEN  THE  SHELL
                      EXITS, RATHER THAN OVERWRITING THE FILE.
              HISTREEDIT
                      IF  SET, AND READLINE IS BEING USED, A USER IS GIVEN THE
                      OPPORTUNITY TO RE-EDIT A FAILED HISTORY SUBSTITUTION.
              HISTVERIFY
                      IF SET, AND READLINE IS BEING USED, THE RESULTS OF  HIS‐
                      TORY  SUBSTITUTION  ARE  NOT  IMMEDIATELY  PASSED TO THE
                      SHELL PARSER.  INSTEAD, THE  RESULTING  LINE  IS  LOADED
                      INTO THE READLINE EDITING BUFFER, ALLOWING FURTHER MODI‐
                      FICATION.
              HOSTCOMPLETE
                      IF SET, AND READLINE IS BEING USED, BASH WILL ATTEMPT TO
                      PERFORM  HOSTNAME  COMPLETION WHEN A WORD CONTAINING A @
                      IS  BEING  COMPLETED  (SEE  COMPLETING  UNDER   READLINE
                      ABOVE).  THIS IS ENABLED BY DEFAULT.
              HUPONEXIT
                      IF SET, BASH WILL SEND SIGHUP TO ALL JOBS WHEN AN INTER‐
                      ACTIVE LOGIN SHELL EXITS.
              INTERACTIVE_COMMENTS
                      IF SET, ALLOW A WORD BEGINNING WITH # TO CAUSE THAT WORD
                      AND  ALL REMAINING CHARACTERS ON THAT LINE TO BE IGNORED
                      IN AN INTERACTIVE  SHELL  (SEE  COMMENTS  ABOVE).   THIS
                      OPTION IS ENABLED BY DEFAULT.
              LASTPIPE
                      IF  SET,  AND  JOB CONTROL IS NOT ACTIVE, THE SHELL RUNS
                      THE LAST COMMAND OF A PIPELINE NOT EXECUTED IN THE BACK‐
                      GROUND IN THE CURRENT SHELL ENVIRONMENT.
              LITHIST IF  SET,  AND  THE CMDHIST OPTION IS ENABLED, MULTI-LINE
                      COMMANDS ARE SAVED TO THE HISTORY WITH EMBEDDED NEWLINES
                      RATHER THAN USING SEMICOLON SEPARATORS WHERE POSSIBLE.
              LOGIN_SHELL
                      THE  SHELL  SETS THIS OPTION IF IT IS STARTED AS A LOGIN
                      SHELL (SEE INVOCATION ABOVE).   THE  VALUE  MAY  NOT  BE
                      CHANGED.
              MAILWARN
                      IF  SET,  AND  A FILE THAT BASH IS CHECKING FOR MAIL HAS
                      BEEN ACCESSED SINCE THE LAST TIME IT  WAS  CHECKED,  THE
                      MESSAGE  ``THE  MAIL IN MAILFILE HAS BEEN READ'' IS DIS‐
                      PLAYED.
              NO_EMPTY_CMD_COMPLETION
                      IF SET, AND  READLINE  IS  BEING  USED,  BASH  WILL  NOT
                      ATTEMPT TO SEARCH THE PATH FOR POSSIBLE COMPLETIONS WHEN
                      COMPLETION IS ATTEMPTED ON AN EMPTY LINE.
              NOCASEGLOB
                      IF SET, BASH MATCHES  FILENAMES  IN  A  CASE-INSENSITIVE
                      FASHION WHEN PERFORMING PATHNAME EXPANSION (SEE PATHNAME
                      EXPANSION ABOVE).
              NOCASEMATCH
                      IF SET, BASH  MATCHES  PATTERNS  IN  A  CASE-INSENSITIVE
                      FASHION WHEN PERFORMING MATCHING WHILE EXECUTING CASE OR
                      [[ CONDITIONAL COMMANDS.
              NULLGLOB
                      IF SET, BASH ALLOWS PATTERNS WHICH MATCH NO  FILES  (SEE
                      PATHNAME  EXPANSION  ABOVE)  TO EXPAND TO A NULL STRING,
                      RATHER THAN THEMSELVES.
              PROGCOMP
                      IF SET, THE PROGRAMMABLE COMPLETION FACILITIES (SEE PRO‐
                      GRAMMABLE COMPLETION ABOVE) ARE ENABLED.  THIS OPTION IS
                      ENABLED BY DEFAULT.
              PROMPTVARS
                      IF SET, PROMPT STRINGS UNDERGO PARAMETER EXPANSION, COM‐
                      MAND   SUBSTITUTION,  ARITHMETIC  EXPANSION,  AND  QUOTE
                      REMOVAL AFTER BEING EXPANDED AS DESCRIBED  IN  PROMPTING
                      ABOVE.  THIS OPTION IS ENABLED BY DEFAULT.
              RESTRICTED_SHELL
                      THE   SHELL  SETS  THIS  OPTION  IF  IT  IS  STARTED  IN
                      RESTRICTED MODE (SEE RESTRICTED SHELL BELOW).  THE VALUE
                      MAY  NOT BE CHANGED.  THIS IS NOT RESET WHEN THE STARTUP
                      FILES ARE EXECUTED, ALLOWING THE STARTUP FILES  TO  DIS‐
                      COVER WHETHER OR NOT A SHELL IS RESTRICTED.
              SHIFT_VERBOSE
                      IF  SET,  THE SHIFT BUILTIN PRINTS AN ERROR MESSAGE WHEN
                      THE SHIFT COUNT EXCEEDS THE NUMBER OF POSITIONAL PARAME‐
                      TERS.
              SOURCEPATH
                      IF SET, THE SOURCE (.) BUILTIN USES THE VALUE OF PATH TO
                      FIND THE DIRECTORY CONTAINING THE FILE  SUPPLIED  AS  AN
                      ARGUMENT.  THIS OPTION IS ENABLED BY DEFAULT.
              XPG_ECHO
                      IF   SET,  THE  ECHO  BUILTIN  EXPANDS  BACKSLASH-ESCAPE
                      SEQUENCES BY DEFAULT.

       SUSPEND [-F]
              SUSPEND THE EXECUTION OF THIS SHELL UNTIL IT RECEIVES A  SIGCONT
              SIGNAL.  A LOGIN SHELL CANNOT BE SUSPENDED; THE -F OPTION CAN BE
              USED TO OVERRIDE THIS AND FORCE THE SUSPENSION.  THE RETURN STA‐
              TUS  IS  0  UNLESS THE SHELL IS A LOGIN SHELL AND -F IS NOT SUP‐
              PLIED, OR IF JOB CONTROL IS NOT ENABLED.

       TEST EXPR
       [ EXPR ]
              RETURN A STATUS OF 0 (TRUE) OR 1 (FALSE) DEPENDING ON THE EVALU‐
              ATION OF THE CONDITIONAL EXPRESSION EXPR.  EACH OPERATOR AND OP‐
              ERAND MUST BE A SEPARATE ARGUMENT.  EXPRESSIONS ARE COMPOSED  OF
              THE  PRIMARIES  DESCRIBED  ABOVE  UNDER CONDITIONAL EXPRESSIONS.
              TEST DOES NOT ACCEPT ANY OPTIONS, NOR DOES IT ACCEPT AND  IGNORE
              AN ARGUMENT OF -- AS SIGNIFYING THE END OF OPTIONS.

              EXPRESSIONS  MAY  BE  COMBINED  USING  THE  FOLLOWING OPERATORS,
              LISTED  IN  DECREASING  ORDER  OF  PRECEDENCE.   THE  EVALUATION
              DEPENDS  ON THE NUMBER OF ARGUMENTS; SEE BELOW.  OPERATOR PRECE‐
              DENCE IS USED WHEN THERE ARE FIVE OR MORE ARGUMENTS.
              ! EXPR TRUE IF EXPR IS FALSE.
              ( EXPR )
                     RETURNS THE VALUE OF EXPR.  THIS MAY BE USED TO  OVERRIDE
                     THE NORMAL PRECEDENCE OF OPERATORS.
              EXPR1 -A EXPR2
                     TRUE IF BOTH EXPR1 AND EXPR2 ARE TRUE.
              EXPR1 -O EXPR2
                     TRUE IF EITHER EXPR1 OR EXPR2 IS TRUE.

              TEST AND [ EVALUATE CONDITIONAL EXPRESSIONS USING A SET OF RULES
              BASED ON THE NUMBER OF ARGUMENTS.

              0 ARGUMENTS
                     THE EXPRESSION IS FALSE.
              1 ARGUMENT
                     THE EXPRESSION IS TRUE IF AND ONLY IF THE ARGUMENT IS NOT
                     NULL.
              2 ARGUMENTS
                     IF THE FIRST ARGUMENT IS !, THE EXPRESSION IS TRUE IF AND
                     ONLY IF THE SECOND ARGUMENT IS NULL.  IF THE FIRST  ARGU‐
                     MENT  IS  ONE  OF  THE UNARY CONDITIONAL OPERATORS LISTED
                     ABOVE UNDER CONDITIONAL EXPRESSIONS,  THE  EXPRESSION  IS
                     TRUE IF THE UNARY TEST IS TRUE.  IF THE FIRST ARGUMENT IS
                     NOT A VALID UNARY CONDITIONAL OPERATOR, THE EXPRESSION IS
                     FALSE.
              3 ARGUMENTS
                     THE FOLLOWING CONDITIONS ARE APPLIED IN THE ORDER LISTED.
                     IF THE SECOND ARGUMENT IS ONE OF THE  BINARY  CONDITIONAL
                     OPERATORS LISTED ABOVE UNDER CONDITIONAL EXPRESSIONS, THE
                     RESULT OF THE EXPRESSION IS THE RESULT OF THE BINARY TEST
                     USING  THE FIRST AND THIRD ARGUMENTS AS OPERANDS.  THE -A
                     AND -O OPERATORS ARE  CONSIDERED  BINARY  OPERATORS  WHEN
                     THERE  ARE  THREE ARGUMENTS.  IF THE FIRST ARGUMENT IS !,
                     THE VALUE IS THE NEGATION OF THE TWO-ARGUMENT TEST  USING
                     THE SECOND AND THIRD ARGUMENTS.  IF THE FIRST ARGUMENT IS
                     EXACTLY ( AND THE THIRD ARGUMENT IS EXACTLY ), THE RESULT
                     IS  THE ONE-ARGUMENT TEST OF THE SECOND ARGUMENT.  OTHER‐
                     WISE, THE EXPRESSION IS FALSE.
              4 ARGUMENTS
                     IF THE FIRST ARGUMENT IS !, THE RESULT IS THE NEGATION OF
                     THE  THREE-ARGUMENT  EXPRESSION COMPOSED OF THE REMAINING
                     ARGUMENTS.  OTHERWISE, THE EXPRESSION IS PARSED AND EVAL‐
                     UATED  ACCORDING  TO  PRECEDENCE  USING  THE RULES LISTED
                     ABOVE.
              5 OR MORE ARGUMENTS
                     THE EXPRESSION  IS  PARSED  AND  EVALUATED  ACCORDING  TO
                     PRECEDENCE USING THE RULES LISTED ABOVE.

              WHEN  USED  WITH  TEST  OR [, THE < AND > OPERATORS SORT LEXICO‐
              GRAPHICALLY USING ASCII ORDERING.

       TIMES  PRINT THE ACCUMULATED USER AND SYSTEM TIMES FOR  THE  SHELL  AND
              FOR PROCESSES RUN FROM THE SHELL.  THE RETURN STATUS IS 0.

       TRAP [-LP] [[ARG] SIGSPEC ...]
              THE  COMMAND  ARG  IS  TO  BE  READ  AND EXECUTED WHEN THE SHELL
              RECEIVES SIGNAL(S) SIGSPEC.  IF ARG IS ABSENT (AND  THERE  IS  A
              SINGLE  SIGSPEC)  OR  -,  EACH  SPECIFIED SIGNAL IS RESET TO ITS
              ORIGINAL DISPOSITION (THE VALUE IT  HAD  UPON  ENTRANCE  TO  THE
              SHELL).   IF ARG IS THE NULL STRING THE SIGNAL SPECIFIED BY EACH
              SIGSPEC IS IGNORED BY THE SHELL AND BY THE COMMANDS IT  INVOKES.
              IF  ARG  IS  NOT PRESENT AND -P HAS BEEN SUPPLIED, THEN THE TRAP
              COMMANDS ASSOCIATED WITH EACH  SIGSPEC  ARE  DISPLAYED.   IF  NO
              ARGUMENTS  ARE  SUPPLIED OR IF ONLY -P IS GIVEN, TRAP PRINTS THE
              LIST OF COMMANDS ASSOCIATED WITH EACH  SIGNAL.   THE  -L  OPTION
              CAUSES  THE SHELL TO PRINT A LIST OF SIGNAL NAMES AND THEIR COR‐
              RESPONDING NUMBERS.   EACH  SIGSPEC  IS  EITHER  A  SIGNAL  NAME
              DEFINED  IN  <SIGNAL.H>,  OR  A SIGNAL NUMBER.  SIGNAL NAMES ARE
              CASE INSENSITIVE AND THE SIG PREFIX IS OPTIONAL.

              IF A SIGSPEC IS EXIT (0) THE COMMAND ARG  IS  EXECUTED  ON  EXIT
              FROM  THE SHELL.  IF A SIGSPEC IS DEBUG, THE COMMAND ARG IS EXE‐
              CUTED BEFORE EVERY SIMPLE COMMAND, FOR  COMMAND,  CASE  COMMAND,
              SELECT  COMMAND,  EVERY  ARITHMETIC  FOR COMMAND, AND BEFORE THE
              FIRST COMMAND EXECUTES IN A SHELL FUNCTION  (SEE  SHELL  GRAMMAR
              ABOVE).   REFER TO THE DESCRIPTION OF THE EXTDEBUG OPTION TO THE
              SHOPT BUILTIN FOR DETAILS OF ITS EFFECT ON THE DEBUG TRAP.  IF A
              SIGSPEC IS RETURN, THE COMMAND ARG IS EXECUTED EACH TIME A SHELL
              FUNCTION OR A SCRIPT EXECUTED WITH THE . OR SOURCE BUILTINS FIN‐
              ISHES EXECUTING.

              IF  A  SIGSPEC  IS ERR, THE COMMAND ARG IS EXECUTED WHENEVER A A
              PIPELINE (WHICH MAY CONSIST OF A SINGLE SIMPLE COMMAND), A LIST,
              OR A COMPOUND COMMAND RETURNS A NON-ZERO EXIT STATUS, SUBJECT TO
              THE FOLLOWING CONDITIONS.  THE ERR TRAP IS NOT EXECUTED  IF  THE
              FAILED COMMAND IS PART OF THE COMMAND LIST IMMEDIATELY FOLLOWING
              A WHILE OR UNTIL KEYWORD, PART OF THE TEST IN AN  IF  STATEMENT,
              PART OF A COMMAND EXECUTED IN A && OR || LIST EXCEPT THE COMMAND
              FOLLOWING THE FINAL && OR ||, ANY COMMAND IN A PIPELINE BUT  THE
              LAST,  OR  IF THE COMMAND'S RETURN VALUE IS BEING INVERTED USING
              !.  THESE ARE THE SAME CONDITIONS OBEYED  BY  THE  ERREXIT  (-E)
              OPTION.

              SIGNALS  IGNORED  UPON  ENTRY  TO THE SHELL CANNOT BE TRAPPED OR
              RESET.  TRAPPED SIGNALS THAT ARE NOT BEING IGNORED ARE RESET  TO
              THEIR ORIGINAL VALUES IN A SUBSHELL OR SUBSHELL ENVIRONMENT WHEN
              ONE IS CREATED.  THE RETURN STATUS IS FALSE IF  ANY  SIGSPEC  IS
              INVALID; OTHERWISE TRAP RETURNS TRUE.

       TYPE [-AFTPP] NAME [NAME ...]
              WITH  NO OPTIONS, INDICATE HOW EACH NAME WOULD BE INTERPRETED IF
              USED AS A COMMAND NAME.  IF THE -T OPTION IS USED, TYPE PRINTS A
              STRING  WHICH  IS  ONE  OF ALIAS, KEYWORD, FUNCTION, BUILTIN, OR
              FILE IF  NAME  IS  AN  ALIAS,  SHELL  RESERVED  WORD,  FUNCTION,
              BUILTIN,  OR DISK FILE, RESPECTIVELY.  IF THE NAME IS NOT FOUND,
              THEN NOTHING  IS  PRINTED,  AND  AN  EXIT  STATUS  OF  FALSE  IS
              RETURNED.   IF  THE  -P  OPTION IS USED, TYPE EITHER RETURNS THE
              NAME OF THE DISK FILE THAT WOULD BE EXECUTED IF NAME WERE SPECI‐
              FIED AS A COMMAND NAME, OR NOTHING IF ``TYPE -T NAME'' WOULD NOT
              RETURN FILE.  THE -P OPTION FORCES A PATH SEARCH FOR EACH  NAME,
              EVEN IF ``TYPE -T NAME'' WOULD NOT RETURN FILE.  IF A COMMAND IS
              HASHED, -P AND -P PRINT THE HASHED VALUE, WHICH IS NOT NECESSAR‐
              ILY  THE  FILE  THAT APPEARS FIRST IN PATH.  IF THE -A OPTION IS
              USED, TYPE PRINTS ALL OF THE PLACES THAT CONTAIN  AN  EXECUTABLE
              NAMED NAME.  THIS INCLUDES ALIASES AND FUNCTIONS, IF AND ONLY IF
              THE -P OPTION IS NOT ALSO USED.  THE TABLE OF HASHED COMMANDS IS
              NOT  CONSULTED  WHEN  USING  -A.  THE -F OPTION SUPPRESSES SHELL
              FUNCTION LOOKUP, AS WITH THE COMMAND BUILTIN.  TYPE RETURNS TRUE
              IF ALL OF THE ARGUMENTS ARE FOUND, FALSE IF ANY ARE NOT FOUND.

       ULIMIT [-HSTABCDEFILMNPQRSTUVX [LIMIT]]
              PROVIDES  CONTROL  OVER THE RESOURCES AVAILABLE TO THE SHELL AND
              TO PROCESSES STARTED BY IT, ON SYSTEMS THAT ALLOW SUCH  CONTROL.
              THE -H AND -S OPTIONS SPECIFY THAT THE HARD OR SOFT LIMIT IS SET
              FOR THE GIVEN RESOURCE.  A HARD LIMIT CANNOT BE INCREASED  BY  A
              NON-ROOT  USER  ONCE IT IS SET; A SOFT LIMIT MAY BE INCREASED UP
              TO THE VALUE OF THE HARD LIMIT.  IF NEITHER -H NOR -S IS  SPECI‐
              FIED, BOTH THE SOFT AND HARD LIMITS ARE SET.  THE VALUE OF LIMIT
              CAN BE A NUMBER IN THE UNIT SPECIFIED FOR THE RESOURCE OR ONE OF
              THE SPECIAL VALUES HARD, SOFT, OR UNLIMITED, WHICH STAND FOR THE
              CURRENT HARD LIMIT,  THE  CURRENT  SOFT  LIMIT,  AND  NO  LIMIT,
              RESPECTIVELY.   IF  LIMIT  IS  OMITTED, THE CURRENT VALUE OF THE
              SOFT LIMIT OF THE RESOURCE IS PRINTED, UNLESS THE -H  OPTION  IS
              GIVEN.  WHEN MORE THAN ONE RESOURCE IS SPECIFIED, THE LIMIT NAME
              AND UNIT ARE PRINTED BEFORE THE VALUE.  OTHER OPTIONS ARE INTER‐
              PRETED AS FOLLOWS:
              -A     ALL CURRENT LIMITS ARE REPORTED
              -B     THE MAXIMUM SOCKET BUFFER SIZE
              -C     THE MAXIMUM SIZE OF CORE FILES CREATED
              -D     THE MAXIMUM SIZE OF A PROCESS'S DATA SEGMENT
              -E     THE MAXIMUM SCHEDULING PRIORITY ("NICE")
              -F     THE  MAXIMUM  SIZE  OF FILES WRITTEN BY THE SHELL AND ITS
                     CHILDREN
              -I     THE MAXIMUM NUMBER OF PENDING SIGNALS
              -L     THE MAXIMUM SIZE THAT MAY BE LOCKED INTO MEMORY
              -M     THE MAXIMUM RESIDENT SET SIZE (MANY SYSTEMS DO NOT  HONOR
                     THIS LIMIT)
              -N     THE MAXIMUM NUMBER OF OPEN FILE DESCRIPTORS (MOST SYSTEMS
                     DO NOT ALLOW THIS VALUE TO BE SET)
              -P     THE PIPE SIZE IN 512-BYTE BLOCKS (THIS MAY NOT BE SET)
              -Q     THE MAXIMUM NUMBER OF BYTES IN POSIX MESSAGE QUEUES
              -R     THE MAXIMUM REAL-TIME SCHEDULING PRIORITY
              -S     THE MAXIMUM STACK SIZE
              -T     THE MAXIMUM AMOUNT OF CPU TIME IN SECONDS
              -U     THE MAXIMUM NUMBER OF PROCESSES  AVAILABLE  TO  A  SINGLE
                     USER
              -V     THE  MAXIMUM  AMOUNT  OF  VIRTUAL MEMORY AVAILABLE TO THE
                     SHELL AND, ON SOME SYSTEMS, TO ITS CHILDREN
              -X     THE MAXIMUM NUMBER OF FILE LOCKS
              -T     THE MAXIMUM NUMBER OF THREADS

              IF LIMIT IS GIVEN, AND THE -A OPTION IS NOT USED, LIMIT  IS  THE
              NEW  VALUE  OF  THE  SPECIFIED RESOURCE.  IF NO OPTION IS GIVEN,
              THEN -F IS ASSUMED.  VALUES ARE IN 1024-BYTE INCREMENTS,  EXCEPT
              FOR  -T,  WHICH IS IN SECONDS; -P, WHICH IS IN UNITS OF 512-BYTE
              BLOCKS; AND -T, -B, -N, AND -U, WHICH ARE UNSCALED VALUES.   THE
              RETURN  STATUS IS 0 UNLESS AN INVALID OPTION OR ARGUMENT IS SUP‐
              PLIED, OR AN ERROR OCCURS WHILE SETTING A NEW LIMIT.

       UMASK [-P] [-S] [MODE]
              THE USER FILE-CREATION MASK IS SET TO MODE.  IF MODE BEGINS WITH
              A  DIGIT,  IT IS INTERPRETED AS AN OCTAL NUMBER; OTHERWISE IT IS
              INTERPRETED AS A SYMBOLIC MODE MASK SIMILAR TO THAT ACCEPTED  BY
              CHMOD(1).   IF MODE IS OMITTED, THE CURRENT VALUE OF THE MASK IS
              PRINTED.  THE -S OPTION CAUSES THE MASK TO BE  PRINTED  IN  SYM‐
              BOLIC  FORM;  THE  DEFAULT OUTPUT IS AN OCTAL NUMBER.  IF THE -P
              OPTION IS SUPPLIED, AND MODE IS OMITTED, THE OUTPUT IS IN A FORM
              THAT MAY BE REUSED AS INPUT.  THE RETURN STATUS IS 0 IF THE MODE
              WAS SUCCESSFULLY CHANGED OR IF NO MODE  ARGUMENT  WAS  SUPPLIED,
              AND FALSE OTHERWISE.

       UNALIAS [-A] [NAME ...]
              REMOVE  EACH  NAME  FROM  THE LIST OF DEFINED ALIASES.  IF -A IS
              SUPPLIED, ALL ALIAS DEFINITIONS ARE REMOVED.  THE  RETURN  VALUE
              IS TRUE UNLESS A SUPPLIED NAME IS NOT A DEFINED ALIAS.

       UNSET [-FV] [-N] [NAME ...]
              FOR  EACH  NAME,  REMOVE THE CORRESPONDING VARIABLE OR FUNCTION.
              IF THE -V OPTION IS GIVEN, EACH NAME REFERS TO A SHELL VARIABLE,
              AND  THAT  VARIABLE  IS REMOVED.  READ-ONLY VARIABLES MAY NOT BE
              UNSET.  IF -F IS SPECIFIED, EACH NAME REFERS TO  A  SHELL  FUNC‐
              TION,  AND THE FUNCTION DEFINITION IS REMOVED.  IF THE -N OPTION
              IS SUPPLIED, AND NAME IS A VARIABLE WITH THE NAMEREF  ATTRIBUTE,
              NAME  WILL  BE UNSET RATHER THAN THE VARIABLE IT REFERENCES.  -N
              HAS NO EFFECT IF THE -F OPTION IS SUPPLIED.  IF NO  OPTIONS  ARE
              SUPPLIED,  EACH  NAME REFERS TO A VARIABLE; IF THERE IS NO VARI‐
              ABLE BY THAT NAME, ANY FUNCTION WITH THAT NAME IS  UNSET.   EACH
              UNSET  VARIABLE  OR  FUNCTION  IS  REMOVED  FROM THE ENVIRONMENT
              PASSED TO SUBSEQUENT COMMANDS.  IF ANY OF COMP_WORDBREAKS,  RAN‐
              DOM, SECONDS, LINENO, HISTCMD, FUNCNAME, GROUPS, OR DIRSTACK ARE
              UNSET, THEY LOSE THEIR SPECIAL PROPERTIES, EVEN IF THEY ARE SUB‐
              SEQUENTLY RESET.  THE EXIT STATUS IS TRUE UNLESS A NAME IS READ‐
              ONLY.

       WAIT [-N] [N ...]
              WAIT FOR EACH SPECIFIED CHILD PROCESS AND RETURN ITS TERMINATION
              STATUS.  EACH N MAY BE A PROCESS ID OR A JOB SPECIFICATION; IF A
              JOB SPEC IS GIVEN, ALL PROCESSES  IN  THAT  JOB'S  PIPELINE  ARE
              WAITED  FOR.  IF N IS NOT GIVEN, ALL CURRENTLY ACTIVE CHILD PRO‐
              CESSES ARE WAITED FOR, AND THE RETURN STATUS IS ZERO.  IF THE -N
              OPTION  IS  SUPPLIED,  WAIT  WAITS  FOR ANY JOB TO TERMINATE AND
              RETURNS ITS EXIT STATUS.  IF N SPECIFIES A NON-EXISTENT  PROCESS
              OR  JOB, THE RETURN STATUS IS 127.  OTHERWISE, THE RETURN STATUS
              IS THE EXIT STATUS OF THE LAST PROCESS OR JOB WAITED FOR.

RESTRICTED SHELL
       IF BASH IS STARTED WITH THE NAME RBASH, OR THE -R OPTION IS SUPPLIED AT
       INVOCATION,  THE  SHELL BECOMES RESTRICTED.  A RESTRICTED SHELL IS USED
       TO SET UP AN ENVIRONMENT MORE CONTROLLED THAN THE STANDARD  SHELL.   IT
       BEHAVES  IDENTICALLY  TO BASH WITH THE EXCEPTION THAT THE FOLLOWING ARE
       DISALLOWED OR NOT PERFORMED:

       ·      CHANGING DIRECTORIES WITH CD

       ·      SETTING OR UNSETTING THE VALUES OF SHELL, PATH, ENV, OR BASH_ENV

       ·      SPECIFYING COMMAND NAMES CONTAINING /

       ·      SPECIFYING A FILENAME CONTAINING A / AS AN  ARGUMENT  TO  THE  .
              BUILTIN COMMAND

       ·      SPECIFYING  A  FILENAME CONTAINING A SLASH AS AN ARGUMENT TO THE
              -P OPTION TO THE HASH BUILTIN COMMAND

       ·      IMPORTING FUNCTION DEFINITIONS FROM  THE  SHELL  ENVIRONMENT  AT
              STARTUP

       ·      PARSING  THE  VALUE  OF  SHELLOPTS FROM THE SHELL ENVIRONMENT AT
              STARTUP

       ·      REDIRECTING OUTPUT USING THE >, >|, <>, >&, &>, AND >> REDIRECT‐
              ION OPERATORS

       ·      USING THE EXEC BUILTIN COMMAND TO REPLACE THE SHELL WITH ANOTHER
              COMMAND

       ·      ADDING OR DELETING BUILTIN COMMANDS WITH THE -F AND  -D  OPTIONS
              TO THE ENABLE BUILTIN COMMAND

       ·      USING  THE  ENABLE  BUILTIN  COMMAND  TO  ENABLE  DISABLED SHELL
              BUILTINS

       ·      SPECIFYING THE -P OPTION TO THE COMMAND BUILTIN COMMAND

       ·      TURNING OFF RESTRICTED MODE WITH SET +R OR SET +O RESTRICTED.

       THESE RESTRICTIONS ARE ENFORCED AFTER ANY STARTUP FILES ARE READ.

       WHEN A COMMAND THAT IS FOUND TO BE A SHELL SCRIPT IS EXECUTED (SEE COM‐
       MAND  EXECUTION  ABOVE),  RBASH TURNS OFF ANY RESTRICTIONS IN THE SHELL
       SPAWNED TO EXECUTE THE SCRIPT.

SEE ALSO
       BASH REFERENCE MANUAL, BRIAN FOX AND CHET RAMEY
       THE GNU READLINE LIBRARY, BRIAN FOX AND CHET RAMEY
       THE GNU HISTORY LIBRARY, BRIAN FOX AND CHET RAMEY
       PORTABLE OPERATING SYSTEM INTERFACE (POSIX) PART 2:  SHELL  AND  UTILI‐
       TIES, IEEE --
              HTTP://PUBS.OPENGROUP.ORG/ONLINEPUBS/9699919799/
       HTTP://TISWWW.CASE.EDU/~CHET/BASH/POSIX -- A DESCRIPTION OF POSIX MODE
       SH(1), KSH(1), CSH(1)
       EMACS(1), VI(1)
       READLINE(3)

FILES
       /BIN/BASH
              THE BASH EXECUTABLE
       /ETC/PROFILE
              THE SYSTEMWIDE INITIALIZATION FILE, EXECUTED FOR LOGIN SHELLS
       /ETC/BASH.BASHRC
              THE SYSTEMWIDE PER-INTERACTIVE-SHELL STARTUP FILE
       /ETC/BASH.BASH.LOGOUT
              THE  SYSTEMWIDE  LOGIN SHELL CLEANUP FILE, EXECUTED WHEN A LOGIN
              SHELL EXITS
       ~/.BASH_PROFILE
              THE PERSONAL INITIALIZATION FILE, EXECUTED FOR LOGIN SHELLS
       ~/.BASHRC
              THE INDIVIDUAL PER-INTERACTIVE-SHELL STARTUP FILE
       ~/.BASH_LOGOUT
              THE INDIVIDUAL LOGIN SHELL CLEANUP FILE, EXECUTED WHEN  A  LOGIN
              SHELL EXITS
       ~/.INPUTRC
              INDIVIDUAL READLINE INITIALIZATION FILE

AUTHORS
       BRIAN FOX, FREE SOFTWARE FOUNDATION
       BFOX@GNU.ORG

       CHET RAMEY, CASE WESTERN RESERVE UNIVERSITY
       CHET.RAMEY@CASE.EDU

BUG REPORTS
       IF YOU FIND A BUG IN BASH, YOU SHOULD REPORT IT.  BUT FIRST, YOU SHOULD
       MAKE SURE THAT IT REALLY IS A BUG, AND THAT IT APPEARS  IN  THE  LATEST
       VERSION   OF  BASH.   THE  LATEST  VERSION  IS  ALWAYS  AVAILABLE  FROM
       FTP://FTP.GNU.ORG/PUB/GNU/BASH/.

       ONCE YOU HAVE DETERMINED THAT A BUG ACTUALLY EXISTS,  USE  THE  BASHBUG
       COMMAND  TO SUBMIT A BUG REPORT.  IF YOU HAVE A FIX, YOU ARE ENCOURAGED
       TO MAIL THAT AS WELL!  SUGGESTIONS AND `PHILOSOPHICAL' BUG REPORTS  MAY
       BE  MAILED  TO  BUG-BASH@GNU.ORG  OR  POSTED  TO  THE  USENET NEWSGROUP
       GNU.BASH.BUG.

       ALL BUG REPORTS SHOULD INCLUDE:

       THE VERSION NUMBER OF BASH
       THE HARDWARE AND OPERATING SYSTEM
       THE COMPILER USED TO COMPILE
       A DESCRIPTION OF THE BUG BEHAVIOUR
       A SHORT SCRIPT OR `RECIPE' WHICH EXERCISES THE BUG

       BASHBUG INSERTS THE FIRST THREE ITEMS AUTOMATICALLY INTO  THE  TEMPLATE
       IT PROVIDES FOR FILING A BUG REPORT.

       COMMENTS AND BUG REPORTS CONCERNING THIS MANUAL PAGE SHOULD BE DIRECTED
       TO CHET.RAMEY@CASE.EDU.

BUGS
       IT'S TOO BIG AND TOO SLOW.

       THERE ARE SOME SUBTLE DIFFERENCES BETWEEN BASH AND TRADITIONAL VERSIONS
       OF SH, MOSTLY BECAUSE OF THE POSIX SPECIFICATION.

       ALIASES ARE CONFUSING IN SOME USES.

       SHELL BUILTIN COMMANDS AND FUNCTIONS ARE NOT STOPPABLE/RESTARTABLE.

       COMPOUND COMMANDS AND COMMAND SEQUENCES OF THE FORM `A ; B ; C' ARE NOT
       HANDLED GRACEFULLY  WHEN  PROCESS  SUSPENSION  IS  ATTEMPTED.   WHEN  A
       PROCESS  IS STOPPED, THE SHELL IMMEDIATELY EXECUTES THE NEXT COMMAND IN
       THE SEQUENCE.  IT SUFFICES TO PLACE THE SEQUENCE  OF  COMMANDS  BETWEEN
       PARENTHESES  TO  FORCE  IT  INTO  A SUBSHELL, WHICH MAY BE STOPPED AS A
       UNIT.

       ARRAY VARIABLES MAY NOT (YET) BE EXPORTED.

       THERE MAY BE ONLY ONE ACTIVE COPROCESS AT A TIME.



GNU BASH 4.3                    2014 FEBRUARY 2                        BASH(1)
